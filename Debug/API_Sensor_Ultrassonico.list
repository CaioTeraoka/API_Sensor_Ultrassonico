
API_Sensor_Ultrassonico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000784c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08007960  08007960  00017960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e24  08007e24  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007e24  08007e24  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e24  08007e24  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e24  08007e24  00017e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  200001e0  0800800c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  0800800c  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009130  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001985  00000000  00000000  00029339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f1e  00000000  00000000  0002c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a74a  00000000  00000000  00043f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089409  00000000  00000000  0004e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef0  00000000  00000000  000d7b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007944 	.word	0x08007944

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007944 	.word	0x08007944

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <Medir_Distancia_CM>:
uint32_t Time2 = 0;
uint32_t Diferenca = 0;
uint8_t Primeira_Captura = 0;
uint32_t Distancia  = 0;

uint32_t Medir_Distancia_CM(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2102      	movs	r1, #2
 8000be2:	480f      	ldr	r0, [pc, #60]	; (8000c20 <Medir_Distancia_CM+0x48>)
 8000be4:	f000 fef2 	bl	80019cc <HAL_GPIO_WritePin>
	for(int x = 0; x < 40; ++x){}
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e002      	b.n	8000bf4 <Medir_Distancia_CM+0x1c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b27      	cmp	r3, #39	; 0x27
 8000bf8:	ddf9      	ble.n	8000bee <Medir_Distancia_CM+0x16>
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <Medir_Distancia_CM+0x48>)
 8000c00:	f000 fee4 	bl	80019cc <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <Medir_Distancia_CM+0x4c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <Medir_Distancia_CM+0x4c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0202 	orr.w	r2, r2, #2
 8000c12:	60da      	str	r2, [r3, #12]
	return Distancia;
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <Medir_Distancia_CM+0x50>)
 8000c16:	681b      	ldr	r3, [r3, #0]

} //Vai retornar a distância medida em centimétros
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40010800 	.word	0x40010800
 8000c24:	20000210 	.word	0x20000210
 8000c28:	2000020c 	.word	0x2000020c

08000c2c <Aproximacao>:
	return Distancia/2.54;

} //Vai retornar a distância em polegadas


void Aproximacao(void){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
	uint32_t dist = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
	while(1){
		dist = Medir_Distancia_CM();
 8000c36:	f7ff ffcf 	bl	8000bd8 <Medir_Distancia_CM>
 8000c3a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2110      	movs	r1, #16
 8000c40:	4812      	ldr	r0, [pc, #72]	; (8000c8c <Aproximacao+0x60>)
 8000c42:	f000 fec3 	bl	80019cc <HAL_GPIO_WritePin>
		for(int x = 0; x < dist*100000; ++x){}
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	e002      	b.n	8000c52 <Aproximacao+0x26>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <Aproximacao+0x64>)
 8000c56:	fb03 f202 	mul.w	r2, r3, r2
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f5      	bhi.n	8000c4c <Aproximacao+0x20>
		dist = Medir_Distancia_CM();
 8000c60:	f7ff ffba 	bl	8000bd8 <Medir_Distancia_CM>
 8000c64:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2110      	movs	r1, #16
 8000c6a:	4808      	ldr	r0, [pc, #32]	; (8000c8c <Aproximacao+0x60>)
 8000c6c:	f000 feae 	bl	80019cc <HAL_GPIO_WritePin>
		for(int x = 0; x < dist*100000; ++x){}
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	e002      	b.n	8000c7c <Aproximacao+0x50>
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <Aproximacao+0x64>)
 8000c80:	fb03 f202 	mul.w	r2, r3, r2
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d8f5      	bhi.n	8000c76 <Aproximacao+0x4a>
		dist = Medir_Distancia_CM();
 8000c8a:	e7d4      	b.n	8000c36 <Aproximacao+0xa>
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	000186a0 	.word	0x000186a0
 8000c94:	00000000 	.word	0x00000000

08000c98 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
}
*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7f1b      	ldrb	r3, [r3, #28]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	f040 8082 	bne.w	8000dae <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Primeira_Captura==0)
 8000caa:	4b45      	ldr	r3, [pc, #276]	; (8000dc0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d11a      	bne.n	8000ce8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Time1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f001 fee1 	bl	8002a7c <HAL_TIM_ReadCapturedValue>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a41      	ldr	r2, [pc, #260]	; (8000dc4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000cbe:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 1;
 8000cc0:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]


			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a1a      	ldr	r2, [r3, #32]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 020a 	bic.w	r2, r2, #10
 8000cd4:	621a      	str	r2, [r3, #32]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6a1a      	ldr	r2, [r3, #32]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f042 0202 	orr.w	r2, r2, #2
 8000ce4:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000ce6:	e062      	b.n	8000dae <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Primeira_Captura==1)
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d15e      	bne.n	8000dae <HAL_TIM_IC_CaptureCallback+0x116>
			Time2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 fec2 	bl	8002a7c <HAL_TIM_ReadCapturedValue>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000cfc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
			if (Time2 > Time1)
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d907      	bls.n	8000d22 <HAL_TIM_IC_CaptureCallback+0x8a>
				Diferenca = Time2-Time1;
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	4a2b      	ldr	r2, [pc, #172]	; (8000dcc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e00f      	b.n	8000d42 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Time1 > Time2)
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d909      	bls.n	8000d42 <HAL_TIM_IC_CaptureCallback+0xaa>
				Diferenca = (0xffff - Time1) + Time2;
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000d3c:	33ff      	adds	r3, #255	; 0xff
 8000d3e:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d40:	6013      	str	r3, [r2, #0]
			Distancia = Diferenca * 0.034/2;
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb4c 	bl	80003e4 <__aeabi_ui2d>
 8000d4c:	a31a      	add	r3, pc, #104	; (adr r3, 8000db8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	f7ff fbc1 	bl	80004d8 <__aeabi_dmul>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d66:	f7ff fce1 	bl	800072c <__aeabi_ddiv>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4610      	mov	r0, r2
 8000d70:	4619      	mov	r1, r3
 8000d72:	f7ff fe89 	bl	8000a88 <__aeabi_d2uiz>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000d7a:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 0;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6a1a      	ldr	r2, [r3, #32]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 020a 	bic.w	r2, r2, #10
 8000d90:	621a      	str	r2, [r3, #32]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6a12      	ldr	r2, [r2, #32]
 8000d9c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0202 	bic.w	r2, r2, #2
 8000dac:	60da      	str	r2, [r3, #12]
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	b020c49c 	.word	0xb020c49c
 8000dbc:	3fa16872 	.word	0x3fa16872
 8000dc0:	20000208 	.word	0x20000208
 8000dc4:	200001fc 	.word	0x200001fc
 8000dc8:	20000200 	.word	0x20000200
 8000dcc:	20000204 	.word	0x20000204
 8000dd0:	2000020c 	.word	0x2000020c
 8000dd4:	20000210 	.word	0x20000210

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f000 fb02 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f814 	bl	8000e0c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Base_Start(&htim3);
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <main+0x2c>)
 8000de6:	f001 fa41 	bl	800226c <HAL_TIM_Base_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 f915 	bl	8001018 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000dee:	f000 f84f 	bl	8000e90 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000df2:	f000 f8c3 	bl	8000f7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000df6:	2100      	movs	r1, #0
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <main+0x30>)
 8000dfa:	f001 fad9 	bl	80023b0 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
Aproximacao();
 8000dfe:	f7ff ff15 	bl	8000c2c <Aproximacao>
 8000e02:	e7fc      	b.n	8000dfe <main+0x26>
 8000e04:	20000258 	.word	0x20000258
 8000e08:	20000210 	.word	0x20000210

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b090      	sub	sp, #64	; 0x40
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0318 	add.w	r3, r7, #24
 8000e16:	2228      	movs	r2, #40	; 0x28
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 f95a 	bl	80030d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e36:	2310      	movs	r3, #16
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e42:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fdd5 	bl	80019fc <HAL_RCC_OscConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e58:	f000 f910 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2302      	movs	r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2102      	movs	r1, #2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f842 	bl	8001f00 <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e82:	f000 f8fb 	bl	800107c <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3740      	adds	r7, #64	; 0x40
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0318 	add.w	r3, r7, #24
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	; (8000f78 <MX_TIM1_Init+0xe8>)
 8000ebe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000ec2:	223f      	movs	r2, #63	; 0x3f
 8000ec4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000ece:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ed2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ee6:	4823      	ldr	r0, [pc, #140]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000ee8:	f001 f970 	bl	80021cc <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000ef2:	f000 f8c3 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	4619      	mov	r1, r3
 8000f02:	481c      	ldr	r0, [pc, #112]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000f04:	f001 fcf6 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000f0e:	f000 f8b5 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f12:	4818      	ldr	r0, [pc, #96]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000f14:	f001 f9f4 	bl	8002300 <HAL_TIM_IC_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000f1e:	f000 f8ad 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000f32:	f002 f835 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000f3c:	f000 f89e 	bl	800107c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f44:	2301      	movs	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000f58:	f001 fc38 	bl	80027cc <HAL_TIM_IC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000f62:	f000 f88b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MX_TIM1_Init+0xe4>)
 8000f68:	f001 f980 	bl	800226c <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000210 	.word	0x20000210
 8000f78:	40012c00 	.word	0x40012c00

08000f7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	463b      	mov	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_TIM3_Init+0x94>)
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <MX_TIM3_Init+0x98>)
 8000f9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_TIM3_Init+0x94>)
 8000fa0:	223f      	movs	r2, #63	; 0x3f
 8000fa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_TIM3_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_TIM3_Init+0x94>)
 8000fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_TIM3_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_TIM3_Init+0x94>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fbe:	4814      	ldr	r0, [pc, #80]	; (8001010 <MX_TIM3_Init+0x94>)
 8000fc0:	f001 f904 	bl	80021cc <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000fca:	f000 f857 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480d      	ldr	r0, [pc, #52]	; (8001010 <MX_TIM3_Init+0x94>)
 8000fdc:	f001 fc8a 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 f849 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_TIM3_Init+0x94>)
 8000ff8:	f001 ffd2 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001002:	f000 f83b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000258 	.word	0x20000258
 8001014:	40000400 	.word	0x40000400

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_GPIO_Init+0x5c>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <MX_GPIO_Init+0x5c>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_GPIO_Init+0x5c>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2132      	movs	r1, #50	; 0x32
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <MX_GPIO_Init+0x60>)
 800104a:	f000 fcbf 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Trigger_Pin LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin|LED_1_Pin|LED_2_Pin;
 800104e:	2332      	movs	r3, #50	; 0x32
 8001050:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2302      	movs	r3, #2
 800105c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4619      	mov	r1, r3
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_GPIO_Init+0x60>)
 8001066:	f000 fb2d 	bl	80016c4 <HAL_GPIO_Init>

}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_MspInit+0x40>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <HAL_MspInit+0x40>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_MspInit+0x40>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_MspInit+0x40>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_MspInit+0x40>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_MspInit+0x40>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a27      	ldr	r2, [pc, #156]	; (8001184 <HAL_TIM_Base_MspInit+0xb8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d12d      	bne.n	8001148 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_TIM_Base_MspInit+0xbc>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a25      	ldr	r2, [pc, #148]	; (8001188 <HAL_TIM_Base_MspInit+0xbc>)
 80010f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_TIM_Base_MspInit+0xbc>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b20      	ldr	r3, [pc, #128]	; (8001188 <HAL_TIM_Base_MspInit+0xbc>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <HAL_TIM_Base_MspInit+0xbc>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_TIM_Base_MspInit+0xbc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	4619      	mov	r1, r3
 8001130:	4816      	ldr	r0, [pc, #88]	; (800118c <HAL_TIM_Base_MspInit+0xc0>)
 8001132:	f000 fac7 	bl	80016c4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	201b      	movs	r0, #27
 800113c:	f000 fa8b 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001140:	201b      	movs	r0, #27
 8001142:	f000 faa4 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001146:	e018      	b.n	800117a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_TIM_Base_MspInit+0xc4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d113      	bne.n	800117a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_TIM_Base_MspInit+0xbc>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <HAL_TIM_Base_MspInit+0xbc>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	61d3      	str	r3, [r2, #28]
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_TIM_Base_MspInit+0xbc>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	201d      	movs	r0, #29
 8001170:	f000 fa71 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001174:	201d      	movs	r0, #29
 8001176:	f000 fa8a 	bl	800168e <HAL_NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40012c00 	.word	0x40012c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40010800 	.word	0x40010800
 8001190:	40000400 	.word	0x40000400

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f949 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <TIM1_CC_IRQHandler+0x10>)
 80011ea:	f001 f9e7 	bl	80025bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000210 	.word	0x20000210

080011f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM3_IRQHandler+0x10>)
 80011fe:	f001 f9dd 	bl	80025bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000258 	.word	0x20000258

0800120c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return 1;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <_kill>:

int _kill(int pid, int sig)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001224:	f001 ff2c 	bl	8003080 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	2216      	movs	r2, #22
 800122c:	601a      	str	r2, [r3, #0]
	return -1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_exit>:

void _exit (int status)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001242:	f04f 31ff 	mov.w	r1, #4294967295
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffe7 	bl	800121a <_kill>
	while (1) {}		/* Make sure we hang here */
 800124c:	e7fe      	b.n	800124c <_exit+0x12>

0800124e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e00a      	b.n	8001276 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001260:	f3af 8000 	nop.w
 8001264:	4601      	mov	r1, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	60ba      	str	r2, [r7, #8]
 800126c:	b2ca      	uxtb	r2, r1
 800126e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	429a      	cmp	r2, r3
 800127c:	dbf0      	blt.n	8001260 <_read+0x12>
	}

return len;
 800127e:	687b      	ldr	r3, [r7, #4]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e009      	b.n	80012ae <_write+0x26>
	{
		__io_putchar(*ptr++);
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	60ba      	str	r2, [r7, #8]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dbf1      	blt.n	800129a <_write+0x12>
	}
	return len;
 80012b6:	687b      	ldr	r3, [r7, #4]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_close>:

int _close(int file)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	return -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e6:	605a      	str	r2, [r3, #4]
	return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <_isatty>:

int _isatty(int file)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	return 1;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f001 fe96 	bl	8003080 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20005000 	.word	0x20005000
 8001380:	00000400 	.word	0x00000400
 8001384:	200002a0 	.word	0x200002a0
 8001388:	200002b8 	.word	0x200002b8

0800138c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013be:	f7ff ffe5 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c2:	f001 fe63 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c6:	f7ff fd07 	bl	8000dd8 <main>
  bx lr
 80013ca:	4770      	bx	lr
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80013d4:	08007e2c 	.word	0x08007e2c
  ldr r2, =_sbss
 80013d8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80013dc:	200002b8 	.word	0x200002b8

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_Init+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_Init+0x28>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f923 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	200f      	movs	r0, #15
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fe42 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f93b 	bl	80016aa <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f903 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000
 8001468:	20000008 	.word	0x20000008
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x1c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x20>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_IncTick+0x20>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000008 	.word	0x20000008
 8001490:	200002a4 	.word	0x200002a4

08001494 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <HAL_GetTick+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	200002a4 	.word	0x200002a4

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4906      	ldr	r1, [pc, #24]	; (8001540 <__NVIC_EnableIRQ+0x34>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff90 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff2d 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff42 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff90 	bl	8001598 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5f 	bl	8001544 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff35 	bl	800150c <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa2 	bl	80015fc <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b08b      	sub	sp, #44	; 0x2c
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e169      	b.n	80019ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d8:	2201      	movs	r2, #1
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	f040 8158 	bne.w	80019a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a9a      	ldr	r2, [pc, #616]	; (8001964 <HAL_GPIO_Init+0x2a0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d05e      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001700:	4a98      	ldr	r2, [pc, #608]	; (8001964 <HAL_GPIO_Init+0x2a0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d875      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 8001706:	4a98      	ldr	r2, [pc, #608]	; (8001968 <HAL_GPIO_Init+0x2a4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d058      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 800170c:	4a96      	ldr	r2, [pc, #600]	; (8001968 <HAL_GPIO_Init+0x2a4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d86f      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 8001712:	4a96      	ldr	r2, [pc, #600]	; (800196c <HAL_GPIO_Init+0x2a8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d052      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001718:	4a94      	ldr	r2, [pc, #592]	; (800196c <HAL_GPIO_Init+0x2a8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d869      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 800171e:	4a94      	ldr	r2, [pc, #592]	; (8001970 <HAL_GPIO_Init+0x2ac>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d04c      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001724:	4a92      	ldr	r2, [pc, #584]	; (8001970 <HAL_GPIO_Init+0x2ac>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d863      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 800172a:	4a92      	ldr	r2, [pc, #584]	; (8001974 <HAL_GPIO_Init+0x2b0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d046      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001730:	4a90      	ldr	r2, [pc, #576]	; (8001974 <HAL_GPIO_Init+0x2b0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d85d      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d82a      	bhi.n	8001790 <HAL_GPIO_Init+0xcc>
 800173a:	2b12      	cmp	r3, #18
 800173c:	d859      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <HAL_GPIO_Init+0x80>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	080017bf 	.word	0x080017bf
 8001748:	08001799 	.word	0x08001799
 800174c:	080017ab 	.word	0x080017ab
 8001750:	080017ed 	.word	0x080017ed
 8001754:	080017f3 	.word	0x080017f3
 8001758:	080017f3 	.word	0x080017f3
 800175c:	080017f3 	.word	0x080017f3
 8001760:	080017f3 	.word	0x080017f3
 8001764:	080017f3 	.word	0x080017f3
 8001768:	080017f3 	.word	0x080017f3
 800176c:	080017f3 	.word	0x080017f3
 8001770:	080017f3 	.word	0x080017f3
 8001774:	080017f3 	.word	0x080017f3
 8001778:	080017f3 	.word	0x080017f3
 800177c:	080017f3 	.word	0x080017f3
 8001780:	080017f3 	.word	0x080017f3
 8001784:	080017f3 	.word	0x080017f3
 8001788:	080017a1 	.word	0x080017a1
 800178c:	080017b5 	.word	0x080017b5
 8001790:	4a79      	ldr	r2, [pc, #484]	; (8001978 <HAL_GPIO_Init+0x2b4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001796:	e02c      	b.n	80017f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e029      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	3304      	adds	r3, #4
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e024      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	3308      	adds	r3, #8
 80017b0:	623b      	str	r3, [r7, #32]
          break;
 80017b2:	e01f      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	330c      	adds	r3, #12
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e01a      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c6:	2304      	movs	r3, #4
 80017c8:	623b      	str	r3, [r7, #32]
          break;
 80017ca:	e013      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	611a      	str	r2, [r3, #16]
          break;
 80017de:	e009      	b.n	80017f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e0:	2308      	movs	r3, #8
 80017e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	615a      	str	r2, [r3, #20]
          break;
 80017ea:	e003      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          break;
 80017f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2bff      	cmp	r3, #255	; 0xff
 80017f8:	d801      	bhi.n	80017fe <HAL_GPIO_Init+0x13a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	e001      	b.n	8001802 <HAL_GPIO_Init+0x13e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d802      	bhi.n	8001810 <HAL_GPIO_Init+0x14c>
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	e002      	b.n	8001816 <HAL_GPIO_Init+0x152>
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	3b08      	subs	r3, #8
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	210f      	movs	r1, #15
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	6a39      	ldr	r1, [r7, #32]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	431a      	orrs	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80b1 	beq.w	80019a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001844:	4b4d      	ldr	r3, [pc, #308]	; (800197c <HAL_GPIO_Init+0x2b8>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a4c      	ldr	r2, [pc, #304]	; (800197c <HAL_GPIO_Init+0x2b8>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b4a      	ldr	r3, [pc, #296]	; (800197c <HAL_GPIO_Init+0x2b8>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800185c:	4a48      	ldr	r2, [pc, #288]	; (8001980 <HAL_GPIO_Init+0x2bc>)
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a40      	ldr	r2, [pc, #256]	; (8001984 <HAL_GPIO_Init+0x2c0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d013      	beq.n	80018b0 <HAL_GPIO_Init+0x1ec>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <HAL_GPIO_Init+0x2c4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00d      	beq.n	80018ac <HAL_GPIO_Init+0x1e8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a3e      	ldr	r2, [pc, #248]	; (800198c <HAL_GPIO_Init+0x2c8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d007      	beq.n	80018a8 <HAL_GPIO_Init+0x1e4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3d      	ldr	r2, [pc, #244]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_GPIO_Init+0x1e0>
 80018a0:	2303      	movs	r3, #3
 80018a2:	e006      	b.n	80018b2 <HAL_GPIO_Init+0x1ee>
 80018a4:	2304      	movs	r3, #4
 80018a6:	e004      	b.n	80018b2 <HAL_GPIO_Init+0x1ee>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x1ee>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_GPIO_Init+0x1ee>
 80018b0:	2300      	movs	r3, #0
 80018b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b4:	f002 0203 	and.w	r2, r2, #3
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	4093      	lsls	r3, r2
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018c2:	492f      	ldr	r1, [pc, #188]	; (8001980 <HAL_GPIO_Init+0x2bc>)
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	492c      	ldr	r1, [pc, #176]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4928      	ldr	r1, [pc, #160]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4922      	ldr	r1, [pc, #136]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	491e      	ldr	r1, [pc, #120]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	4918      	ldr	r1, [pc, #96]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	4914      	ldr	r1, [pc, #80]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001944:	4013      	ands	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d021      	beq.n	8001998 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
 8001960:	e021      	b.n	80019a6 <HAL_GPIO_Init+0x2e2>
 8001962:	bf00      	nop
 8001964:	10320000 	.word	0x10320000
 8001968:	10310000 	.word	0x10310000
 800196c:	10220000 	.word	0x10220000
 8001970:	10210000 	.word	0x10210000
 8001974:	10120000 	.word	0x10120000
 8001978:	10110000 	.word	0x10110000
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000
 8001984:	40010800 	.word	0x40010800
 8001988:	40010c00 	.word	0x40010c00
 800198c:	40011000 	.word	0x40011000
 8001990:	40011400 	.word	0x40011400
 8001994:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_GPIO_Init+0x304>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	43db      	mvns	r3, r3
 80019a0:	4909      	ldr	r1, [pc, #36]	; (80019c8 <HAL_GPIO_Init+0x304>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	3301      	adds	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f47f ae8e 	bne.w	80016d8 <HAL_GPIO_Init+0x14>
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	372c      	adds	r7, #44	; 0x2c
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019e8:	e003      	b.n	80019f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e272      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8087 	beq.w	8001b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a1c:	4b92      	ldr	r3, [pc, #584]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d00c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a28:	4b8f      	ldr	r3, [pc, #572]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d112      	bne.n	8001a5a <HAL_RCC_OscConfig+0x5e>
 8001a34:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a40:	d10b      	bne.n	8001a5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d06c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x12c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d168      	bne.n	8001b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e24c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x76>
 8001a64:	4b80      	ldr	r3, [pc, #512]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a7f      	ldr	r2, [pc, #508]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e02e      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd4>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x98>
 8001a7a:	4b7b      	ldr	r3, [pc, #492]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7a      	ldr	r2, [pc, #488]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b78      	ldr	r3, [pc, #480]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a77      	ldr	r2, [pc, #476]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xbc>
 8001a9e:	4b72      	ldr	r3, [pc, #456]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a71      	ldr	r2, [pc, #452]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6e      	ldr	r2, [pc, #440]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd4>
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a6a      	ldr	r2, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a67      	ldr	r2, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fcdc 	bl	8001494 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fcd8 	bl	8001494 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e200      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xe4>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fcc8 	bl	8001494 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fcc4 	bl	8001494 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1ec      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x10c>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d063      	beq.n	8001bfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b36:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b42:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d11c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x18c>
 8001b4e:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d116      	bne.n	8001b88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x176>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1c0      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4939      	ldr	r1, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e03a      	b.n	8001bfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <HAL_RCC_OscConfig+0x270>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fc7d 	bl	8001494 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fc79 	bl	8001494 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1a1      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4927      	ldr	r1, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_RCC_OscConfig+0x270>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fc5c 	bl	8001494 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc58 	bl	8001494 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e180      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d03a      	beq.n	8001c80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d019      	beq.n	8001c46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_RCC_OscConfig+0x274>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7ff fc3c 	bl	8001494 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff fc38 	bl	8001494 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e160      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f000 faa6 	bl	8002190 <RCC_Delay>
 8001c44:	e01c      	b.n	8001c80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x274>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4c:	f7ff fc22 	bl	8001494 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c52:	e00f      	b.n	8001c74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff fc1e 	bl	8001494 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d908      	bls.n	8001c74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e146      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	42420000 	.word	0x42420000
 8001c70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c74:	4b92      	ldr	r3, [pc, #584]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e9      	bne.n	8001c54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a6 	beq.w	8001dda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c92:	4b8b      	ldr	r3, [pc, #556]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b88      	ldr	r3, [pc, #544]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a87      	ldr	r2, [pc, #540]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b85      	ldr	r3, [pc, #532]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cba:	4b82      	ldr	r3, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x4c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d118      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc6:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x4c8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a7e      	ldr	r2, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x4c8>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fbdf 	bl	8001494 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7ff fbdb 	bl	8001494 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b64      	cmp	r3, #100	; 0x64
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e103      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	4b75      	ldr	r3, [pc, #468]	; (8001ec4 <HAL_RCC_OscConfig+0x4c8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x312>
 8001d00:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6213      	str	r3, [r2, #32]
 8001d0c:	e02d      	b.n	8001d6a <HAL_RCC_OscConfig+0x36e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x334>
 8001d16:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a69      	ldr	r2, [pc, #420]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a66      	ldr	r2, [pc, #408]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 0304 	bic.w	r3, r3, #4
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	e01c      	b.n	8001d6a <HAL_RCC_OscConfig+0x36e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d10c      	bne.n	8001d52 <HAL_RCC_OscConfig+0x356>
 8001d38:	4b61      	ldr	r3, [pc, #388]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a60      	ldr	r2, [pc, #384]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	4b5e      	ldr	r3, [pc, #376]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a5d      	ldr	r2, [pc, #372]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	e00b      	b.n	8001d6a <HAL_RCC_OscConfig+0x36e>
 8001d52:	4b5b      	ldr	r3, [pc, #364]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a5a      	ldr	r2, [pc, #360]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	4b58      	ldr	r3, [pc, #352]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a57      	ldr	r2, [pc, #348]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d015      	beq.n	8001d9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fb8f 	bl	8001494 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff fb8b 	bl	8001494 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0b1      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	4b4b      	ldr	r3, [pc, #300]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ee      	beq.n	8001d7a <HAL_RCC_OscConfig+0x37e>
 8001d9c:	e014      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fb79 	bl	8001494 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7ff fb75 	bl	8001494 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e09b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ee      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a3b      	ldr	r2, [pc, #236]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8087 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d061      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d146      	bne.n	8001e86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <HAL_RCC_OscConfig+0x4cc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fb49 	bl	8001494 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7ff fb45 	bl	8001494 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e06d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d108      	bne.n	8001e40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4921      	ldr	r1, [pc, #132]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a19      	ldr	r1, [r3, #32]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	430b      	orrs	r3, r1
 8001e52:	491b      	ldr	r1, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x4cc>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fb19 	bl	8001494 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7ff fb15 	bl	8001494 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e03d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x46a>
 8001e84:	e035      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_RCC_OscConfig+0x4cc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fb02 	bl	8001494 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff fafe 	bl	8001494 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e026      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x498>
 8001eb2:	e01e      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e019      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40007000 	.word	0x40007000
 8001ec8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_OscConfig+0x500>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0d0      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0207 	bic.w	r2, r3, #7
 8001f2a:	4965      	ldr	r1, [pc, #404]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0b8      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	494d      	ldr	r1, [pc, #308]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d040      	beq.n	8002020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e07f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e073      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e06b      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fde:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f023 0203 	bic.w	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4936      	ldr	r1, [pc, #216]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff fa50 	bl	8001494 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7ff fa4c 	bl	8001494 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e053      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 020c 	and.w	r2, r3, #12
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1eb      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d210      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4922      	ldr	r1, [pc, #136]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e032      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4916      	ldr	r1, [pc, #88]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800208e:	f000 f821 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002092:	4602      	mov	r2, r0
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	490a      	ldr	r1, [pc, #40]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	5ccb      	ldrb	r3, [r1, r3]
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1cc>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1d0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f9ae 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08007970 	.word	0x08007970
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b490      	push	{r4, r7}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <HAL_RCC_GetSysClockFreq+0xac>)
 80020dc:	1d3c      	adds	r4, r7, #4
 80020de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020e4:	f240 2301 	movw	r3, #513	; 0x201
 80020e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020fe:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b04      	cmp	r3, #4
 800210c:	d002      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x40>
 800210e:	2b08      	cmp	r3, #8
 8002110:	d003      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0x46>
 8002112:	e02b      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	e02b      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	0c9b      	lsrs	r3, r3, #18
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3328      	adds	r3, #40	; 0x28
 8002124:	443b      	add	r3, r7
 8002126:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800212a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d012      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	0c5b      	lsrs	r3, r3, #17
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	3328      	adds	r3, #40	; 0x28
 8002142:	443b      	add	r3, r7
 8002144:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002148:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb4>)
 800214e:	fb03 f202 	mul.w	r2, r3, r2
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	e004      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	623b      	str	r3, [r7, #32]
      break;
 800216a:	e002      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb4>)
 800216e:	623b      	str	r3, [r7, #32]
      break;
 8002170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002172:	6a3b      	ldr	r3, [r7, #32]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bc90      	pop	{r4, r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	08007960 	.word	0x08007960
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200
 800218c:	003d0900 	.word	0x003d0900

08002190 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <RCC_Delay+0x34>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <RCC_Delay+0x38>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0a5b      	lsrs	r3, r3, #9
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ac:	bf00      	nop
  }
  while (Delay --);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	60fa      	str	r2, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f9      	bne.n	80021ac <RCC_Delay+0x1c>
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	20000000 	.word	0x20000000
 80021c8:	10624dd3 	.word	0x10624dd3

080021cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe ff6a 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fc9e 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d001      	beq.n	8002284 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e032      	b.n	80022ea <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_TIM_Base_Start+0x88>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_TIM_Base_Start+0x48>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d009      	beq.n	80022b4 <HAL_TIM_Base_Start+0x48>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <HAL_TIM_Base_Start+0x8c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_TIM_Base_Start+0x48>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <HAL_TIM_Base_Start+0x90>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d010      	beq.n	80022e8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d6:	e007      	b.n	80022e8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800

08002300 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e041      	b.n	8002396 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f839 	bl	800239e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f000 fc04 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <HAL_TIM_IC_Start_IT+0x1a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	e013      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x42>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d104      	bne.n	80023da <HAL_TIM_IC_Start_IT+0x2a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	e00b      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x42>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d104      	bne.n	80023ea <HAL_TIM_IC_Start_IT+0x3a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	e003      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x42>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d104      	bne.n	8002404 <HAL_TIM_IC_Start_IT+0x54>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e013      	b.n	800242c <HAL_TIM_IC_Start_IT+0x7c>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b04      	cmp	r3, #4
 8002408:	d104      	bne.n	8002414 <HAL_TIM_IC_Start_IT+0x64>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e00b      	b.n	800242c <HAL_TIM_IC_Start_IT+0x7c>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d104      	bne.n	8002424 <HAL_TIM_IC_Start_IT+0x74>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e003      	b.n	800242c <HAL_TIM_IC_Start_IT+0x7c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800242a:	b2db      	uxtb	r3, r3
 800242c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d102      	bne.n	800243a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0b3      	b.n	80025a6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <HAL_TIM_IC_Start_IT+0x9e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800244c:	e013      	b.n	8002476 <HAL_TIM_IC_Start_IT+0xc6>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d104      	bne.n	800245e <HAL_TIM_IC_Start_IT+0xae>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245c:	e00b      	b.n	8002476 <HAL_TIM_IC_Start_IT+0xc6>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d104      	bne.n	800246e <HAL_TIM_IC_Start_IT+0xbe>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800246c:	e003      	b.n	8002476 <HAL_TIM_IC_Start_IT+0xc6>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d104      	bne.n	8002486 <HAL_TIM_IC_Start_IT+0xd6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002484:	e013      	b.n	80024ae <HAL_TIM_IC_Start_IT+0xfe>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d104      	bne.n	8002496 <HAL_TIM_IC_Start_IT+0xe6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002494:	e00b      	b.n	80024ae <HAL_TIM_IC_Start_IT+0xfe>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d104      	bne.n	80024a6 <HAL_TIM_IC_Start_IT+0xf6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a4:	e003      	b.n	80024ae <HAL_TIM_IC_Start_IT+0xfe>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d841      	bhi.n	8002538 <HAL_TIM_IC_Start_IT+0x188>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_TIM_IC_Start_IT+0x10c>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	08002539 	.word	0x08002539
 80024c4:	08002539 	.word	0x08002539
 80024c8:	08002539 	.word	0x08002539
 80024cc:	08002503 	.word	0x08002503
 80024d0:	08002539 	.word	0x08002539
 80024d4:	08002539 	.word	0x08002539
 80024d8:	08002539 	.word	0x08002539
 80024dc:	08002515 	.word	0x08002515
 80024e0:	08002539 	.word	0x08002539
 80024e4:	08002539 	.word	0x08002539
 80024e8:	08002539 	.word	0x08002539
 80024ec:	08002527 	.word	0x08002527
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0202 	orr.w	r2, r2, #2
 80024fe:	60da      	str	r2, [r3, #12]
      break;
 8002500:	e01b      	b.n	800253a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0204 	orr.w	r2, r2, #4
 8002510:	60da      	str	r2, [r3, #12]
      break;
 8002512:	e012      	b.n	800253a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0208 	orr.w	r2, r2, #8
 8002522:	60da      	str	r2, [r3, #12]
      break;
 8002524:	e009      	b.n	800253a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0210 	orr.w	r2, r2, #16
 8002534:	60da      	str	r2, [r3, #12]
      break;
 8002536:	e000      	b.n	800253a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002538:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2201      	movs	r2, #1
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fd07 	bl	8002f56 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_TIM_IC_Start_IT+0x200>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00e      	beq.n	8002570 <HAL_TIM_IC_Start_IT+0x1c0>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d009      	beq.n	8002570 <HAL_TIM_IC_Start_IT+0x1c0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_TIM_IC_Start_IT+0x204>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_TIM_IC_Start_IT+0x1c0>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <HAL_TIM_IC_Start_IT+0x208>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d010      	beq.n	80025a4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002592:	e007      	b.n	80025a4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800

080025bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d122      	bne.n	8002618 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d11b      	bne.n	8002618 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0202 	mvn.w	r2, #2
 80025e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fb4a 	bl	8000c98 <HAL_TIM_IC_CaptureCallback>
 8002604:	e005      	b.n	8002612 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa85 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fa8b 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d122      	bne.n	800266c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0204 	mvn.w	r2, #4
 800263c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fb20 	bl	8000c98 <HAL_TIM_IC_CaptureCallback>
 8002658:	e005      	b.n	8002666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fa5b 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fa61 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d122      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b08      	cmp	r3, #8
 8002686:	d11b      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0208 	mvn.w	r2, #8
 8002690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2204      	movs	r2, #4
 8002696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe faf6 	bl	8000c98 <HAL_TIM_IC_CaptureCallback>
 80026ac:	e005      	b.n	80026ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa31 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fa37 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0210 	mvn.w	r2, #16
 80026e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2208      	movs	r2, #8
 80026ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe facc 	bl	8000c98 <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa07 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fa0d 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0201 	mvn.w	r2, #1
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f9e2 	bl	8002b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b80      	cmp	r3, #128	; 0x80
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fc81 	bl	800306e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d107      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f9d1 	bl	8002b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0220 	mvn.w	r2, #32
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fc4c 	bl	800305c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e082      	b.n	80028ec <HAL_TIM_IC_ConfigChannel+0x120>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11b      	bne.n	800282c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6819      	ldr	r1, [r3, #0]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f000 fa04 	bl	8002c10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 020c 	bic.w	r2, r2, #12
 8002816:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6999      	ldr	r1, [r3, #24]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	619a      	str	r2, [r3, #24]
 800282a:	e05a      	b.n	80028e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b04      	cmp	r3, #4
 8002830:	d11c      	bne.n	800286c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f000 fa6d 	bl	8002d20 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002854:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6999      	ldr	r1, [r3, #24]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	021a      	lsls	r2, r3, #8
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	619a      	str	r2, [r3, #24]
 800286a:	e03a      	b.n	80028e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b08      	cmp	r3, #8
 8002870:	d11b      	bne.n	80028aa <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f000 fab8 	bl	8002df6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 020c 	bic.w	r2, r2, #12
 8002894:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69d9      	ldr	r1, [r3, #28]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	61da      	str	r2, [r3, #28]
 80028a8:	e01b      	b.n	80028e2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	6819      	ldr	r1, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f000 fad7 	bl	8002e6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69d9      	ldr	r1, [r3, #28]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	021a      	lsls	r2, r3, #8
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_TIM_ConfigClockSource+0x18>
 8002908:	2302      	movs	r3, #2
 800290a:	e0b3      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x180>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800292a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002932:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002944:	d03e      	beq.n	80029c4 <HAL_TIM_ConfigClockSource+0xd0>
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294a:	f200 8087 	bhi.w	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002952:	f000 8085 	beq.w	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295a:	d87f      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800295c:	2b70      	cmp	r3, #112	; 0x70
 800295e:	d01a      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0xa2>
 8002960:	2b70      	cmp	r3, #112	; 0x70
 8002962:	d87b      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 8002964:	2b60      	cmp	r3, #96	; 0x60
 8002966:	d050      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x116>
 8002968:	2b60      	cmp	r3, #96	; 0x60
 800296a:	d877      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800296c:	2b50      	cmp	r3, #80	; 0x50
 800296e:	d03c      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0xf6>
 8002970:	2b50      	cmp	r3, #80	; 0x50
 8002972:	d873      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d058      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x136>
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d86f      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800297c:	2b30      	cmp	r3, #48	; 0x30
 800297e:	d064      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x156>
 8002980:	2b30      	cmp	r3, #48	; 0x30
 8002982:	d86b      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 8002984:	2b20      	cmp	r3, #32
 8002986:	d060      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x156>
 8002988:	2b20      	cmp	r3, #32
 800298a:	d867      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05c      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x156>
 8002990:	2b10      	cmp	r3, #16
 8002992:	d05a      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002994:	e062      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f000 fab7 	bl	8002f18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	609a      	str	r2, [r3, #8]
      break;
 80029c2:	e04e      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f000 faa0 	bl	8002f18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e6:	609a      	str	r2, [r3, #8]
      break;
 80029e8:	e03b      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f000 f964 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2150      	movs	r1, #80	; 0x50
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fa6e 	bl	8002ee4 <TIM_ITRx_SetConfig>
      break;
 8002a08:	e02b      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f000 f9be 	bl	8002d98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2160      	movs	r1, #96	; 0x60
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fa5e 	bl	8002ee4 <TIM_ITRx_SetConfig>
      break;
 8002a28:	e01b      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f000 f944 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2140      	movs	r1, #64	; 0x40
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fa4e 	bl	8002ee4 <TIM_ITRx_SetConfig>
      break;
 8002a48:	e00b      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f000 fa45 	bl	8002ee4 <TIM_ITRx_SetConfig>
        break;
 8002a5a:	e002      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d831      	bhi.n	8002af4 <HAL_TIM_ReadCapturedValue+0x78>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002acd 	.word	0x08002acd
 8002a9c:	08002af5 	.word	0x08002af5
 8002aa0:	08002af5 	.word	0x08002af5
 8002aa4:	08002af5 	.word	0x08002af5
 8002aa8:	08002ad7 	.word	0x08002ad7
 8002aac:	08002af5 	.word	0x08002af5
 8002ab0:	08002af5 	.word	0x08002af5
 8002ab4:	08002af5 	.word	0x08002af5
 8002ab8:	08002ae1 	.word	0x08002ae1
 8002abc:	08002af5 	.word	0x08002af5
 8002ac0:	08002af5 	.word	0x08002af5
 8002ac4:	08002af5 	.word	0x08002af5
 8002ac8:	08002aeb 	.word	0x08002aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	60fb      	str	r3, [r7, #12]

      break;
 8002ad4:	e00f      	b.n	8002af6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	60fb      	str	r3, [r7, #12]

      break;
 8002ade:	e00a      	b.n	8002af6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	60fb      	str	r3, [r7, #12]

      break;
 8002ae8:	e005      	b.n	8002af6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	60fb      	str	r3, [r7, #12]

      break;
 8002af2:	e000      	b.n	8002af6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002af4:	bf00      	nop
  }

  return tmpreg;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <TIM_Base_SetConfig+0xb8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <TIM_Base_SetConfig+0x30>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d007      	beq.n	8002b7c <TIM_Base_SetConfig+0x30>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <TIM_Base_SetConfig+0xbc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d003      	beq.n	8002b7c <TIM_Base_SetConfig+0x30>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <TIM_Base_SetConfig+0xc0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d108      	bne.n	8002b8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <TIM_Base_SetConfig+0xb8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <TIM_Base_SetConfig+0x62>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9c:	d007      	beq.n	8002bae <TIM_Base_SetConfig+0x62>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <TIM_Base_SetConfig+0xbc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_Base_SetConfig+0x62>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <TIM_Base_SetConfig+0xc0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <TIM_Base_SetConfig+0xb8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d103      	bne.n	8002bf4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	615a      	str	r2, [r3, #20]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800

08002c10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	f023 0201 	bic.w	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <TIM_TI1_SetConfig+0xa8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_TI1_SetConfig+0x46>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d007      	beq.n	8002c56 <TIM_TI1_SetConfig+0x46>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <TIM_TI1_SetConfig+0xac>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_TI1_SetConfig+0x46>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <TIM_TI1_SetConfig+0xb0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <TIM_TI1_SetConfig+0x4a>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <TIM_TI1_SetConfig+0x4c>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	e003      	b.n	8002c7a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f023 030a 	bic.w	r3, r3, #10
 8002c94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f003 030a 	and.w	r3, r3, #10
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	621a      	str	r2, [r3, #32]
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800

08002cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0201 	bic.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 030a 	bic.w	r3, r3, #10
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0210 	bic.w	r2, r3, #16
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	031b      	lsls	r3, r3, #12
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f023 0210 	bic.w	r2, r3, #16
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	031b      	lsls	r3, r3, #12
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	621a      	str	r2, [r3, #32]
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 0303 	bic.w	r3, r3, #3
 8002e22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eaa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	031b      	lsls	r3, r3, #12
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	031b      	lsls	r3, r3, #12
 8002ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f043 0307 	orr.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	021a      	lsls	r2, r3, #8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	609a      	str	r2, [r3, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b087      	sub	sp, #28
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2201      	movs	r2, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1a      	ldr	r2, [r3, #32]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	401a      	ands	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1a      	ldr	r2, [r3, #32]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	621a      	str	r2, [r3, #32]
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e046      	b.n	8003046 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d009      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a10      	ldr	r2, [pc, #64]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10c      	bne.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	4313      	orrs	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	40012c00 	.word	0x40012c00
 8003054:	40000400 	.word	0x40000400
 8003058:	40000800 	.word	0x40000800

0800305c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <__errno>:
 8003080:	4b01      	ldr	r3, [pc, #4]	; (8003088 <__errno+0x8>)
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	2000000c 	.word	0x2000000c

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2600      	movs	r6, #0
 8003090:	4d0c      	ldr	r5, [pc, #48]	; (80030c4 <__libc_init_array+0x38>)
 8003092:	4c0d      	ldr	r4, [pc, #52]	; (80030c8 <__libc_init_array+0x3c>)
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	f004 fc52 	bl	8007944 <_init>
 80030a0:	2600      	movs	r6, #0
 80030a2:	4d0a      	ldr	r5, [pc, #40]	; (80030cc <__libc_init_array+0x40>)
 80030a4:	4c0a      	ldr	r4, [pc, #40]	; (80030d0 <__libc_init_array+0x44>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	08007e24 	.word	0x08007e24
 80030c8:	08007e24 	.word	0x08007e24
 80030cc:	08007e24 	.word	0x08007e24
 80030d0:	08007e28 	.word	0x08007e28

080030d4 <memset>:
 80030d4:	4603      	mov	r3, r0
 80030d6:	4402      	add	r2, r0
 80030d8:	4293      	cmp	r3, r2
 80030da:	d100      	bne.n	80030de <memset+0xa>
 80030dc:	4770      	bx	lr
 80030de:	f803 1b01 	strb.w	r1, [r3], #1
 80030e2:	e7f9      	b.n	80030d8 <memset+0x4>

080030e4 <__cvt>:
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ea:	461f      	mov	r7, r3
 80030ec:	bfbb      	ittet	lt
 80030ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80030f2:	461f      	movlt	r7, r3
 80030f4:	2300      	movge	r3, #0
 80030f6:	232d      	movlt	r3, #45	; 0x2d
 80030f8:	b088      	sub	sp, #32
 80030fa:	4614      	mov	r4, r2
 80030fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003100:	7013      	strb	r3, [r2, #0]
 8003102:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003104:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003108:	f023 0820 	bic.w	r8, r3, #32
 800310c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003110:	d005      	beq.n	800311e <__cvt+0x3a>
 8003112:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003116:	d100      	bne.n	800311a <__cvt+0x36>
 8003118:	3501      	adds	r5, #1
 800311a:	2302      	movs	r3, #2
 800311c:	e000      	b.n	8003120 <__cvt+0x3c>
 800311e:	2303      	movs	r3, #3
 8003120:	aa07      	add	r2, sp, #28
 8003122:	9204      	str	r2, [sp, #16]
 8003124:	aa06      	add	r2, sp, #24
 8003126:	e9cd a202 	strd	sl, r2, [sp, #8]
 800312a:	e9cd 3500 	strd	r3, r5, [sp]
 800312e:	4622      	mov	r2, r4
 8003130:	463b      	mov	r3, r7
 8003132:	f001 fd85 	bl	8004c40 <_dtoa_r>
 8003136:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800313a:	4606      	mov	r6, r0
 800313c:	d102      	bne.n	8003144 <__cvt+0x60>
 800313e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003140:	07db      	lsls	r3, r3, #31
 8003142:	d522      	bpl.n	800318a <__cvt+0xa6>
 8003144:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003148:	eb06 0905 	add.w	r9, r6, r5
 800314c:	d110      	bne.n	8003170 <__cvt+0x8c>
 800314e:	7833      	ldrb	r3, [r6, #0]
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d10a      	bne.n	800316a <__cvt+0x86>
 8003154:	2200      	movs	r2, #0
 8003156:	2300      	movs	r3, #0
 8003158:	4620      	mov	r0, r4
 800315a:	4639      	mov	r1, r7
 800315c:	f7fd fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8003160:	b918      	cbnz	r0, 800316a <__cvt+0x86>
 8003162:	f1c5 0501 	rsb	r5, r5, #1
 8003166:	f8ca 5000 	str.w	r5, [sl]
 800316a:	f8da 3000 	ldr.w	r3, [sl]
 800316e:	4499      	add	r9, r3
 8003170:	2200      	movs	r2, #0
 8003172:	2300      	movs	r3, #0
 8003174:	4620      	mov	r0, r4
 8003176:	4639      	mov	r1, r7
 8003178:	f7fd fc16 	bl	80009a8 <__aeabi_dcmpeq>
 800317c:	b108      	cbz	r0, 8003182 <__cvt+0x9e>
 800317e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003182:	2230      	movs	r2, #48	; 0x30
 8003184:	9b07      	ldr	r3, [sp, #28]
 8003186:	454b      	cmp	r3, r9
 8003188:	d307      	bcc.n	800319a <__cvt+0xb6>
 800318a:	4630      	mov	r0, r6
 800318c:	9b07      	ldr	r3, [sp, #28]
 800318e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003190:	1b9b      	subs	r3, r3, r6
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	b008      	add	sp, #32
 8003196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	9107      	str	r1, [sp, #28]
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e7f0      	b.n	8003184 <__cvt+0xa0>

080031a2 <__exponent>:
 80031a2:	4603      	mov	r3, r0
 80031a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031a6:	2900      	cmp	r1, #0
 80031a8:	f803 2b02 	strb.w	r2, [r3], #2
 80031ac:	bfb6      	itet	lt
 80031ae:	222d      	movlt	r2, #45	; 0x2d
 80031b0:	222b      	movge	r2, #43	; 0x2b
 80031b2:	4249      	neglt	r1, r1
 80031b4:	2909      	cmp	r1, #9
 80031b6:	7042      	strb	r2, [r0, #1]
 80031b8:	dd2b      	ble.n	8003212 <__exponent+0x70>
 80031ba:	f10d 0407 	add.w	r4, sp, #7
 80031be:	46a4      	mov	ip, r4
 80031c0:	270a      	movs	r7, #10
 80031c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80031c6:	460a      	mov	r2, r1
 80031c8:	46a6      	mov	lr, r4
 80031ca:	fb07 1516 	mls	r5, r7, r6, r1
 80031ce:	2a63      	cmp	r2, #99	; 0x63
 80031d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80031d4:	4631      	mov	r1, r6
 80031d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80031da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80031de:	dcf0      	bgt.n	80031c2 <__exponent+0x20>
 80031e0:	3130      	adds	r1, #48	; 0x30
 80031e2:	f1ae 0502 	sub.w	r5, lr, #2
 80031e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80031ea:	4629      	mov	r1, r5
 80031ec:	1c44      	adds	r4, r0, #1
 80031ee:	4561      	cmp	r1, ip
 80031f0:	d30a      	bcc.n	8003208 <__exponent+0x66>
 80031f2:	f10d 0209 	add.w	r2, sp, #9
 80031f6:	eba2 020e 	sub.w	r2, r2, lr
 80031fa:	4565      	cmp	r5, ip
 80031fc:	bf88      	it	hi
 80031fe:	2200      	movhi	r2, #0
 8003200:	4413      	add	r3, r2
 8003202:	1a18      	subs	r0, r3, r0
 8003204:	b003      	add	sp, #12
 8003206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003208:	f811 2b01 	ldrb.w	r2, [r1], #1
 800320c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003210:	e7ed      	b.n	80031ee <__exponent+0x4c>
 8003212:	2330      	movs	r3, #48	; 0x30
 8003214:	3130      	adds	r1, #48	; 0x30
 8003216:	7083      	strb	r3, [r0, #2]
 8003218:	70c1      	strb	r1, [r0, #3]
 800321a:	1d03      	adds	r3, r0, #4
 800321c:	e7f1      	b.n	8003202 <__exponent+0x60>
	...

08003220 <_printf_float>:
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	b091      	sub	sp, #68	; 0x44
 8003226:	460c      	mov	r4, r1
 8003228:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800322c:	4616      	mov	r6, r2
 800322e:	461f      	mov	r7, r3
 8003230:	4605      	mov	r5, r0
 8003232:	f002 fe59 	bl	8005ee8 <_localeconv_r>
 8003236:	6803      	ldr	r3, [r0, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	9309      	str	r3, [sp, #36]	; 0x24
 800323c:	f7fc ff88 	bl	8000150 <strlen>
 8003240:	2300      	movs	r3, #0
 8003242:	930e      	str	r3, [sp, #56]	; 0x38
 8003244:	f8d8 3000 	ldr.w	r3, [r8]
 8003248:	900a      	str	r0, [sp, #40]	; 0x28
 800324a:	3307      	adds	r3, #7
 800324c:	f023 0307 	bic.w	r3, r3, #7
 8003250:	f103 0208 	add.w	r2, r3, #8
 8003254:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003258:	f8d4 b000 	ldr.w	fp, [r4]
 800325c:	f8c8 2000 	str.w	r2, [r8]
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003268:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800326c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003270:	930b      	str	r3, [sp, #44]	; 0x2c
 8003272:	f04f 32ff 	mov.w	r2, #4294967295
 8003276:	4640      	mov	r0, r8
 8003278:	4b9c      	ldr	r3, [pc, #624]	; (80034ec <_printf_float+0x2cc>)
 800327a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800327c:	f7fd fbc6 	bl	8000a0c <__aeabi_dcmpun>
 8003280:	bb70      	cbnz	r0, 80032e0 <_printf_float+0xc0>
 8003282:	f04f 32ff 	mov.w	r2, #4294967295
 8003286:	4640      	mov	r0, r8
 8003288:	4b98      	ldr	r3, [pc, #608]	; (80034ec <_printf_float+0x2cc>)
 800328a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800328c:	f7fd fba0 	bl	80009d0 <__aeabi_dcmple>
 8003290:	bb30      	cbnz	r0, 80032e0 <_printf_float+0xc0>
 8003292:	2200      	movs	r2, #0
 8003294:	2300      	movs	r3, #0
 8003296:	4640      	mov	r0, r8
 8003298:	4651      	mov	r1, sl
 800329a:	f7fd fb8f 	bl	80009bc <__aeabi_dcmplt>
 800329e:	b110      	cbz	r0, 80032a6 <_printf_float+0x86>
 80032a0:	232d      	movs	r3, #45	; 0x2d
 80032a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032a6:	4b92      	ldr	r3, [pc, #584]	; (80034f0 <_printf_float+0x2d0>)
 80032a8:	4892      	ldr	r0, [pc, #584]	; (80034f4 <_printf_float+0x2d4>)
 80032aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80032ae:	bf94      	ite	ls
 80032b0:	4698      	movls	r8, r3
 80032b2:	4680      	movhi	r8, r0
 80032b4:	2303      	movs	r3, #3
 80032b6:	f04f 0a00 	mov.w	sl, #0
 80032ba:	6123      	str	r3, [r4, #16]
 80032bc:	f02b 0304 	bic.w	r3, fp, #4
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	4633      	mov	r3, r6
 80032c4:	4621      	mov	r1, r4
 80032c6:	4628      	mov	r0, r5
 80032c8:	9700      	str	r7, [sp, #0]
 80032ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80032cc:	f000 f9d4 	bl	8003678 <_printf_common>
 80032d0:	3001      	adds	r0, #1
 80032d2:	f040 8090 	bne.w	80033f6 <_printf_float+0x1d6>
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	b011      	add	sp, #68	; 0x44
 80032dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e0:	4642      	mov	r2, r8
 80032e2:	4653      	mov	r3, sl
 80032e4:	4640      	mov	r0, r8
 80032e6:	4651      	mov	r1, sl
 80032e8:	f7fd fb90 	bl	8000a0c <__aeabi_dcmpun>
 80032ec:	b148      	cbz	r0, 8003302 <_printf_float+0xe2>
 80032ee:	f1ba 0f00 	cmp.w	sl, #0
 80032f2:	bfb8      	it	lt
 80032f4:	232d      	movlt	r3, #45	; 0x2d
 80032f6:	4880      	ldr	r0, [pc, #512]	; (80034f8 <_printf_float+0x2d8>)
 80032f8:	bfb8      	it	lt
 80032fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80032fe:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <_printf_float+0x2dc>)
 8003300:	e7d3      	b.n	80032aa <_printf_float+0x8a>
 8003302:	6863      	ldr	r3, [r4, #4]
 8003304:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	d142      	bne.n	8003392 <_printf_float+0x172>
 800330c:	2306      	movs	r3, #6
 800330e:	6063      	str	r3, [r4, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	9206      	str	r2, [sp, #24]
 8003314:	aa0e      	add	r2, sp, #56	; 0x38
 8003316:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800331a:	aa0d      	add	r2, sp, #52	; 0x34
 800331c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003320:	9203      	str	r2, [sp, #12]
 8003322:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003326:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800332a:	6023      	str	r3, [r4, #0]
 800332c:	6863      	ldr	r3, [r4, #4]
 800332e:	4642      	mov	r2, r8
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	4628      	mov	r0, r5
 8003334:	4653      	mov	r3, sl
 8003336:	910b      	str	r1, [sp, #44]	; 0x2c
 8003338:	f7ff fed4 	bl	80030e4 <__cvt>
 800333c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800333e:	4680      	mov	r8, r0
 8003340:	2947      	cmp	r1, #71	; 0x47
 8003342:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003344:	d108      	bne.n	8003358 <_printf_float+0x138>
 8003346:	1cc8      	adds	r0, r1, #3
 8003348:	db02      	blt.n	8003350 <_printf_float+0x130>
 800334a:	6863      	ldr	r3, [r4, #4]
 800334c:	4299      	cmp	r1, r3
 800334e:	dd40      	ble.n	80033d2 <_printf_float+0x1b2>
 8003350:	f1a9 0902 	sub.w	r9, r9, #2
 8003354:	fa5f f989 	uxtb.w	r9, r9
 8003358:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800335c:	d81f      	bhi.n	800339e <_printf_float+0x17e>
 800335e:	464a      	mov	r2, r9
 8003360:	3901      	subs	r1, #1
 8003362:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003366:	910d      	str	r1, [sp, #52]	; 0x34
 8003368:	f7ff ff1b 	bl	80031a2 <__exponent>
 800336c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800336e:	4682      	mov	sl, r0
 8003370:	1813      	adds	r3, r2, r0
 8003372:	2a01      	cmp	r2, #1
 8003374:	6123      	str	r3, [r4, #16]
 8003376:	dc02      	bgt.n	800337e <_printf_float+0x15e>
 8003378:	6822      	ldr	r2, [r4, #0]
 800337a:	07d2      	lsls	r2, r2, #31
 800337c:	d501      	bpl.n	8003382 <_printf_float+0x162>
 800337e:	3301      	adds	r3, #1
 8003380:	6123      	str	r3, [r4, #16]
 8003382:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003386:	2b00      	cmp	r3, #0
 8003388:	d09b      	beq.n	80032c2 <_printf_float+0xa2>
 800338a:	232d      	movs	r3, #45	; 0x2d
 800338c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003390:	e797      	b.n	80032c2 <_printf_float+0xa2>
 8003392:	2947      	cmp	r1, #71	; 0x47
 8003394:	d1bc      	bne.n	8003310 <_printf_float+0xf0>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ba      	bne.n	8003310 <_printf_float+0xf0>
 800339a:	2301      	movs	r3, #1
 800339c:	e7b7      	b.n	800330e <_printf_float+0xee>
 800339e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80033a2:	d118      	bne.n	80033d6 <_printf_float+0x1b6>
 80033a4:	2900      	cmp	r1, #0
 80033a6:	6863      	ldr	r3, [r4, #4]
 80033a8:	dd0b      	ble.n	80033c2 <_printf_float+0x1a2>
 80033aa:	6121      	str	r1, [r4, #16]
 80033ac:	b913      	cbnz	r3, 80033b4 <_printf_float+0x194>
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	07d0      	lsls	r0, r2, #31
 80033b2:	d502      	bpl.n	80033ba <_printf_float+0x19a>
 80033b4:	3301      	adds	r3, #1
 80033b6:	440b      	add	r3, r1
 80033b8:	6123      	str	r3, [r4, #16]
 80033ba:	f04f 0a00 	mov.w	sl, #0
 80033be:	65a1      	str	r1, [r4, #88]	; 0x58
 80033c0:	e7df      	b.n	8003382 <_printf_float+0x162>
 80033c2:	b913      	cbnz	r3, 80033ca <_printf_float+0x1aa>
 80033c4:	6822      	ldr	r2, [r4, #0]
 80033c6:	07d2      	lsls	r2, r2, #31
 80033c8:	d501      	bpl.n	80033ce <_printf_float+0x1ae>
 80033ca:	3302      	adds	r3, #2
 80033cc:	e7f4      	b.n	80033b8 <_printf_float+0x198>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e7f2      	b.n	80033b8 <_printf_float+0x198>
 80033d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80033d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033d8:	4299      	cmp	r1, r3
 80033da:	db05      	blt.n	80033e8 <_printf_float+0x1c8>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	6121      	str	r1, [r4, #16]
 80033e0:	07d8      	lsls	r0, r3, #31
 80033e2:	d5ea      	bpl.n	80033ba <_printf_float+0x19a>
 80033e4:	1c4b      	adds	r3, r1, #1
 80033e6:	e7e7      	b.n	80033b8 <_printf_float+0x198>
 80033e8:	2900      	cmp	r1, #0
 80033ea:	bfcc      	ite	gt
 80033ec:	2201      	movgt	r2, #1
 80033ee:	f1c1 0202 	rsble	r2, r1, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	e7e0      	b.n	80033b8 <_printf_float+0x198>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	055a      	lsls	r2, r3, #21
 80033fa:	d407      	bmi.n	800340c <_printf_float+0x1ec>
 80033fc:	6923      	ldr	r3, [r4, #16]
 80033fe:	4642      	mov	r2, r8
 8003400:	4631      	mov	r1, r6
 8003402:	4628      	mov	r0, r5
 8003404:	47b8      	blx	r7
 8003406:	3001      	adds	r0, #1
 8003408:	d12b      	bne.n	8003462 <_printf_float+0x242>
 800340a:	e764      	b.n	80032d6 <_printf_float+0xb6>
 800340c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003410:	f240 80dd 	bls.w	80035ce <_printf_float+0x3ae>
 8003414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003418:	2200      	movs	r2, #0
 800341a:	2300      	movs	r3, #0
 800341c:	f7fd fac4 	bl	80009a8 <__aeabi_dcmpeq>
 8003420:	2800      	cmp	r0, #0
 8003422:	d033      	beq.n	800348c <_printf_float+0x26c>
 8003424:	2301      	movs	r3, #1
 8003426:	4631      	mov	r1, r6
 8003428:	4628      	mov	r0, r5
 800342a:	4a35      	ldr	r2, [pc, #212]	; (8003500 <_printf_float+0x2e0>)
 800342c:	47b8      	blx	r7
 800342e:	3001      	adds	r0, #1
 8003430:	f43f af51 	beq.w	80032d6 <_printf_float+0xb6>
 8003434:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003438:	429a      	cmp	r2, r3
 800343a:	db02      	blt.n	8003442 <_printf_float+0x222>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	07d8      	lsls	r0, r3, #31
 8003440:	d50f      	bpl.n	8003462 <_printf_float+0x242>
 8003442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003446:	4631      	mov	r1, r6
 8003448:	4628      	mov	r0, r5
 800344a:	47b8      	blx	r7
 800344c:	3001      	adds	r0, #1
 800344e:	f43f af42 	beq.w	80032d6 <_printf_float+0xb6>
 8003452:	f04f 0800 	mov.w	r8, #0
 8003456:	f104 091a 	add.w	r9, r4, #26
 800345a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800345c:	3b01      	subs	r3, #1
 800345e:	4543      	cmp	r3, r8
 8003460:	dc09      	bgt.n	8003476 <_printf_float+0x256>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	079b      	lsls	r3, r3, #30
 8003466:	f100 8102 	bmi.w	800366e <_printf_float+0x44e>
 800346a:	68e0      	ldr	r0, [r4, #12]
 800346c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800346e:	4298      	cmp	r0, r3
 8003470:	bfb8      	it	lt
 8003472:	4618      	movlt	r0, r3
 8003474:	e731      	b.n	80032da <_printf_float+0xba>
 8003476:	2301      	movs	r3, #1
 8003478:	464a      	mov	r2, r9
 800347a:	4631      	mov	r1, r6
 800347c:	4628      	mov	r0, r5
 800347e:	47b8      	blx	r7
 8003480:	3001      	adds	r0, #1
 8003482:	f43f af28 	beq.w	80032d6 <_printf_float+0xb6>
 8003486:	f108 0801 	add.w	r8, r8, #1
 800348a:	e7e6      	b.n	800345a <_printf_float+0x23a>
 800348c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800348e:	2b00      	cmp	r3, #0
 8003490:	dc38      	bgt.n	8003504 <_printf_float+0x2e4>
 8003492:	2301      	movs	r3, #1
 8003494:	4631      	mov	r1, r6
 8003496:	4628      	mov	r0, r5
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <_printf_float+0x2e0>)
 800349a:	47b8      	blx	r7
 800349c:	3001      	adds	r0, #1
 800349e:	f43f af1a 	beq.w	80032d6 <_printf_float+0xb6>
 80034a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034a6:	4313      	orrs	r3, r2
 80034a8:	d102      	bne.n	80034b0 <_printf_float+0x290>
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	07d9      	lsls	r1, r3, #31
 80034ae:	d5d8      	bpl.n	8003462 <_printf_float+0x242>
 80034b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034b4:	4631      	mov	r1, r6
 80034b6:	4628      	mov	r0, r5
 80034b8:	47b8      	blx	r7
 80034ba:	3001      	adds	r0, #1
 80034bc:	f43f af0b 	beq.w	80032d6 <_printf_float+0xb6>
 80034c0:	f04f 0900 	mov.w	r9, #0
 80034c4:	f104 0a1a 	add.w	sl, r4, #26
 80034c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034ca:	425b      	negs	r3, r3
 80034cc:	454b      	cmp	r3, r9
 80034ce:	dc01      	bgt.n	80034d4 <_printf_float+0x2b4>
 80034d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034d2:	e794      	b.n	80033fe <_printf_float+0x1de>
 80034d4:	2301      	movs	r3, #1
 80034d6:	4652      	mov	r2, sl
 80034d8:	4631      	mov	r1, r6
 80034da:	4628      	mov	r0, r5
 80034dc:	47b8      	blx	r7
 80034de:	3001      	adds	r0, #1
 80034e0:	f43f aef9 	beq.w	80032d6 <_printf_float+0xb6>
 80034e4:	f109 0901 	add.w	r9, r9, #1
 80034e8:	e7ee      	b.n	80034c8 <_printf_float+0x2a8>
 80034ea:	bf00      	nop
 80034ec:	7fefffff 	.word	0x7fefffff
 80034f0:	08007984 	.word	0x08007984
 80034f4:	08007988 	.word	0x08007988
 80034f8:	08007990 	.word	0x08007990
 80034fc:	0800798c 	.word	0x0800798c
 8003500:	08007994 	.word	0x08007994
 8003504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003508:	429a      	cmp	r2, r3
 800350a:	bfa8      	it	ge
 800350c:	461a      	movge	r2, r3
 800350e:	2a00      	cmp	r2, #0
 8003510:	4691      	mov	r9, r2
 8003512:	dc37      	bgt.n	8003584 <_printf_float+0x364>
 8003514:	f04f 0b00 	mov.w	fp, #0
 8003518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800351c:	f104 021a 	add.w	r2, r4, #26
 8003520:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003524:	ebaa 0309 	sub.w	r3, sl, r9
 8003528:	455b      	cmp	r3, fp
 800352a:	dc33      	bgt.n	8003594 <_printf_float+0x374>
 800352c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003530:	429a      	cmp	r2, r3
 8003532:	db3b      	blt.n	80035ac <_printf_float+0x38c>
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	07da      	lsls	r2, r3, #31
 8003538:	d438      	bmi.n	80035ac <_printf_float+0x38c>
 800353a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800353c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800353e:	eba3 020a 	sub.w	r2, r3, sl
 8003542:	eba3 0901 	sub.w	r9, r3, r1
 8003546:	4591      	cmp	r9, r2
 8003548:	bfa8      	it	ge
 800354a:	4691      	movge	r9, r2
 800354c:	f1b9 0f00 	cmp.w	r9, #0
 8003550:	dc34      	bgt.n	80035bc <_printf_float+0x39c>
 8003552:	f04f 0800 	mov.w	r8, #0
 8003556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800355a:	f104 0a1a 	add.w	sl, r4, #26
 800355e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	eba3 0309 	sub.w	r3, r3, r9
 8003568:	4543      	cmp	r3, r8
 800356a:	f77f af7a 	ble.w	8003462 <_printf_float+0x242>
 800356e:	2301      	movs	r3, #1
 8003570:	4652      	mov	r2, sl
 8003572:	4631      	mov	r1, r6
 8003574:	4628      	mov	r0, r5
 8003576:	47b8      	blx	r7
 8003578:	3001      	adds	r0, #1
 800357a:	f43f aeac 	beq.w	80032d6 <_printf_float+0xb6>
 800357e:	f108 0801 	add.w	r8, r8, #1
 8003582:	e7ec      	b.n	800355e <_printf_float+0x33e>
 8003584:	4613      	mov	r3, r2
 8003586:	4631      	mov	r1, r6
 8003588:	4642      	mov	r2, r8
 800358a:	4628      	mov	r0, r5
 800358c:	47b8      	blx	r7
 800358e:	3001      	adds	r0, #1
 8003590:	d1c0      	bne.n	8003514 <_printf_float+0x2f4>
 8003592:	e6a0      	b.n	80032d6 <_printf_float+0xb6>
 8003594:	2301      	movs	r3, #1
 8003596:	4631      	mov	r1, r6
 8003598:	4628      	mov	r0, r5
 800359a:	920b      	str	r2, [sp, #44]	; 0x2c
 800359c:	47b8      	blx	r7
 800359e:	3001      	adds	r0, #1
 80035a0:	f43f ae99 	beq.w	80032d6 <_printf_float+0xb6>
 80035a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80035a6:	f10b 0b01 	add.w	fp, fp, #1
 80035aa:	e7b9      	b.n	8003520 <_printf_float+0x300>
 80035ac:	4631      	mov	r1, r6
 80035ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035b2:	4628      	mov	r0, r5
 80035b4:	47b8      	blx	r7
 80035b6:	3001      	adds	r0, #1
 80035b8:	d1bf      	bne.n	800353a <_printf_float+0x31a>
 80035ba:	e68c      	b.n	80032d6 <_printf_float+0xb6>
 80035bc:	464b      	mov	r3, r9
 80035be:	4631      	mov	r1, r6
 80035c0:	4628      	mov	r0, r5
 80035c2:	eb08 020a 	add.w	r2, r8, sl
 80035c6:	47b8      	blx	r7
 80035c8:	3001      	adds	r0, #1
 80035ca:	d1c2      	bne.n	8003552 <_printf_float+0x332>
 80035cc:	e683      	b.n	80032d6 <_printf_float+0xb6>
 80035ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035d0:	2a01      	cmp	r2, #1
 80035d2:	dc01      	bgt.n	80035d8 <_printf_float+0x3b8>
 80035d4:	07db      	lsls	r3, r3, #31
 80035d6:	d537      	bpl.n	8003648 <_printf_float+0x428>
 80035d8:	2301      	movs	r3, #1
 80035da:	4642      	mov	r2, r8
 80035dc:	4631      	mov	r1, r6
 80035de:	4628      	mov	r0, r5
 80035e0:	47b8      	blx	r7
 80035e2:	3001      	adds	r0, #1
 80035e4:	f43f ae77 	beq.w	80032d6 <_printf_float+0xb6>
 80035e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035ec:	4631      	mov	r1, r6
 80035ee:	4628      	mov	r0, r5
 80035f0:	47b8      	blx	r7
 80035f2:	3001      	adds	r0, #1
 80035f4:	f43f ae6f 	beq.w	80032d6 <_printf_float+0xb6>
 80035f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035fc:	2200      	movs	r2, #0
 80035fe:	2300      	movs	r3, #0
 8003600:	f7fd f9d2 	bl	80009a8 <__aeabi_dcmpeq>
 8003604:	b9d8      	cbnz	r0, 800363e <_printf_float+0x41e>
 8003606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003608:	f108 0201 	add.w	r2, r8, #1
 800360c:	3b01      	subs	r3, #1
 800360e:	4631      	mov	r1, r6
 8003610:	4628      	mov	r0, r5
 8003612:	47b8      	blx	r7
 8003614:	3001      	adds	r0, #1
 8003616:	d10e      	bne.n	8003636 <_printf_float+0x416>
 8003618:	e65d      	b.n	80032d6 <_printf_float+0xb6>
 800361a:	2301      	movs	r3, #1
 800361c:	464a      	mov	r2, r9
 800361e:	4631      	mov	r1, r6
 8003620:	4628      	mov	r0, r5
 8003622:	47b8      	blx	r7
 8003624:	3001      	adds	r0, #1
 8003626:	f43f ae56 	beq.w	80032d6 <_printf_float+0xb6>
 800362a:	f108 0801 	add.w	r8, r8, #1
 800362e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003630:	3b01      	subs	r3, #1
 8003632:	4543      	cmp	r3, r8
 8003634:	dcf1      	bgt.n	800361a <_printf_float+0x3fa>
 8003636:	4653      	mov	r3, sl
 8003638:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800363c:	e6e0      	b.n	8003400 <_printf_float+0x1e0>
 800363e:	f04f 0800 	mov.w	r8, #0
 8003642:	f104 091a 	add.w	r9, r4, #26
 8003646:	e7f2      	b.n	800362e <_printf_float+0x40e>
 8003648:	2301      	movs	r3, #1
 800364a:	4642      	mov	r2, r8
 800364c:	e7df      	b.n	800360e <_printf_float+0x3ee>
 800364e:	2301      	movs	r3, #1
 8003650:	464a      	mov	r2, r9
 8003652:	4631      	mov	r1, r6
 8003654:	4628      	mov	r0, r5
 8003656:	47b8      	blx	r7
 8003658:	3001      	adds	r0, #1
 800365a:	f43f ae3c 	beq.w	80032d6 <_printf_float+0xb6>
 800365e:	f108 0801 	add.w	r8, r8, #1
 8003662:	68e3      	ldr	r3, [r4, #12]
 8003664:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003666:	1a5b      	subs	r3, r3, r1
 8003668:	4543      	cmp	r3, r8
 800366a:	dcf0      	bgt.n	800364e <_printf_float+0x42e>
 800366c:	e6fd      	b.n	800346a <_printf_float+0x24a>
 800366e:	f04f 0800 	mov.w	r8, #0
 8003672:	f104 0919 	add.w	r9, r4, #25
 8003676:	e7f4      	b.n	8003662 <_printf_float+0x442>

08003678 <_printf_common>:
 8003678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800367c:	4616      	mov	r6, r2
 800367e:	4699      	mov	r9, r3
 8003680:	688a      	ldr	r2, [r1, #8]
 8003682:	690b      	ldr	r3, [r1, #16]
 8003684:	4607      	mov	r7, r0
 8003686:	4293      	cmp	r3, r2
 8003688:	bfb8      	it	lt
 800368a:	4613      	movlt	r3, r2
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003692:	460c      	mov	r4, r1
 8003694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003698:	b10a      	cbz	r2, 800369e <_printf_common+0x26>
 800369a:	3301      	adds	r3, #1
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	0699      	lsls	r1, r3, #26
 80036a2:	bf42      	ittt	mi
 80036a4:	6833      	ldrmi	r3, [r6, #0]
 80036a6:	3302      	addmi	r3, #2
 80036a8:	6033      	strmi	r3, [r6, #0]
 80036aa:	6825      	ldr	r5, [r4, #0]
 80036ac:	f015 0506 	ands.w	r5, r5, #6
 80036b0:	d106      	bne.n	80036c0 <_printf_common+0x48>
 80036b2:	f104 0a19 	add.w	sl, r4, #25
 80036b6:	68e3      	ldr	r3, [r4, #12]
 80036b8:	6832      	ldr	r2, [r6, #0]
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	42ab      	cmp	r3, r5
 80036be:	dc28      	bgt.n	8003712 <_printf_common+0x9a>
 80036c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036c4:	1e13      	subs	r3, r2, #0
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	bf18      	it	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	0692      	lsls	r2, r2, #26
 80036ce:	d42d      	bmi.n	800372c <_printf_common+0xb4>
 80036d0:	4649      	mov	r1, r9
 80036d2:	4638      	mov	r0, r7
 80036d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036d8:	47c0      	blx	r8
 80036da:	3001      	adds	r0, #1
 80036dc:	d020      	beq.n	8003720 <_printf_common+0xa8>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	68e5      	ldr	r5, [r4, #12]
 80036e2:	f003 0306 	and.w	r3, r3, #6
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf18      	it	ne
 80036ea:	2500      	movne	r5, #0
 80036ec:	6832      	ldr	r2, [r6, #0]
 80036ee:	f04f 0600 	mov.w	r6, #0
 80036f2:	68a3      	ldr	r3, [r4, #8]
 80036f4:	bf08      	it	eq
 80036f6:	1aad      	subeq	r5, r5, r2
 80036f8:	6922      	ldr	r2, [r4, #16]
 80036fa:	bf08      	it	eq
 80036fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003700:	4293      	cmp	r3, r2
 8003702:	bfc4      	itt	gt
 8003704:	1a9b      	subgt	r3, r3, r2
 8003706:	18ed      	addgt	r5, r5, r3
 8003708:	341a      	adds	r4, #26
 800370a:	42b5      	cmp	r5, r6
 800370c:	d11a      	bne.n	8003744 <_printf_common+0xcc>
 800370e:	2000      	movs	r0, #0
 8003710:	e008      	b.n	8003724 <_printf_common+0xac>
 8003712:	2301      	movs	r3, #1
 8003714:	4652      	mov	r2, sl
 8003716:	4649      	mov	r1, r9
 8003718:	4638      	mov	r0, r7
 800371a:	47c0      	blx	r8
 800371c:	3001      	adds	r0, #1
 800371e:	d103      	bne.n	8003728 <_printf_common+0xb0>
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003728:	3501      	adds	r5, #1
 800372a:	e7c4      	b.n	80036b6 <_printf_common+0x3e>
 800372c:	2030      	movs	r0, #48	; 0x30
 800372e:	18e1      	adds	r1, r4, r3
 8003730:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800373a:	4422      	add	r2, r4
 800373c:	3302      	adds	r3, #2
 800373e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003742:	e7c5      	b.n	80036d0 <_printf_common+0x58>
 8003744:	2301      	movs	r3, #1
 8003746:	4622      	mov	r2, r4
 8003748:	4649      	mov	r1, r9
 800374a:	4638      	mov	r0, r7
 800374c:	47c0      	blx	r8
 800374e:	3001      	adds	r0, #1
 8003750:	d0e6      	beq.n	8003720 <_printf_common+0xa8>
 8003752:	3601      	adds	r6, #1
 8003754:	e7d9      	b.n	800370a <_printf_common+0x92>
	...

08003758 <_printf_i>:
 8003758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800375c:	7e0f      	ldrb	r7, [r1, #24]
 800375e:	4691      	mov	r9, r2
 8003760:	2f78      	cmp	r7, #120	; 0x78
 8003762:	4680      	mov	r8, r0
 8003764:	460c      	mov	r4, r1
 8003766:	469a      	mov	sl, r3
 8003768:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800376a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800376e:	d807      	bhi.n	8003780 <_printf_i+0x28>
 8003770:	2f62      	cmp	r7, #98	; 0x62
 8003772:	d80a      	bhi.n	800378a <_printf_i+0x32>
 8003774:	2f00      	cmp	r7, #0
 8003776:	f000 80d9 	beq.w	800392c <_printf_i+0x1d4>
 800377a:	2f58      	cmp	r7, #88	; 0x58
 800377c:	f000 80a4 	beq.w	80038c8 <_printf_i+0x170>
 8003780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003788:	e03a      	b.n	8003800 <_printf_i+0xa8>
 800378a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800378e:	2b15      	cmp	r3, #21
 8003790:	d8f6      	bhi.n	8003780 <_printf_i+0x28>
 8003792:	a101      	add	r1, pc, #4	; (adr r1, 8003798 <_printf_i+0x40>)
 8003794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003798:	080037f1 	.word	0x080037f1
 800379c:	08003805 	.word	0x08003805
 80037a0:	08003781 	.word	0x08003781
 80037a4:	08003781 	.word	0x08003781
 80037a8:	08003781 	.word	0x08003781
 80037ac:	08003781 	.word	0x08003781
 80037b0:	08003805 	.word	0x08003805
 80037b4:	08003781 	.word	0x08003781
 80037b8:	08003781 	.word	0x08003781
 80037bc:	08003781 	.word	0x08003781
 80037c0:	08003781 	.word	0x08003781
 80037c4:	08003913 	.word	0x08003913
 80037c8:	08003835 	.word	0x08003835
 80037cc:	080038f5 	.word	0x080038f5
 80037d0:	08003781 	.word	0x08003781
 80037d4:	08003781 	.word	0x08003781
 80037d8:	08003935 	.word	0x08003935
 80037dc:	08003781 	.word	0x08003781
 80037e0:	08003835 	.word	0x08003835
 80037e4:	08003781 	.word	0x08003781
 80037e8:	08003781 	.word	0x08003781
 80037ec:	080038fd 	.word	0x080038fd
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	1d1a      	adds	r2, r3, #4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	602a      	str	r2, [r5, #0]
 80037f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003800:	2301      	movs	r3, #1
 8003802:	e0a4      	b.n	800394e <_printf_i+0x1f6>
 8003804:	6820      	ldr	r0, [r4, #0]
 8003806:	6829      	ldr	r1, [r5, #0]
 8003808:	0606      	lsls	r6, r0, #24
 800380a:	f101 0304 	add.w	r3, r1, #4
 800380e:	d50a      	bpl.n	8003826 <_printf_i+0xce>
 8003810:	680e      	ldr	r6, [r1, #0]
 8003812:	602b      	str	r3, [r5, #0]
 8003814:	2e00      	cmp	r6, #0
 8003816:	da03      	bge.n	8003820 <_printf_i+0xc8>
 8003818:	232d      	movs	r3, #45	; 0x2d
 800381a:	4276      	negs	r6, r6
 800381c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003820:	230a      	movs	r3, #10
 8003822:	485e      	ldr	r0, [pc, #376]	; (800399c <_printf_i+0x244>)
 8003824:	e019      	b.n	800385a <_printf_i+0x102>
 8003826:	680e      	ldr	r6, [r1, #0]
 8003828:	f010 0f40 	tst.w	r0, #64	; 0x40
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	bf18      	it	ne
 8003830:	b236      	sxthne	r6, r6
 8003832:	e7ef      	b.n	8003814 <_printf_i+0xbc>
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	6820      	ldr	r0, [r4, #0]
 8003838:	1d19      	adds	r1, r3, #4
 800383a:	6029      	str	r1, [r5, #0]
 800383c:	0601      	lsls	r1, r0, #24
 800383e:	d501      	bpl.n	8003844 <_printf_i+0xec>
 8003840:	681e      	ldr	r6, [r3, #0]
 8003842:	e002      	b.n	800384a <_printf_i+0xf2>
 8003844:	0646      	lsls	r6, r0, #25
 8003846:	d5fb      	bpl.n	8003840 <_printf_i+0xe8>
 8003848:	881e      	ldrh	r6, [r3, #0]
 800384a:	2f6f      	cmp	r7, #111	; 0x6f
 800384c:	bf0c      	ite	eq
 800384e:	2308      	moveq	r3, #8
 8003850:	230a      	movne	r3, #10
 8003852:	4852      	ldr	r0, [pc, #328]	; (800399c <_printf_i+0x244>)
 8003854:	2100      	movs	r1, #0
 8003856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800385a:	6865      	ldr	r5, [r4, #4]
 800385c:	2d00      	cmp	r5, #0
 800385e:	bfa8      	it	ge
 8003860:	6821      	ldrge	r1, [r4, #0]
 8003862:	60a5      	str	r5, [r4, #8]
 8003864:	bfa4      	itt	ge
 8003866:	f021 0104 	bicge.w	r1, r1, #4
 800386a:	6021      	strge	r1, [r4, #0]
 800386c:	b90e      	cbnz	r6, 8003872 <_printf_i+0x11a>
 800386e:	2d00      	cmp	r5, #0
 8003870:	d04d      	beq.n	800390e <_printf_i+0x1b6>
 8003872:	4615      	mov	r5, r2
 8003874:	fbb6 f1f3 	udiv	r1, r6, r3
 8003878:	fb03 6711 	mls	r7, r3, r1, r6
 800387c:	5dc7      	ldrb	r7, [r0, r7]
 800387e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003882:	4637      	mov	r7, r6
 8003884:	42bb      	cmp	r3, r7
 8003886:	460e      	mov	r6, r1
 8003888:	d9f4      	bls.n	8003874 <_printf_i+0x11c>
 800388a:	2b08      	cmp	r3, #8
 800388c:	d10b      	bne.n	80038a6 <_printf_i+0x14e>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	07de      	lsls	r6, r3, #31
 8003892:	d508      	bpl.n	80038a6 <_printf_i+0x14e>
 8003894:	6923      	ldr	r3, [r4, #16]
 8003896:	6861      	ldr	r1, [r4, #4]
 8003898:	4299      	cmp	r1, r3
 800389a:	bfde      	ittt	le
 800389c:	2330      	movle	r3, #48	; 0x30
 800389e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038a6:	1b52      	subs	r2, r2, r5
 80038a8:	6122      	str	r2, [r4, #16]
 80038aa:	464b      	mov	r3, r9
 80038ac:	4621      	mov	r1, r4
 80038ae:	4640      	mov	r0, r8
 80038b0:	f8cd a000 	str.w	sl, [sp]
 80038b4:	aa03      	add	r2, sp, #12
 80038b6:	f7ff fedf 	bl	8003678 <_printf_common>
 80038ba:	3001      	adds	r0, #1
 80038bc:	d14c      	bne.n	8003958 <_printf_i+0x200>
 80038be:	f04f 30ff 	mov.w	r0, #4294967295
 80038c2:	b004      	add	sp, #16
 80038c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c8:	4834      	ldr	r0, [pc, #208]	; (800399c <_printf_i+0x244>)
 80038ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038ce:	6829      	ldr	r1, [r5, #0]
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80038d6:	6029      	str	r1, [r5, #0]
 80038d8:	061d      	lsls	r5, r3, #24
 80038da:	d514      	bpl.n	8003906 <_printf_i+0x1ae>
 80038dc:	07df      	lsls	r7, r3, #31
 80038de:	bf44      	itt	mi
 80038e0:	f043 0320 	orrmi.w	r3, r3, #32
 80038e4:	6023      	strmi	r3, [r4, #0]
 80038e6:	b91e      	cbnz	r6, 80038f0 <_printf_i+0x198>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f023 0320 	bic.w	r3, r3, #32
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	2310      	movs	r3, #16
 80038f2:	e7af      	b.n	8003854 <_printf_i+0xfc>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	f043 0320 	orr.w	r3, r3, #32
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	2378      	movs	r3, #120	; 0x78
 80038fe:	4828      	ldr	r0, [pc, #160]	; (80039a0 <_printf_i+0x248>)
 8003900:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003904:	e7e3      	b.n	80038ce <_printf_i+0x176>
 8003906:	0659      	lsls	r1, r3, #25
 8003908:	bf48      	it	mi
 800390a:	b2b6      	uxthmi	r6, r6
 800390c:	e7e6      	b.n	80038dc <_printf_i+0x184>
 800390e:	4615      	mov	r5, r2
 8003910:	e7bb      	b.n	800388a <_printf_i+0x132>
 8003912:	682b      	ldr	r3, [r5, #0]
 8003914:	6826      	ldr	r6, [r4, #0]
 8003916:	1d18      	adds	r0, r3, #4
 8003918:	6961      	ldr	r1, [r4, #20]
 800391a:	6028      	str	r0, [r5, #0]
 800391c:	0635      	lsls	r5, r6, #24
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	d501      	bpl.n	8003926 <_printf_i+0x1ce>
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	e002      	b.n	800392c <_printf_i+0x1d4>
 8003926:	0670      	lsls	r0, r6, #25
 8003928:	d5fb      	bpl.n	8003922 <_printf_i+0x1ca>
 800392a:	8019      	strh	r1, [r3, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	4615      	mov	r5, r2
 8003930:	6123      	str	r3, [r4, #16]
 8003932:	e7ba      	b.n	80038aa <_printf_i+0x152>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	2100      	movs	r1, #0
 8003938:	1d1a      	adds	r2, r3, #4
 800393a:	602a      	str	r2, [r5, #0]
 800393c:	681d      	ldr	r5, [r3, #0]
 800393e:	6862      	ldr	r2, [r4, #4]
 8003940:	4628      	mov	r0, r5
 8003942:	f002 faef 	bl	8005f24 <memchr>
 8003946:	b108      	cbz	r0, 800394c <_printf_i+0x1f4>
 8003948:	1b40      	subs	r0, r0, r5
 800394a:	6060      	str	r0, [r4, #4]
 800394c:	6863      	ldr	r3, [r4, #4]
 800394e:	6123      	str	r3, [r4, #16]
 8003950:	2300      	movs	r3, #0
 8003952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003956:	e7a8      	b.n	80038aa <_printf_i+0x152>
 8003958:	462a      	mov	r2, r5
 800395a:	4649      	mov	r1, r9
 800395c:	4640      	mov	r0, r8
 800395e:	6923      	ldr	r3, [r4, #16]
 8003960:	47d0      	blx	sl
 8003962:	3001      	adds	r0, #1
 8003964:	d0ab      	beq.n	80038be <_printf_i+0x166>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	079b      	lsls	r3, r3, #30
 800396a:	d413      	bmi.n	8003994 <_printf_i+0x23c>
 800396c:	68e0      	ldr	r0, [r4, #12]
 800396e:	9b03      	ldr	r3, [sp, #12]
 8003970:	4298      	cmp	r0, r3
 8003972:	bfb8      	it	lt
 8003974:	4618      	movlt	r0, r3
 8003976:	e7a4      	b.n	80038c2 <_printf_i+0x16a>
 8003978:	2301      	movs	r3, #1
 800397a:	4632      	mov	r2, r6
 800397c:	4649      	mov	r1, r9
 800397e:	4640      	mov	r0, r8
 8003980:	47d0      	blx	sl
 8003982:	3001      	adds	r0, #1
 8003984:	d09b      	beq.n	80038be <_printf_i+0x166>
 8003986:	3501      	adds	r5, #1
 8003988:	68e3      	ldr	r3, [r4, #12]
 800398a:	9903      	ldr	r1, [sp, #12]
 800398c:	1a5b      	subs	r3, r3, r1
 800398e:	42ab      	cmp	r3, r5
 8003990:	dcf2      	bgt.n	8003978 <_printf_i+0x220>
 8003992:	e7eb      	b.n	800396c <_printf_i+0x214>
 8003994:	2500      	movs	r5, #0
 8003996:	f104 0619 	add.w	r6, r4, #25
 800399a:	e7f5      	b.n	8003988 <_printf_i+0x230>
 800399c:	08007996 	.word	0x08007996
 80039a0:	080079a7 	.word	0x080079a7

080039a4 <_scanf_float>:
 80039a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a8:	b087      	sub	sp, #28
 80039aa:	9303      	str	r3, [sp, #12]
 80039ac:	688b      	ldr	r3, [r1, #8]
 80039ae:	4617      	mov	r7, r2
 80039b0:	1e5a      	subs	r2, r3, #1
 80039b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80039b6:	bf85      	ittet	hi
 80039b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80039bc:	195b      	addhi	r3, r3, r5
 80039be:	2300      	movls	r3, #0
 80039c0:	9302      	strhi	r3, [sp, #8]
 80039c2:	bf88      	it	hi
 80039c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80039c8:	468b      	mov	fp, r1
 80039ca:	f04f 0500 	mov.w	r5, #0
 80039ce:	bf8c      	ite	hi
 80039d0:	608b      	strhi	r3, [r1, #8]
 80039d2:	9302      	strls	r3, [sp, #8]
 80039d4:	680b      	ldr	r3, [r1, #0]
 80039d6:	4680      	mov	r8, r0
 80039d8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80039dc:	f84b 3b1c 	str.w	r3, [fp], #28
 80039e0:	460c      	mov	r4, r1
 80039e2:	465e      	mov	r6, fp
 80039e4:	46aa      	mov	sl, r5
 80039e6:	46a9      	mov	r9, r5
 80039e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80039ec:	9501      	str	r5, [sp, #4]
 80039ee:	68a2      	ldr	r2, [r4, #8]
 80039f0:	b152      	cbz	r2, 8003a08 <_scanf_float+0x64>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b4e      	cmp	r3, #78	; 0x4e
 80039f8:	d864      	bhi.n	8003ac4 <_scanf_float+0x120>
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d83c      	bhi.n	8003a78 <_scanf_float+0xd4>
 80039fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003a02:	b2c8      	uxtb	r0, r1
 8003a04:	280e      	cmp	r0, #14
 8003a06:	d93a      	bls.n	8003a7e <_scanf_float+0xda>
 8003a08:	f1b9 0f00 	cmp.w	r9, #0
 8003a0c:	d003      	beq.n	8003a16 <_scanf_float+0x72>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a1a:	f1ba 0f01 	cmp.w	sl, #1
 8003a1e:	f200 8113 	bhi.w	8003c48 <_scanf_float+0x2a4>
 8003a22:	455e      	cmp	r6, fp
 8003a24:	f200 8105 	bhi.w	8003c32 <_scanf_float+0x28e>
 8003a28:	2501      	movs	r5, #1
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	b007      	add	sp, #28
 8003a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003a36:	2a0d      	cmp	r2, #13
 8003a38:	d8e6      	bhi.n	8003a08 <_scanf_float+0x64>
 8003a3a:	a101      	add	r1, pc, #4	; (adr r1, 8003a40 <_scanf_float+0x9c>)
 8003a3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a40:	08003b7f 	.word	0x08003b7f
 8003a44:	08003a09 	.word	0x08003a09
 8003a48:	08003a09 	.word	0x08003a09
 8003a4c:	08003a09 	.word	0x08003a09
 8003a50:	08003bdf 	.word	0x08003bdf
 8003a54:	08003bb7 	.word	0x08003bb7
 8003a58:	08003a09 	.word	0x08003a09
 8003a5c:	08003a09 	.word	0x08003a09
 8003a60:	08003b8d 	.word	0x08003b8d
 8003a64:	08003a09 	.word	0x08003a09
 8003a68:	08003a09 	.word	0x08003a09
 8003a6c:	08003a09 	.word	0x08003a09
 8003a70:	08003a09 	.word	0x08003a09
 8003a74:	08003b45 	.word	0x08003b45
 8003a78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003a7c:	e7db      	b.n	8003a36 <_scanf_float+0x92>
 8003a7e:	290e      	cmp	r1, #14
 8003a80:	d8c2      	bhi.n	8003a08 <_scanf_float+0x64>
 8003a82:	a001      	add	r0, pc, #4	; (adr r0, 8003a88 <_scanf_float+0xe4>)
 8003a84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003a88:	08003b37 	.word	0x08003b37
 8003a8c:	08003a09 	.word	0x08003a09
 8003a90:	08003b37 	.word	0x08003b37
 8003a94:	08003bcb 	.word	0x08003bcb
 8003a98:	08003a09 	.word	0x08003a09
 8003a9c:	08003ae5 	.word	0x08003ae5
 8003aa0:	08003b21 	.word	0x08003b21
 8003aa4:	08003b21 	.word	0x08003b21
 8003aa8:	08003b21 	.word	0x08003b21
 8003aac:	08003b21 	.word	0x08003b21
 8003ab0:	08003b21 	.word	0x08003b21
 8003ab4:	08003b21 	.word	0x08003b21
 8003ab8:	08003b21 	.word	0x08003b21
 8003abc:	08003b21 	.word	0x08003b21
 8003ac0:	08003b21 	.word	0x08003b21
 8003ac4:	2b6e      	cmp	r3, #110	; 0x6e
 8003ac6:	d809      	bhi.n	8003adc <_scanf_float+0x138>
 8003ac8:	2b60      	cmp	r3, #96	; 0x60
 8003aca:	d8b2      	bhi.n	8003a32 <_scanf_float+0x8e>
 8003acc:	2b54      	cmp	r3, #84	; 0x54
 8003ace:	d077      	beq.n	8003bc0 <_scanf_float+0x21c>
 8003ad0:	2b59      	cmp	r3, #89	; 0x59
 8003ad2:	d199      	bne.n	8003a08 <_scanf_float+0x64>
 8003ad4:	2d07      	cmp	r5, #7
 8003ad6:	d197      	bne.n	8003a08 <_scanf_float+0x64>
 8003ad8:	2508      	movs	r5, #8
 8003ada:	e029      	b.n	8003b30 <_scanf_float+0x18c>
 8003adc:	2b74      	cmp	r3, #116	; 0x74
 8003ade:	d06f      	beq.n	8003bc0 <_scanf_float+0x21c>
 8003ae0:	2b79      	cmp	r3, #121	; 0x79
 8003ae2:	e7f6      	b.n	8003ad2 <_scanf_float+0x12e>
 8003ae4:	6821      	ldr	r1, [r4, #0]
 8003ae6:	05c8      	lsls	r0, r1, #23
 8003ae8:	d51a      	bpl.n	8003b20 <_scanf_float+0x17c>
 8003aea:	9b02      	ldr	r3, [sp, #8]
 8003aec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003af0:	6021      	str	r1, [r4, #0]
 8003af2:	f109 0901 	add.w	r9, r9, #1
 8003af6:	b11b      	cbz	r3, 8003b00 <_scanf_float+0x15c>
 8003af8:	3b01      	subs	r3, #1
 8003afa:	3201      	adds	r2, #1
 8003afc:	9302      	str	r3, [sp, #8]
 8003afe:	60a2      	str	r2, [r4, #8]
 8003b00:	68a3      	ldr	r3, [r4, #8]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	60a3      	str	r3, [r4, #8]
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	6123      	str	r3, [r4, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	f340 8084 	ble.w	8003c20 <_scanf_float+0x27c>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	e766      	b.n	80039ee <_scanf_float+0x4a>
 8003b20:	eb1a 0f05 	cmn.w	sl, r5
 8003b24:	f47f af70 	bne.w	8003a08 <_scanf_float+0x64>
 8003b28:	6822      	ldr	r2, [r4, #0]
 8003b2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003b2e:	6022      	str	r2, [r4, #0]
 8003b30:	f806 3b01 	strb.w	r3, [r6], #1
 8003b34:	e7e4      	b.n	8003b00 <_scanf_float+0x15c>
 8003b36:	6822      	ldr	r2, [r4, #0]
 8003b38:	0610      	lsls	r0, r2, #24
 8003b3a:	f57f af65 	bpl.w	8003a08 <_scanf_float+0x64>
 8003b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b42:	e7f4      	b.n	8003b2e <_scanf_float+0x18a>
 8003b44:	f1ba 0f00 	cmp.w	sl, #0
 8003b48:	d10e      	bne.n	8003b68 <_scanf_float+0x1c4>
 8003b4a:	f1b9 0f00 	cmp.w	r9, #0
 8003b4e:	d10e      	bne.n	8003b6e <_scanf_float+0x1ca>
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003b56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003b5a:	d108      	bne.n	8003b6e <_scanf_float+0x1ca>
 8003b5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003b60:	f04f 0a01 	mov.w	sl, #1
 8003b64:	6022      	str	r2, [r4, #0]
 8003b66:	e7e3      	b.n	8003b30 <_scanf_float+0x18c>
 8003b68:	f1ba 0f02 	cmp.w	sl, #2
 8003b6c:	d055      	beq.n	8003c1a <_scanf_float+0x276>
 8003b6e:	2d01      	cmp	r5, #1
 8003b70:	d002      	beq.n	8003b78 <_scanf_float+0x1d4>
 8003b72:	2d04      	cmp	r5, #4
 8003b74:	f47f af48 	bne.w	8003a08 <_scanf_float+0x64>
 8003b78:	3501      	adds	r5, #1
 8003b7a:	b2ed      	uxtb	r5, r5
 8003b7c:	e7d8      	b.n	8003b30 <_scanf_float+0x18c>
 8003b7e:	f1ba 0f01 	cmp.w	sl, #1
 8003b82:	f47f af41 	bne.w	8003a08 <_scanf_float+0x64>
 8003b86:	f04f 0a02 	mov.w	sl, #2
 8003b8a:	e7d1      	b.n	8003b30 <_scanf_float+0x18c>
 8003b8c:	b97d      	cbnz	r5, 8003bae <_scanf_float+0x20a>
 8003b8e:	f1b9 0f00 	cmp.w	r9, #0
 8003b92:	f47f af3c 	bne.w	8003a0e <_scanf_float+0x6a>
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003b9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003ba0:	f47f af39 	bne.w	8003a16 <_scanf_float+0x72>
 8003ba4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003ba8:	2501      	movs	r5, #1
 8003baa:	6022      	str	r2, [r4, #0]
 8003bac:	e7c0      	b.n	8003b30 <_scanf_float+0x18c>
 8003bae:	2d03      	cmp	r5, #3
 8003bb0:	d0e2      	beq.n	8003b78 <_scanf_float+0x1d4>
 8003bb2:	2d05      	cmp	r5, #5
 8003bb4:	e7de      	b.n	8003b74 <_scanf_float+0x1d0>
 8003bb6:	2d02      	cmp	r5, #2
 8003bb8:	f47f af26 	bne.w	8003a08 <_scanf_float+0x64>
 8003bbc:	2503      	movs	r5, #3
 8003bbe:	e7b7      	b.n	8003b30 <_scanf_float+0x18c>
 8003bc0:	2d06      	cmp	r5, #6
 8003bc2:	f47f af21 	bne.w	8003a08 <_scanf_float+0x64>
 8003bc6:	2507      	movs	r5, #7
 8003bc8:	e7b2      	b.n	8003b30 <_scanf_float+0x18c>
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	0591      	lsls	r1, r2, #22
 8003bce:	f57f af1b 	bpl.w	8003a08 <_scanf_float+0x64>
 8003bd2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003bd6:	6022      	str	r2, [r4, #0]
 8003bd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bdc:	e7a8      	b.n	8003b30 <_scanf_float+0x18c>
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003be4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003be8:	d006      	beq.n	8003bf8 <_scanf_float+0x254>
 8003bea:	0550      	lsls	r0, r2, #21
 8003bec:	f57f af0c 	bpl.w	8003a08 <_scanf_float+0x64>
 8003bf0:	f1b9 0f00 	cmp.w	r9, #0
 8003bf4:	f43f af0f 	beq.w	8003a16 <_scanf_float+0x72>
 8003bf8:	0591      	lsls	r1, r2, #22
 8003bfa:	bf58      	it	pl
 8003bfc:	9901      	ldrpl	r1, [sp, #4]
 8003bfe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c02:	bf58      	it	pl
 8003c04:	eba9 0101 	subpl.w	r1, r9, r1
 8003c08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003c0c:	f04f 0900 	mov.w	r9, #0
 8003c10:	bf58      	it	pl
 8003c12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c16:	6022      	str	r2, [r4, #0]
 8003c18:	e78a      	b.n	8003b30 <_scanf_float+0x18c>
 8003c1a:	f04f 0a03 	mov.w	sl, #3
 8003c1e:	e787      	b.n	8003b30 <_scanf_float+0x18c>
 8003c20:	4639      	mov	r1, r7
 8003c22:	4640      	mov	r0, r8
 8003c24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c28:	4798      	blx	r3
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	f43f aedf 	beq.w	80039ee <_scanf_float+0x4a>
 8003c30:	e6ea      	b.n	8003a08 <_scanf_float+0x64>
 8003c32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c36:	463a      	mov	r2, r7
 8003c38:	4640      	mov	r0, r8
 8003c3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c3e:	4798      	blx	r3
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	6123      	str	r3, [r4, #16]
 8003c46:	e6ec      	b.n	8003a22 <_scanf_float+0x7e>
 8003c48:	1e6b      	subs	r3, r5, #1
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	d825      	bhi.n	8003c9a <_scanf_float+0x2f6>
 8003c4e:	2d02      	cmp	r5, #2
 8003c50:	d836      	bhi.n	8003cc0 <_scanf_float+0x31c>
 8003c52:	455e      	cmp	r6, fp
 8003c54:	f67f aee8 	bls.w	8003a28 <_scanf_float+0x84>
 8003c58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c5c:	463a      	mov	r2, r7
 8003c5e:	4640      	mov	r0, r8
 8003c60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c64:	4798      	blx	r3
 8003c66:	6923      	ldr	r3, [r4, #16]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	6123      	str	r3, [r4, #16]
 8003c6c:	e7f1      	b.n	8003c52 <_scanf_float+0x2ae>
 8003c6e:	9802      	ldr	r0, [sp, #8]
 8003c70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003c78:	463a      	mov	r2, r7
 8003c7a:	9002      	str	r0, [sp, #8]
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	4798      	blx	r3
 8003c80:	6923      	ldr	r3, [r4, #16]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	6123      	str	r3, [r4, #16]
 8003c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c8a:	fa5f fa8a 	uxtb.w	sl, sl
 8003c8e:	f1ba 0f02 	cmp.w	sl, #2
 8003c92:	d1ec      	bne.n	8003c6e <_scanf_float+0x2ca>
 8003c94:	3d03      	subs	r5, #3
 8003c96:	b2ed      	uxtb	r5, r5
 8003c98:	1b76      	subs	r6, r6, r5
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	05da      	lsls	r2, r3, #23
 8003c9e:	d52f      	bpl.n	8003d00 <_scanf_float+0x35c>
 8003ca0:	055b      	lsls	r3, r3, #21
 8003ca2:	d510      	bpl.n	8003cc6 <_scanf_float+0x322>
 8003ca4:	455e      	cmp	r6, fp
 8003ca6:	f67f aebf 	bls.w	8003a28 <_scanf_float+0x84>
 8003caa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cae:	463a      	mov	r2, r7
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003cb6:	4798      	blx	r3
 8003cb8:	6923      	ldr	r3, [r4, #16]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	6123      	str	r3, [r4, #16]
 8003cbe:	e7f1      	b.n	8003ca4 <_scanf_float+0x300>
 8003cc0:	46aa      	mov	sl, r5
 8003cc2:	9602      	str	r6, [sp, #8]
 8003cc4:	e7df      	b.n	8003c86 <_scanf_float+0x2e2>
 8003cc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	2965      	cmp	r1, #101	; 0x65
 8003cce:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cd2:	f106 35ff 	add.w	r5, r6, #4294967295
 8003cd6:	6123      	str	r3, [r4, #16]
 8003cd8:	d00c      	beq.n	8003cf4 <_scanf_float+0x350>
 8003cda:	2945      	cmp	r1, #69	; 0x45
 8003cdc:	d00a      	beq.n	8003cf4 <_scanf_float+0x350>
 8003cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ce2:	463a      	mov	r2, r7
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	4798      	blx	r3
 8003ce8:	6923      	ldr	r3, [r4, #16]
 8003cea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	1eb5      	subs	r5, r6, #2
 8003cf2:	6123      	str	r3, [r4, #16]
 8003cf4:	463a      	mov	r2, r7
 8003cf6:	4640      	mov	r0, r8
 8003cf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cfc:	4798      	blx	r3
 8003cfe:	462e      	mov	r6, r5
 8003d00:	6825      	ldr	r5, [r4, #0]
 8003d02:	f015 0510 	ands.w	r5, r5, #16
 8003d06:	d155      	bne.n	8003db4 <_scanf_float+0x410>
 8003d08:	7035      	strb	r5, [r6, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d14:	d11b      	bne.n	8003d4e <_scanf_float+0x3aa>
 8003d16:	9b01      	ldr	r3, [sp, #4]
 8003d18:	454b      	cmp	r3, r9
 8003d1a:	eba3 0209 	sub.w	r2, r3, r9
 8003d1e:	d123      	bne.n	8003d68 <_scanf_float+0x3c4>
 8003d20:	2200      	movs	r2, #0
 8003d22:	4659      	mov	r1, fp
 8003d24:	4640      	mov	r0, r8
 8003d26:	f000 fe7b 	bl	8004a20 <_strtod_r>
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	f012 0f02 	tst.w	r2, #2
 8003d32:	4606      	mov	r6, r0
 8003d34:	460f      	mov	r7, r1
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	d021      	beq.n	8003d7e <_scanf_float+0x3da>
 8003d3a:	1d1a      	adds	r2, r3, #4
 8003d3c:	9903      	ldr	r1, [sp, #12]
 8003d3e:	600a      	str	r2, [r1, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	e9c3 6700 	strd	r6, r7, [r3]
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	60e3      	str	r3, [r4, #12]
 8003d4c:	e66d      	b.n	8003a2a <_scanf_float+0x86>
 8003d4e:	9b04      	ldr	r3, [sp, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0e5      	beq.n	8003d20 <_scanf_float+0x37c>
 8003d54:	9905      	ldr	r1, [sp, #20]
 8003d56:	230a      	movs	r3, #10
 8003d58:	462a      	mov	r2, r5
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	3101      	adds	r1, #1
 8003d5e:	f000 fee1 	bl	8004b24 <_strtol_r>
 8003d62:	9b04      	ldr	r3, [sp, #16]
 8003d64:	9e05      	ldr	r6, [sp, #20]
 8003d66:	1ac2      	subs	r2, r0, r3
 8003d68:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003d6c:	429e      	cmp	r6, r3
 8003d6e:	bf28      	it	cs
 8003d70:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003d74:	4630      	mov	r0, r6
 8003d76:	4910      	ldr	r1, [pc, #64]	; (8003db8 <_scanf_float+0x414>)
 8003d78:	f000 f826 	bl	8003dc8 <siprintf>
 8003d7c:	e7d0      	b.n	8003d20 <_scanf_float+0x37c>
 8003d7e:	f012 0f04 	tst.w	r2, #4
 8003d82:	f103 0204 	add.w	r2, r3, #4
 8003d86:	d1d9      	bne.n	8003d3c <_scanf_float+0x398>
 8003d88:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003d8c:	f8cc 2000 	str.w	r2, [ip]
 8003d90:	f8d3 8000 	ldr.w	r8, [r3]
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	f7fc fe38 	bl	8000a0c <__aeabi_dcmpun>
 8003d9c:	b128      	cbz	r0, 8003daa <_scanf_float+0x406>
 8003d9e:	4807      	ldr	r0, [pc, #28]	; (8003dbc <_scanf_float+0x418>)
 8003da0:	f000 f80e 	bl	8003dc0 <nanf>
 8003da4:	f8c8 0000 	str.w	r0, [r8]
 8003da8:	e7cd      	b.n	8003d46 <_scanf_float+0x3a2>
 8003daa:	4630      	mov	r0, r6
 8003dac:	4639      	mov	r1, r7
 8003dae:	f7fc fe8b 	bl	8000ac8 <__aeabi_d2f>
 8003db2:	e7f7      	b.n	8003da4 <_scanf_float+0x400>
 8003db4:	2500      	movs	r5, #0
 8003db6:	e638      	b.n	8003a2a <_scanf_float+0x86>
 8003db8:	080079b8 	.word	0x080079b8
 8003dbc:	08007dc0 	.word	0x08007dc0

08003dc0 <nanf>:
 8003dc0:	4800      	ldr	r0, [pc, #0]	; (8003dc4 <nanf+0x4>)
 8003dc2:	4770      	bx	lr
 8003dc4:	7fc00000 	.word	0x7fc00000

08003dc8 <siprintf>:
 8003dc8:	b40e      	push	{r1, r2, r3}
 8003dca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dce:	b500      	push	{lr}
 8003dd0:	b09c      	sub	sp, #112	; 0x70
 8003dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8003dd4:	9002      	str	r0, [sp, #8]
 8003dd6:	9006      	str	r0, [sp, #24]
 8003dd8:	9107      	str	r1, [sp, #28]
 8003dda:	9104      	str	r1, [sp, #16]
 8003ddc:	4808      	ldr	r0, [pc, #32]	; (8003e00 <siprintf+0x38>)
 8003dde:	4909      	ldr	r1, [pc, #36]	; (8003e04 <siprintf+0x3c>)
 8003de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003de4:	9105      	str	r1, [sp, #20]
 8003de6:	6800      	ldr	r0, [r0, #0]
 8003de8:	a902      	add	r1, sp, #8
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	f002 feba 	bl	8006b64 <_svfiprintf_r>
 8003df0:	2200      	movs	r2, #0
 8003df2:	9b02      	ldr	r3, [sp, #8]
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	b01c      	add	sp, #112	; 0x70
 8003df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dfc:	b003      	add	sp, #12
 8003dfe:	4770      	bx	lr
 8003e00:	2000000c 	.word	0x2000000c
 8003e04:	ffff0208 	.word	0xffff0208

08003e08 <sulp>:
 8003e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0c:	460f      	mov	r7, r1
 8003e0e:	4690      	mov	r8, r2
 8003e10:	f002 fc14 	bl	800663c <__ulp>
 8003e14:	4604      	mov	r4, r0
 8003e16:	460d      	mov	r5, r1
 8003e18:	f1b8 0f00 	cmp.w	r8, #0
 8003e1c:	d011      	beq.n	8003e42 <sulp+0x3a>
 8003e1e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003e22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	dd0b      	ble.n	8003e42 <sulp+0x3a>
 8003e2a:	2400      	movs	r4, #0
 8003e2c:	051b      	lsls	r3, r3, #20
 8003e2e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003e32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003e36:	4622      	mov	r2, r4
 8003e38:	462b      	mov	r3, r5
 8003e3a:	f7fc fb4d 	bl	80004d8 <__aeabi_dmul>
 8003e3e:	4604      	mov	r4, r0
 8003e40:	460d      	mov	r5, r1
 8003e42:	4620      	mov	r0, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e4a:	0000      	movs	r0, r0
 8003e4c:	0000      	movs	r0, r0
	...

08003e50 <_strtod_l>:
 8003e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e54:	469b      	mov	fp, r3
 8003e56:	2300      	movs	r3, #0
 8003e58:	b09f      	sub	sp, #124	; 0x7c
 8003e5a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e5c:	4b9e      	ldr	r3, [pc, #632]	; (80040d8 <_strtod_l+0x288>)
 8003e5e:	4682      	mov	sl, r0
 8003e60:	681f      	ldr	r7, [r3, #0]
 8003e62:	460e      	mov	r6, r1
 8003e64:	4638      	mov	r0, r7
 8003e66:	9215      	str	r2, [sp, #84]	; 0x54
 8003e68:	f7fc f972 	bl	8000150 <strlen>
 8003e6c:	f04f 0800 	mov.w	r8, #0
 8003e70:	4604      	mov	r4, r0
 8003e72:	f04f 0900 	mov.w	r9, #0
 8003e76:	9619      	str	r6, [sp, #100]	; 0x64
 8003e78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	2a2b      	cmp	r2, #43	; 0x2b
 8003e7e:	d04c      	beq.n	8003f1a <_strtod_l+0xca>
 8003e80:	d83a      	bhi.n	8003ef8 <_strtod_l+0xa8>
 8003e82:	2a0d      	cmp	r2, #13
 8003e84:	d833      	bhi.n	8003eee <_strtod_l+0x9e>
 8003e86:	2a08      	cmp	r2, #8
 8003e88:	d833      	bhi.n	8003ef2 <_strtod_l+0xa2>
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	d03d      	beq.n	8003f0a <_strtod_l+0xba>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	930a      	str	r3, [sp, #40]	; 0x28
 8003e92:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003e94:	782b      	ldrb	r3, [r5, #0]
 8003e96:	2b30      	cmp	r3, #48	; 0x30
 8003e98:	f040 80aa 	bne.w	8003ff0 <_strtod_l+0x1a0>
 8003e9c:	786b      	ldrb	r3, [r5, #1]
 8003e9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003ea2:	2b58      	cmp	r3, #88	; 0x58
 8003ea4:	d166      	bne.n	8003f74 <_strtod_l+0x124>
 8003ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ea8:	4650      	mov	r0, sl
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	ab1a      	add	r3, sp, #104	; 0x68
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	4a8a      	ldr	r2, [pc, #552]	; (80040dc <_strtod_l+0x28c>)
 8003eb2:	f8cd b008 	str.w	fp, [sp, #8]
 8003eb6:	ab1b      	add	r3, sp, #108	; 0x6c
 8003eb8:	a919      	add	r1, sp, #100	; 0x64
 8003eba:	f001 fd17 	bl	80058ec <__gethex>
 8003ebe:	f010 0607 	ands.w	r6, r0, #7
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	d005      	beq.n	8003ed2 <_strtod_l+0x82>
 8003ec6:	2e06      	cmp	r6, #6
 8003ec8:	d129      	bne.n	8003f1e <_strtod_l+0xce>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	3501      	adds	r5, #1
 8003ece:	9519      	str	r5, [sp, #100]	; 0x64
 8003ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8003ed2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 858a 	bne.w	80049ee <_strtod_l+0xb9e>
 8003eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003edc:	b1d3      	cbz	r3, 8003f14 <_strtod_l+0xc4>
 8003ede:	4642      	mov	r2, r8
 8003ee0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	b01f      	add	sp, #124	; 0x7c
 8003eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eee:	2a20      	cmp	r2, #32
 8003ef0:	d1cd      	bne.n	8003e8e <_strtod_l+0x3e>
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	9319      	str	r3, [sp, #100]	; 0x64
 8003ef6:	e7bf      	b.n	8003e78 <_strtod_l+0x28>
 8003ef8:	2a2d      	cmp	r2, #45	; 0x2d
 8003efa:	d1c8      	bne.n	8003e8e <_strtod_l+0x3e>
 8003efc:	2201      	movs	r2, #1
 8003efe:	920a      	str	r2, [sp, #40]	; 0x28
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	9219      	str	r2, [sp, #100]	; 0x64
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1c3      	bne.n	8003e92 <_strtod_l+0x42>
 8003f0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f0c:	9619      	str	r6, [sp, #100]	; 0x64
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 856b 	bne.w	80049ea <_strtod_l+0xb9a>
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	e7e4      	b.n	8003ee4 <_strtod_l+0x94>
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	e7ef      	b.n	8003efe <_strtod_l+0xae>
 8003f1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003f20:	b13a      	cbz	r2, 8003f32 <_strtod_l+0xe2>
 8003f22:	2135      	movs	r1, #53	; 0x35
 8003f24:	a81c      	add	r0, sp, #112	; 0x70
 8003f26:	f002 fc8d 	bl	8006844 <__copybits>
 8003f2a:	4650      	mov	r0, sl
 8003f2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f2e:	f002 f855 	bl	8005fdc <_Bfree>
 8003f32:	3e01      	subs	r6, #1
 8003f34:	2e04      	cmp	r6, #4
 8003f36:	d806      	bhi.n	8003f46 <_strtod_l+0xf6>
 8003f38:	e8df f006 	tbb	[pc, r6]
 8003f3c:	1714030a 	.word	0x1714030a
 8003f40:	0a          	.byte	0x0a
 8003f41:	00          	.byte	0x00
 8003f42:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003f46:	0721      	lsls	r1, r4, #28
 8003f48:	d5c3      	bpl.n	8003ed2 <_strtod_l+0x82>
 8003f4a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003f4e:	e7c0      	b.n	8003ed2 <_strtod_l+0x82>
 8003f50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003f52:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003f56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003f5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f5e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003f62:	e7f0      	b.n	8003f46 <_strtod_l+0xf6>
 8003f64:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80040e0 <_strtod_l+0x290>
 8003f68:	e7ed      	b.n	8003f46 <_strtod_l+0xf6>
 8003f6a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003f6e:	f04f 38ff 	mov.w	r8, #4294967295
 8003f72:	e7e8      	b.n	8003f46 <_strtod_l+0xf6>
 8003f74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	9219      	str	r2, [sp, #100]	; 0x64
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b30      	cmp	r3, #48	; 0x30
 8003f7e:	d0f9      	beq.n	8003f74 <_strtod_l+0x124>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0a6      	beq.n	8003ed2 <_strtod_l+0x82>
 8003f84:	2301      	movs	r3, #1
 8003f86:	9307      	str	r3, [sp, #28]
 8003f88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f8a:	220a      	movs	r2, #10
 8003f8c:	9308      	str	r3, [sp, #32]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	469b      	mov	fp, r3
 8003f92:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003f96:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003f98:	7805      	ldrb	r5, [r0, #0]
 8003f9a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003f9e:	b2d9      	uxtb	r1, r3
 8003fa0:	2909      	cmp	r1, #9
 8003fa2:	d927      	bls.n	8003ff4 <_strtod_l+0x1a4>
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	f002 fef2 	bl	8006d90 <strncmp>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d033      	beq.n	8004018 <_strtod_l+0x1c8>
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	462a      	mov	r2, r5
 8003fb4:	465c      	mov	r4, fp
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	9004      	str	r0, [sp, #16]
 8003fba:	2a65      	cmp	r2, #101	; 0x65
 8003fbc:	d001      	beq.n	8003fc2 <_strtod_l+0x172>
 8003fbe:	2a45      	cmp	r2, #69	; 0x45
 8003fc0:	d114      	bne.n	8003fec <_strtod_l+0x19c>
 8003fc2:	b91c      	cbnz	r4, 8003fcc <_strtod_l+0x17c>
 8003fc4:	9a07      	ldr	r2, [sp, #28]
 8003fc6:	4302      	orrs	r2, r0
 8003fc8:	d09f      	beq.n	8003f0a <_strtod_l+0xba>
 8003fca:	2400      	movs	r4, #0
 8003fcc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003fce:	1c72      	adds	r2, r6, #1
 8003fd0:	9219      	str	r2, [sp, #100]	; 0x64
 8003fd2:	7872      	ldrb	r2, [r6, #1]
 8003fd4:	2a2b      	cmp	r2, #43	; 0x2b
 8003fd6:	d079      	beq.n	80040cc <_strtod_l+0x27c>
 8003fd8:	2a2d      	cmp	r2, #45	; 0x2d
 8003fda:	f000 8083 	beq.w	80040e4 <_strtod_l+0x294>
 8003fde:	2700      	movs	r7, #0
 8003fe0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003fe4:	2909      	cmp	r1, #9
 8003fe6:	f240 8083 	bls.w	80040f0 <_strtod_l+0x2a0>
 8003fea:	9619      	str	r6, [sp, #100]	; 0x64
 8003fec:	2500      	movs	r5, #0
 8003fee:	e09f      	b.n	8004130 <_strtod_l+0x2e0>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e7c8      	b.n	8003f86 <_strtod_l+0x136>
 8003ff4:	f1bb 0f08 	cmp.w	fp, #8
 8003ff8:	bfd5      	itete	le
 8003ffa:	9906      	ldrle	r1, [sp, #24]
 8003ffc:	9905      	ldrgt	r1, [sp, #20]
 8003ffe:	fb02 3301 	mlale	r3, r2, r1, r3
 8004002:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004006:	f100 0001 	add.w	r0, r0, #1
 800400a:	bfd4      	ite	le
 800400c:	9306      	strle	r3, [sp, #24]
 800400e:	9305      	strgt	r3, [sp, #20]
 8004010:	f10b 0b01 	add.w	fp, fp, #1
 8004014:	9019      	str	r0, [sp, #100]	; 0x64
 8004016:	e7be      	b.n	8003f96 <_strtod_l+0x146>
 8004018:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800401a:	191a      	adds	r2, r3, r4
 800401c:	9219      	str	r2, [sp, #100]	; 0x64
 800401e:	5d1a      	ldrb	r2, [r3, r4]
 8004020:	f1bb 0f00 	cmp.w	fp, #0
 8004024:	d036      	beq.n	8004094 <_strtod_l+0x244>
 8004026:	465c      	mov	r4, fp
 8004028:	9004      	str	r0, [sp, #16]
 800402a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800402e:	2b09      	cmp	r3, #9
 8004030:	d912      	bls.n	8004058 <_strtod_l+0x208>
 8004032:	2301      	movs	r3, #1
 8004034:	e7c1      	b.n	8003fba <_strtod_l+0x16a>
 8004036:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004038:	3001      	adds	r0, #1
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	9219      	str	r2, [sp, #100]	; 0x64
 800403e:	785a      	ldrb	r2, [r3, #1]
 8004040:	2a30      	cmp	r2, #48	; 0x30
 8004042:	d0f8      	beq.n	8004036 <_strtod_l+0x1e6>
 8004044:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004048:	2b08      	cmp	r3, #8
 800404a:	f200 84d5 	bhi.w	80049f8 <_strtod_l+0xba8>
 800404e:	9004      	str	r0, [sp, #16]
 8004050:	2000      	movs	r0, #0
 8004052:	4604      	mov	r4, r0
 8004054:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004056:	9308      	str	r3, [sp, #32]
 8004058:	3a30      	subs	r2, #48	; 0x30
 800405a:	f100 0301 	add.w	r3, r0, #1
 800405e:	d013      	beq.n	8004088 <_strtod_l+0x238>
 8004060:	9904      	ldr	r1, [sp, #16]
 8004062:	1905      	adds	r5, r0, r4
 8004064:	4419      	add	r1, r3
 8004066:	9104      	str	r1, [sp, #16]
 8004068:	4623      	mov	r3, r4
 800406a:	210a      	movs	r1, #10
 800406c:	42ab      	cmp	r3, r5
 800406e:	d113      	bne.n	8004098 <_strtod_l+0x248>
 8004070:	1823      	adds	r3, r4, r0
 8004072:	2b08      	cmp	r3, #8
 8004074:	f104 0401 	add.w	r4, r4, #1
 8004078:	4404      	add	r4, r0
 800407a:	dc1b      	bgt.n	80040b4 <_strtod_l+0x264>
 800407c:	230a      	movs	r3, #10
 800407e:	9906      	ldr	r1, [sp, #24]
 8004080:	fb03 2301 	mla	r3, r3, r1, r2
 8004084:	9306      	str	r3, [sp, #24]
 8004086:	2300      	movs	r3, #0
 8004088:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800408a:	4618      	mov	r0, r3
 800408c:	1c51      	adds	r1, r2, #1
 800408e:	9119      	str	r1, [sp, #100]	; 0x64
 8004090:	7852      	ldrb	r2, [r2, #1]
 8004092:	e7ca      	b.n	800402a <_strtod_l+0x1da>
 8004094:	4658      	mov	r0, fp
 8004096:	e7d3      	b.n	8004040 <_strtod_l+0x1f0>
 8004098:	2b08      	cmp	r3, #8
 800409a:	dc04      	bgt.n	80040a6 <_strtod_l+0x256>
 800409c:	9f06      	ldr	r7, [sp, #24]
 800409e:	434f      	muls	r7, r1
 80040a0:	9706      	str	r7, [sp, #24]
 80040a2:	3301      	adds	r3, #1
 80040a4:	e7e2      	b.n	800406c <_strtod_l+0x21c>
 80040a6:	1c5f      	adds	r7, r3, #1
 80040a8:	2f10      	cmp	r7, #16
 80040aa:	bfde      	ittt	le
 80040ac:	9f05      	ldrle	r7, [sp, #20]
 80040ae:	434f      	mulle	r7, r1
 80040b0:	9705      	strle	r7, [sp, #20]
 80040b2:	e7f6      	b.n	80040a2 <_strtod_l+0x252>
 80040b4:	2c10      	cmp	r4, #16
 80040b6:	bfdf      	itttt	le
 80040b8:	230a      	movle	r3, #10
 80040ba:	9905      	ldrle	r1, [sp, #20]
 80040bc:	fb03 2301 	mlale	r3, r3, r1, r2
 80040c0:	9305      	strle	r3, [sp, #20]
 80040c2:	e7e0      	b.n	8004086 <_strtod_l+0x236>
 80040c4:	2300      	movs	r3, #0
 80040c6:	9304      	str	r3, [sp, #16]
 80040c8:	2301      	movs	r3, #1
 80040ca:	e77b      	b.n	8003fc4 <_strtod_l+0x174>
 80040cc:	2700      	movs	r7, #0
 80040ce:	1cb2      	adds	r2, r6, #2
 80040d0:	9219      	str	r2, [sp, #100]	; 0x64
 80040d2:	78b2      	ldrb	r2, [r6, #2]
 80040d4:	e784      	b.n	8003fe0 <_strtod_l+0x190>
 80040d6:	bf00      	nop
 80040d8:	08007c08 	.word	0x08007c08
 80040dc:	080079c0 	.word	0x080079c0
 80040e0:	7ff00000 	.word	0x7ff00000
 80040e4:	2701      	movs	r7, #1
 80040e6:	e7f2      	b.n	80040ce <_strtod_l+0x27e>
 80040e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80040ea:	1c51      	adds	r1, r2, #1
 80040ec:	9119      	str	r1, [sp, #100]	; 0x64
 80040ee:	7852      	ldrb	r2, [r2, #1]
 80040f0:	2a30      	cmp	r2, #48	; 0x30
 80040f2:	d0f9      	beq.n	80040e8 <_strtod_l+0x298>
 80040f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80040f8:	2908      	cmp	r1, #8
 80040fa:	f63f af77 	bhi.w	8003fec <_strtod_l+0x19c>
 80040fe:	f04f 0e0a 	mov.w	lr, #10
 8004102:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004106:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004108:	9209      	str	r2, [sp, #36]	; 0x24
 800410a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800410c:	1c51      	adds	r1, r2, #1
 800410e:	9119      	str	r1, [sp, #100]	; 0x64
 8004110:	7852      	ldrb	r2, [r2, #1]
 8004112:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004116:	2d09      	cmp	r5, #9
 8004118:	d935      	bls.n	8004186 <_strtod_l+0x336>
 800411a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800411c:	1b49      	subs	r1, r1, r5
 800411e:	2908      	cmp	r1, #8
 8004120:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004124:	dc02      	bgt.n	800412c <_strtod_l+0x2dc>
 8004126:	4565      	cmp	r5, ip
 8004128:	bfa8      	it	ge
 800412a:	4665      	movge	r5, ip
 800412c:	b107      	cbz	r7, 8004130 <_strtod_l+0x2e0>
 800412e:	426d      	negs	r5, r5
 8004130:	2c00      	cmp	r4, #0
 8004132:	d14c      	bne.n	80041ce <_strtod_l+0x37e>
 8004134:	9907      	ldr	r1, [sp, #28]
 8004136:	4301      	orrs	r1, r0
 8004138:	f47f aecb 	bne.w	8003ed2 <_strtod_l+0x82>
 800413c:	2b00      	cmp	r3, #0
 800413e:	f47f aee4 	bne.w	8003f0a <_strtod_l+0xba>
 8004142:	2a69      	cmp	r2, #105	; 0x69
 8004144:	d026      	beq.n	8004194 <_strtod_l+0x344>
 8004146:	dc23      	bgt.n	8004190 <_strtod_l+0x340>
 8004148:	2a49      	cmp	r2, #73	; 0x49
 800414a:	d023      	beq.n	8004194 <_strtod_l+0x344>
 800414c:	2a4e      	cmp	r2, #78	; 0x4e
 800414e:	f47f aedc 	bne.w	8003f0a <_strtod_l+0xba>
 8004152:	499d      	ldr	r1, [pc, #628]	; (80043c8 <_strtod_l+0x578>)
 8004154:	a819      	add	r0, sp, #100	; 0x64
 8004156:	f001 fe17 	bl	8005d88 <__match>
 800415a:	2800      	cmp	r0, #0
 800415c:	f43f aed5 	beq.w	8003f0a <_strtod_l+0xba>
 8004160:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b28      	cmp	r3, #40	; 0x28
 8004166:	d12c      	bne.n	80041c2 <_strtod_l+0x372>
 8004168:	4998      	ldr	r1, [pc, #608]	; (80043cc <_strtod_l+0x57c>)
 800416a:	aa1c      	add	r2, sp, #112	; 0x70
 800416c:	a819      	add	r0, sp, #100	; 0x64
 800416e:	f001 fe1f 	bl	8005db0 <__hexnan>
 8004172:	2805      	cmp	r0, #5
 8004174:	d125      	bne.n	80041c2 <_strtod_l+0x372>
 8004176:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004178:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800417c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004180:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004184:	e6a5      	b.n	8003ed2 <_strtod_l+0x82>
 8004186:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800418a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800418e:	e7bc      	b.n	800410a <_strtod_l+0x2ba>
 8004190:	2a6e      	cmp	r2, #110	; 0x6e
 8004192:	e7dc      	b.n	800414e <_strtod_l+0x2fe>
 8004194:	498e      	ldr	r1, [pc, #568]	; (80043d0 <_strtod_l+0x580>)
 8004196:	a819      	add	r0, sp, #100	; 0x64
 8004198:	f001 fdf6 	bl	8005d88 <__match>
 800419c:	2800      	cmp	r0, #0
 800419e:	f43f aeb4 	beq.w	8003f0a <_strtod_l+0xba>
 80041a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041a4:	498b      	ldr	r1, [pc, #556]	; (80043d4 <_strtod_l+0x584>)
 80041a6:	3b01      	subs	r3, #1
 80041a8:	a819      	add	r0, sp, #100	; 0x64
 80041aa:	9319      	str	r3, [sp, #100]	; 0x64
 80041ac:	f001 fdec 	bl	8005d88 <__match>
 80041b0:	b910      	cbnz	r0, 80041b8 <_strtod_l+0x368>
 80041b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041b4:	3301      	adds	r3, #1
 80041b6:	9319      	str	r3, [sp, #100]	; 0x64
 80041b8:	f04f 0800 	mov.w	r8, #0
 80041bc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80043d8 <_strtod_l+0x588>
 80041c0:	e687      	b.n	8003ed2 <_strtod_l+0x82>
 80041c2:	4886      	ldr	r0, [pc, #536]	; (80043dc <_strtod_l+0x58c>)
 80041c4:	f002 fdce 	bl	8006d64 <nan>
 80041c8:	4680      	mov	r8, r0
 80041ca:	4689      	mov	r9, r1
 80041cc:	e681      	b.n	8003ed2 <_strtod_l+0x82>
 80041ce:	9b04      	ldr	r3, [sp, #16]
 80041d0:	f1bb 0f00 	cmp.w	fp, #0
 80041d4:	bf08      	it	eq
 80041d6:	46a3      	moveq	fp, r4
 80041d8:	1aeb      	subs	r3, r5, r3
 80041da:	2c10      	cmp	r4, #16
 80041dc:	9806      	ldr	r0, [sp, #24]
 80041de:	4626      	mov	r6, r4
 80041e0:	9307      	str	r3, [sp, #28]
 80041e2:	bfa8      	it	ge
 80041e4:	2610      	movge	r6, #16
 80041e6:	f7fc f8fd 	bl	80003e4 <__aeabi_ui2d>
 80041ea:	2c09      	cmp	r4, #9
 80041ec:	4680      	mov	r8, r0
 80041ee:	4689      	mov	r9, r1
 80041f0:	dd13      	ble.n	800421a <_strtod_l+0x3ca>
 80041f2:	4b7b      	ldr	r3, [pc, #492]	; (80043e0 <_strtod_l+0x590>)
 80041f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80041f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80041fc:	f7fc f96c 	bl	80004d8 <__aeabi_dmul>
 8004200:	4680      	mov	r8, r0
 8004202:	9805      	ldr	r0, [sp, #20]
 8004204:	4689      	mov	r9, r1
 8004206:	f7fc f8ed 	bl	80003e4 <__aeabi_ui2d>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4640      	mov	r0, r8
 8004210:	4649      	mov	r1, r9
 8004212:	f7fb ffab 	bl	800016c <__adddf3>
 8004216:	4680      	mov	r8, r0
 8004218:	4689      	mov	r9, r1
 800421a:	2c0f      	cmp	r4, #15
 800421c:	dc36      	bgt.n	800428c <_strtod_l+0x43c>
 800421e:	9b07      	ldr	r3, [sp, #28]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f43f ae56 	beq.w	8003ed2 <_strtod_l+0x82>
 8004226:	dd22      	ble.n	800426e <_strtod_l+0x41e>
 8004228:	2b16      	cmp	r3, #22
 800422a:	dc09      	bgt.n	8004240 <_strtod_l+0x3f0>
 800422c:	496c      	ldr	r1, [pc, #432]	; (80043e0 <_strtod_l+0x590>)
 800422e:	4642      	mov	r2, r8
 8004230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004234:	464b      	mov	r3, r9
 8004236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800423a:	f7fc f94d 	bl	80004d8 <__aeabi_dmul>
 800423e:	e7c3      	b.n	80041c8 <_strtod_l+0x378>
 8004240:	9a07      	ldr	r2, [sp, #28]
 8004242:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004246:	4293      	cmp	r3, r2
 8004248:	db20      	blt.n	800428c <_strtod_l+0x43c>
 800424a:	4d65      	ldr	r5, [pc, #404]	; (80043e0 <_strtod_l+0x590>)
 800424c:	f1c4 040f 	rsb	r4, r4, #15
 8004250:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004254:	4642      	mov	r2, r8
 8004256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800425a:	464b      	mov	r3, r9
 800425c:	f7fc f93c 	bl	80004d8 <__aeabi_dmul>
 8004260:	9b07      	ldr	r3, [sp, #28]
 8004262:	1b1c      	subs	r4, r3, r4
 8004264:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004268:	e9d5 2300 	ldrd	r2, r3, [r5]
 800426c:	e7e5      	b.n	800423a <_strtod_l+0x3ea>
 800426e:	9b07      	ldr	r3, [sp, #28]
 8004270:	3316      	adds	r3, #22
 8004272:	db0b      	blt.n	800428c <_strtod_l+0x43c>
 8004274:	9b04      	ldr	r3, [sp, #16]
 8004276:	4640      	mov	r0, r8
 8004278:	1b5d      	subs	r5, r3, r5
 800427a:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <_strtod_l+0x590>)
 800427c:	4649      	mov	r1, r9
 800427e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004282:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004286:	f7fc fa51 	bl	800072c <__aeabi_ddiv>
 800428a:	e79d      	b.n	80041c8 <_strtod_l+0x378>
 800428c:	9b07      	ldr	r3, [sp, #28]
 800428e:	1ba6      	subs	r6, r4, r6
 8004290:	441e      	add	r6, r3
 8004292:	2e00      	cmp	r6, #0
 8004294:	dd74      	ble.n	8004380 <_strtod_l+0x530>
 8004296:	f016 030f 	ands.w	r3, r6, #15
 800429a:	d00a      	beq.n	80042b2 <_strtod_l+0x462>
 800429c:	4950      	ldr	r1, [pc, #320]	; (80043e0 <_strtod_l+0x590>)
 800429e:	4642      	mov	r2, r8
 80042a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80042a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042a8:	464b      	mov	r3, r9
 80042aa:	f7fc f915 	bl	80004d8 <__aeabi_dmul>
 80042ae:	4680      	mov	r8, r0
 80042b0:	4689      	mov	r9, r1
 80042b2:	f036 060f 	bics.w	r6, r6, #15
 80042b6:	d052      	beq.n	800435e <_strtod_l+0x50e>
 80042b8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80042bc:	dd27      	ble.n	800430e <_strtod_l+0x4be>
 80042be:	f04f 0b00 	mov.w	fp, #0
 80042c2:	f8cd b010 	str.w	fp, [sp, #16]
 80042c6:	f8cd b020 	str.w	fp, [sp, #32]
 80042ca:	f8cd b018 	str.w	fp, [sp, #24]
 80042ce:	2322      	movs	r3, #34	; 0x22
 80042d0:	f04f 0800 	mov.w	r8, #0
 80042d4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80043d8 <_strtod_l+0x588>
 80042d8:	f8ca 3000 	str.w	r3, [sl]
 80042dc:	9b08      	ldr	r3, [sp, #32]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f43f adf7 	beq.w	8003ed2 <_strtod_l+0x82>
 80042e4:	4650      	mov	r0, sl
 80042e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80042e8:	f001 fe78 	bl	8005fdc <_Bfree>
 80042ec:	4650      	mov	r0, sl
 80042ee:	9906      	ldr	r1, [sp, #24]
 80042f0:	f001 fe74 	bl	8005fdc <_Bfree>
 80042f4:	4650      	mov	r0, sl
 80042f6:	9904      	ldr	r1, [sp, #16]
 80042f8:	f001 fe70 	bl	8005fdc <_Bfree>
 80042fc:	4650      	mov	r0, sl
 80042fe:	9908      	ldr	r1, [sp, #32]
 8004300:	f001 fe6c 	bl	8005fdc <_Bfree>
 8004304:	4659      	mov	r1, fp
 8004306:	4650      	mov	r0, sl
 8004308:	f001 fe68 	bl	8005fdc <_Bfree>
 800430c:	e5e1      	b.n	8003ed2 <_strtod_l+0x82>
 800430e:	4b35      	ldr	r3, [pc, #212]	; (80043e4 <_strtod_l+0x594>)
 8004310:	4640      	mov	r0, r8
 8004312:	9305      	str	r3, [sp, #20]
 8004314:	2300      	movs	r3, #0
 8004316:	4649      	mov	r1, r9
 8004318:	461f      	mov	r7, r3
 800431a:	1136      	asrs	r6, r6, #4
 800431c:	2e01      	cmp	r6, #1
 800431e:	dc21      	bgt.n	8004364 <_strtod_l+0x514>
 8004320:	b10b      	cbz	r3, 8004326 <_strtod_l+0x4d6>
 8004322:	4680      	mov	r8, r0
 8004324:	4689      	mov	r9, r1
 8004326:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <_strtod_l+0x594>)
 8004328:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800432c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004330:	4642      	mov	r2, r8
 8004332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004336:	464b      	mov	r3, r9
 8004338:	f7fc f8ce 	bl	80004d8 <__aeabi_dmul>
 800433c:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <_strtod_l+0x588>)
 800433e:	460a      	mov	r2, r1
 8004340:	400b      	ands	r3, r1
 8004342:	4929      	ldr	r1, [pc, #164]	; (80043e8 <_strtod_l+0x598>)
 8004344:	4680      	mov	r8, r0
 8004346:	428b      	cmp	r3, r1
 8004348:	d8b9      	bhi.n	80042be <_strtod_l+0x46e>
 800434a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800434e:	428b      	cmp	r3, r1
 8004350:	bf86      	itte	hi
 8004352:	f04f 38ff 	movhi.w	r8, #4294967295
 8004356:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80043ec <_strtod_l+0x59c>
 800435a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800435e:	2300      	movs	r3, #0
 8004360:	9305      	str	r3, [sp, #20]
 8004362:	e07f      	b.n	8004464 <_strtod_l+0x614>
 8004364:	07f2      	lsls	r2, r6, #31
 8004366:	d505      	bpl.n	8004374 <_strtod_l+0x524>
 8004368:	9b05      	ldr	r3, [sp, #20]
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc f8b3 	bl	80004d8 <__aeabi_dmul>
 8004372:	2301      	movs	r3, #1
 8004374:	9a05      	ldr	r2, [sp, #20]
 8004376:	3701      	adds	r7, #1
 8004378:	3208      	adds	r2, #8
 800437a:	1076      	asrs	r6, r6, #1
 800437c:	9205      	str	r2, [sp, #20]
 800437e:	e7cd      	b.n	800431c <_strtod_l+0x4cc>
 8004380:	d0ed      	beq.n	800435e <_strtod_l+0x50e>
 8004382:	4276      	negs	r6, r6
 8004384:	f016 020f 	ands.w	r2, r6, #15
 8004388:	d00a      	beq.n	80043a0 <_strtod_l+0x550>
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <_strtod_l+0x590>)
 800438c:	4640      	mov	r0, r8
 800438e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004392:	4649      	mov	r1, r9
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f7fc f9c8 	bl	800072c <__aeabi_ddiv>
 800439c:	4680      	mov	r8, r0
 800439e:	4689      	mov	r9, r1
 80043a0:	1136      	asrs	r6, r6, #4
 80043a2:	d0dc      	beq.n	800435e <_strtod_l+0x50e>
 80043a4:	2e1f      	cmp	r6, #31
 80043a6:	dd23      	ble.n	80043f0 <_strtod_l+0x5a0>
 80043a8:	f04f 0b00 	mov.w	fp, #0
 80043ac:	f8cd b010 	str.w	fp, [sp, #16]
 80043b0:	f8cd b020 	str.w	fp, [sp, #32]
 80043b4:	f8cd b018 	str.w	fp, [sp, #24]
 80043b8:	2322      	movs	r3, #34	; 0x22
 80043ba:	f04f 0800 	mov.w	r8, #0
 80043be:	f04f 0900 	mov.w	r9, #0
 80043c2:	f8ca 3000 	str.w	r3, [sl]
 80043c6:	e789      	b.n	80042dc <_strtod_l+0x48c>
 80043c8:	08007991 	.word	0x08007991
 80043cc:	080079d4 	.word	0x080079d4
 80043d0:	08007989 	.word	0x08007989
 80043d4:	08007b14 	.word	0x08007b14
 80043d8:	7ff00000 	.word	0x7ff00000
 80043dc:	08007dc0 	.word	0x08007dc0
 80043e0:	08007ca0 	.word	0x08007ca0
 80043e4:	08007c78 	.word	0x08007c78
 80043e8:	7ca00000 	.word	0x7ca00000
 80043ec:	7fefffff 	.word	0x7fefffff
 80043f0:	f016 0310 	ands.w	r3, r6, #16
 80043f4:	bf18      	it	ne
 80043f6:	236a      	movne	r3, #106	; 0x6a
 80043f8:	4640      	mov	r0, r8
 80043fa:	9305      	str	r3, [sp, #20]
 80043fc:	4649      	mov	r1, r9
 80043fe:	2300      	movs	r3, #0
 8004400:	4fb0      	ldr	r7, [pc, #704]	; (80046c4 <_strtod_l+0x874>)
 8004402:	07f2      	lsls	r2, r6, #31
 8004404:	d504      	bpl.n	8004410 <_strtod_l+0x5c0>
 8004406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800440a:	f7fc f865 	bl	80004d8 <__aeabi_dmul>
 800440e:	2301      	movs	r3, #1
 8004410:	1076      	asrs	r6, r6, #1
 8004412:	f107 0708 	add.w	r7, r7, #8
 8004416:	d1f4      	bne.n	8004402 <_strtod_l+0x5b2>
 8004418:	b10b      	cbz	r3, 800441e <_strtod_l+0x5ce>
 800441a:	4680      	mov	r8, r0
 800441c:	4689      	mov	r9, r1
 800441e:	9b05      	ldr	r3, [sp, #20]
 8004420:	b1c3      	cbz	r3, 8004454 <_strtod_l+0x604>
 8004422:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004426:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800442a:	2b00      	cmp	r3, #0
 800442c:	4649      	mov	r1, r9
 800442e:	dd11      	ble.n	8004454 <_strtod_l+0x604>
 8004430:	2b1f      	cmp	r3, #31
 8004432:	f340 8127 	ble.w	8004684 <_strtod_l+0x834>
 8004436:	2b34      	cmp	r3, #52	; 0x34
 8004438:	bfd8      	it	le
 800443a:	f04f 33ff 	movle.w	r3, #4294967295
 800443e:	f04f 0800 	mov.w	r8, #0
 8004442:	bfcf      	iteee	gt
 8004444:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004448:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800444c:	fa03 f202 	lslle.w	r2, r3, r2
 8004450:	ea02 0901 	andle.w	r9, r2, r1
 8004454:	2200      	movs	r2, #0
 8004456:	2300      	movs	r3, #0
 8004458:	4640      	mov	r0, r8
 800445a:	4649      	mov	r1, r9
 800445c:	f7fc faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8004460:	2800      	cmp	r0, #0
 8004462:	d1a1      	bne.n	80043a8 <_strtod_l+0x558>
 8004464:	9b06      	ldr	r3, [sp, #24]
 8004466:	465a      	mov	r2, fp
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	4650      	mov	r0, sl
 800446c:	4623      	mov	r3, r4
 800446e:	9908      	ldr	r1, [sp, #32]
 8004470:	f001 fe1c 	bl	80060ac <__s2b>
 8004474:	9008      	str	r0, [sp, #32]
 8004476:	2800      	cmp	r0, #0
 8004478:	f43f af21 	beq.w	80042be <_strtod_l+0x46e>
 800447c:	9b04      	ldr	r3, [sp, #16]
 800447e:	f04f 0b00 	mov.w	fp, #0
 8004482:	1b5d      	subs	r5, r3, r5
 8004484:	9b07      	ldr	r3, [sp, #28]
 8004486:	f8cd b010 	str.w	fp, [sp, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	bfb4      	ite	lt
 800448e:	462b      	movlt	r3, r5
 8004490:	2300      	movge	r3, #0
 8004492:	930e      	str	r3, [sp, #56]	; 0x38
 8004494:	9b07      	ldr	r3, [sp, #28]
 8004496:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800449a:	9314      	str	r3, [sp, #80]	; 0x50
 800449c:	9b08      	ldr	r3, [sp, #32]
 800449e:	4650      	mov	r0, sl
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	f001 fd5b 	bl	8005f5c <_Balloc>
 80044a6:	9006      	str	r0, [sp, #24]
 80044a8:	2800      	cmp	r0, #0
 80044aa:	f43f af10 	beq.w	80042ce <_strtod_l+0x47e>
 80044ae:	9b08      	ldr	r3, [sp, #32]
 80044b0:	300c      	adds	r0, #12
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	f103 010c 	add.w	r1, r3, #12
 80044b8:	3202      	adds	r2, #2
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	f001 fd40 	bl	8005f40 <memcpy>
 80044c0:	ab1c      	add	r3, sp, #112	; 0x70
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	4650      	mov	r0, sl
 80044ce:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80044d2:	f002 f92d 	bl	8006730 <__d2b>
 80044d6:	901a      	str	r0, [sp, #104]	; 0x68
 80044d8:	2800      	cmp	r0, #0
 80044da:	f43f aef8 	beq.w	80042ce <_strtod_l+0x47e>
 80044de:	2101      	movs	r1, #1
 80044e0:	4650      	mov	r0, sl
 80044e2:	f001 fe7b 	bl	80061dc <__i2b>
 80044e6:	4603      	mov	r3, r0
 80044e8:	9004      	str	r0, [sp, #16]
 80044ea:	2800      	cmp	r0, #0
 80044ec:	f43f aeef 	beq.w	80042ce <_strtod_l+0x47e>
 80044f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80044f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	bfab      	itete	ge
 80044f8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80044fa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80044fc:	18ee      	addge	r6, r5, r3
 80044fe:	1b5c      	sublt	r4, r3, r5
 8004500:	9b05      	ldr	r3, [sp, #20]
 8004502:	bfa8      	it	ge
 8004504:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004506:	eba5 0503 	sub.w	r5, r5, r3
 800450a:	4415      	add	r5, r2
 800450c:	4b6e      	ldr	r3, [pc, #440]	; (80046c8 <_strtod_l+0x878>)
 800450e:	f105 35ff 	add.w	r5, r5, #4294967295
 8004512:	bfb8      	it	lt
 8004514:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004516:	429d      	cmp	r5, r3
 8004518:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800451c:	f280 80c4 	bge.w	80046a8 <_strtod_l+0x858>
 8004520:	1b5b      	subs	r3, r3, r5
 8004522:	2b1f      	cmp	r3, #31
 8004524:	f04f 0701 	mov.w	r7, #1
 8004528:	eba2 0203 	sub.w	r2, r2, r3
 800452c:	f300 80b1 	bgt.w	8004692 <_strtod_l+0x842>
 8004530:	2500      	movs	r5, #0
 8004532:	fa07 f303 	lsl.w	r3, r7, r3
 8004536:	930f      	str	r3, [sp, #60]	; 0x3c
 8004538:	18b7      	adds	r7, r6, r2
 800453a:	9b05      	ldr	r3, [sp, #20]
 800453c:	42be      	cmp	r6, r7
 800453e:	4414      	add	r4, r2
 8004540:	441c      	add	r4, r3
 8004542:	4633      	mov	r3, r6
 8004544:	bfa8      	it	ge
 8004546:	463b      	movge	r3, r7
 8004548:	42a3      	cmp	r3, r4
 800454a:	bfa8      	it	ge
 800454c:	4623      	movge	r3, r4
 800454e:	2b00      	cmp	r3, #0
 8004550:	bfc2      	ittt	gt
 8004552:	1aff      	subgt	r7, r7, r3
 8004554:	1ae4      	subgt	r4, r4, r3
 8004556:	1af6      	subgt	r6, r6, r3
 8004558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800455a:	2b00      	cmp	r3, #0
 800455c:	dd17      	ble.n	800458e <_strtod_l+0x73e>
 800455e:	461a      	mov	r2, r3
 8004560:	4650      	mov	r0, sl
 8004562:	9904      	ldr	r1, [sp, #16]
 8004564:	f001 fef8 	bl	8006358 <__pow5mult>
 8004568:	9004      	str	r0, [sp, #16]
 800456a:	2800      	cmp	r0, #0
 800456c:	f43f aeaf 	beq.w	80042ce <_strtod_l+0x47e>
 8004570:	4601      	mov	r1, r0
 8004572:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004574:	4650      	mov	r0, sl
 8004576:	f001 fe47 	bl	8006208 <__multiply>
 800457a:	9009      	str	r0, [sp, #36]	; 0x24
 800457c:	2800      	cmp	r0, #0
 800457e:	f43f aea6 	beq.w	80042ce <_strtod_l+0x47e>
 8004582:	4650      	mov	r0, sl
 8004584:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004586:	f001 fd29 	bl	8005fdc <_Bfree>
 800458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800458c:	931a      	str	r3, [sp, #104]	; 0x68
 800458e:	2f00      	cmp	r7, #0
 8004590:	f300 808e 	bgt.w	80046b0 <_strtod_l+0x860>
 8004594:	9b07      	ldr	r3, [sp, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	dd08      	ble.n	80045ac <_strtod_l+0x75c>
 800459a:	4650      	mov	r0, sl
 800459c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800459e:	9906      	ldr	r1, [sp, #24]
 80045a0:	f001 feda 	bl	8006358 <__pow5mult>
 80045a4:	9006      	str	r0, [sp, #24]
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f43f ae91 	beq.w	80042ce <_strtod_l+0x47e>
 80045ac:	2c00      	cmp	r4, #0
 80045ae:	dd08      	ble.n	80045c2 <_strtod_l+0x772>
 80045b0:	4622      	mov	r2, r4
 80045b2:	4650      	mov	r0, sl
 80045b4:	9906      	ldr	r1, [sp, #24]
 80045b6:	f001 ff29 	bl	800640c <__lshift>
 80045ba:	9006      	str	r0, [sp, #24]
 80045bc:	2800      	cmp	r0, #0
 80045be:	f43f ae86 	beq.w	80042ce <_strtod_l+0x47e>
 80045c2:	2e00      	cmp	r6, #0
 80045c4:	dd08      	ble.n	80045d8 <_strtod_l+0x788>
 80045c6:	4632      	mov	r2, r6
 80045c8:	4650      	mov	r0, sl
 80045ca:	9904      	ldr	r1, [sp, #16]
 80045cc:	f001 ff1e 	bl	800640c <__lshift>
 80045d0:	9004      	str	r0, [sp, #16]
 80045d2:	2800      	cmp	r0, #0
 80045d4:	f43f ae7b 	beq.w	80042ce <_strtod_l+0x47e>
 80045d8:	4650      	mov	r0, sl
 80045da:	9a06      	ldr	r2, [sp, #24]
 80045dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045de:	f001 ffa1 	bl	8006524 <__mdiff>
 80045e2:	4683      	mov	fp, r0
 80045e4:	2800      	cmp	r0, #0
 80045e6:	f43f ae72 	beq.w	80042ce <_strtod_l+0x47e>
 80045ea:	2400      	movs	r4, #0
 80045ec:	68c3      	ldr	r3, [r0, #12]
 80045ee:	9904      	ldr	r1, [sp, #16]
 80045f0:	60c4      	str	r4, [r0, #12]
 80045f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80045f4:	f001 ff7a 	bl	80064ec <__mcmp>
 80045f8:	42a0      	cmp	r0, r4
 80045fa:	da6b      	bge.n	80046d4 <_strtod_l+0x884>
 80045fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045fe:	ea53 0308 	orrs.w	r3, r3, r8
 8004602:	f040 8091 	bne.w	8004728 <_strtod_l+0x8d8>
 8004606:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 808c 	bne.w	8004728 <_strtod_l+0x8d8>
 8004610:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004614:	0d1b      	lsrs	r3, r3, #20
 8004616:	051b      	lsls	r3, r3, #20
 8004618:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800461c:	f240 8084 	bls.w	8004728 <_strtod_l+0x8d8>
 8004620:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004624:	b91b      	cbnz	r3, 800462e <_strtod_l+0x7de>
 8004626:	f8db 3010 	ldr.w	r3, [fp, #16]
 800462a:	2b01      	cmp	r3, #1
 800462c:	dd7c      	ble.n	8004728 <_strtod_l+0x8d8>
 800462e:	4659      	mov	r1, fp
 8004630:	2201      	movs	r2, #1
 8004632:	4650      	mov	r0, sl
 8004634:	f001 feea 	bl	800640c <__lshift>
 8004638:	9904      	ldr	r1, [sp, #16]
 800463a:	4683      	mov	fp, r0
 800463c:	f001 ff56 	bl	80064ec <__mcmp>
 8004640:	2800      	cmp	r0, #0
 8004642:	dd71      	ble.n	8004728 <_strtod_l+0x8d8>
 8004644:	9905      	ldr	r1, [sp, #20]
 8004646:	464b      	mov	r3, r9
 8004648:	4a20      	ldr	r2, [pc, #128]	; (80046cc <_strtod_l+0x87c>)
 800464a:	2900      	cmp	r1, #0
 800464c:	f000 808c 	beq.w	8004768 <_strtod_l+0x918>
 8004650:	ea02 0109 	and.w	r1, r2, r9
 8004654:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004658:	f300 8086 	bgt.w	8004768 <_strtod_l+0x918>
 800465c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004660:	f77f aeaa 	ble.w	80043b8 <_strtod_l+0x568>
 8004664:	4640      	mov	r0, r8
 8004666:	4649      	mov	r1, r9
 8004668:	4b19      	ldr	r3, [pc, #100]	; (80046d0 <_strtod_l+0x880>)
 800466a:	2200      	movs	r2, #0
 800466c:	f7fb ff34 	bl	80004d8 <__aeabi_dmul>
 8004670:	460b      	mov	r3, r1
 8004672:	4303      	orrs	r3, r0
 8004674:	bf08      	it	eq
 8004676:	2322      	moveq	r3, #34	; 0x22
 8004678:	4680      	mov	r8, r0
 800467a:	4689      	mov	r9, r1
 800467c:	bf08      	it	eq
 800467e:	f8ca 3000 	streq.w	r3, [sl]
 8004682:	e62f      	b.n	80042e4 <_strtod_l+0x494>
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	ea03 0808 	and.w	r8, r3, r8
 8004690:	e6e0      	b.n	8004454 <_strtod_l+0x604>
 8004692:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004696:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800469a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800469e:	35e2      	adds	r5, #226	; 0xe2
 80046a0:	fa07 f505 	lsl.w	r5, r7, r5
 80046a4:	970f      	str	r7, [sp, #60]	; 0x3c
 80046a6:	e747      	b.n	8004538 <_strtod_l+0x6e8>
 80046a8:	2301      	movs	r3, #1
 80046aa:	2500      	movs	r5, #0
 80046ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80046ae:	e743      	b.n	8004538 <_strtod_l+0x6e8>
 80046b0:	463a      	mov	r2, r7
 80046b2:	4650      	mov	r0, sl
 80046b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80046b6:	f001 fea9 	bl	800640c <__lshift>
 80046ba:	901a      	str	r0, [sp, #104]	; 0x68
 80046bc:	2800      	cmp	r0, #0
 80046be:	f47f af69 	bne.w	8004594 <_strtod_l+0x744>
 80046c2:	e604      	b.n	80042ce <_strtod_l+0x47e>
 80046c4:	080079e8 	.word	0x080079e8
 80046c8:	fffffc02 	.word	0xfffffc02
 80046cc:	7ff00000 	.word	0x7ff00000
 80046d0:	39500000 	.word	0x39500000
 80046d4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80046d8:	d165      	bne.n	80047a6 <_strtod_l+0x956>
 80046da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046e0:	b35a      	cbz	r2, 800473a <_strtod_l+0x8ea>
 80046e2:	4a99      	ldr	r2, [pc, #612]	; (8004948 <_strtod_l+0xaf8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d12b      	bne.n	8004740 <_strtod_l+0x8f0>
 80046e8:	9b05      	ldr	r3, [sp, #20]
 80046ea:	4641      	mov	r1, r8
 80046ec:	b303      	cbz	r3, 8004730 <_strtod_l+0x8e0>
 80046ee:	464a      	mov	r2, r9
 80046f0:	4b96      	ldr	r3, [pc, #600]	; (800494c <_strtod_l+0xafc>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80046f8:	f04f 32ff 	mov.w	r2, #4294967295
 80046fc:	d81b      	bhi.n	8004736 <_strtod_l+0x8e6>
 80046fe:	0d1b      	lsrs	r3, r3, #20
 8004700:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	4299      	cmp	r1, r3
 800470a:	d119      	bne.n	8004740 <_strtod_l+0x8f0>
 800470c:	4b90      	ldr	r3, [pc, #576]	; (8004950 <_strtod_l+0xb00>)
 800470e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004710:	429a      	cmp	r2, r3
 8004712:	d102      	bne.n	800471a <_strtod_l+0x8ca>
 8004714:	3101      	adds	r1, #1
 8004716:	f43f adda 	beq.w	80042ce <_strtod_l+0x47e>
 800471a:	f04f 0800 	mov.w	r8, #0
 800471e:	4b8b      	ldr	r3, [pc, #556]	; (800494c <_strtod_l+0xafc>)
 8004720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004722:	401a      	ands	r2, r3
 8004724:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004728:	9b05      	ldr	r3, [sp, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d19a      	bne.n	8004664 <_strtod_l+0x814>
 800472e:	e5d9      	b.n	80042e4 <_strtod_l+0x494>
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	e7e8      	b.n	8004708 <_strtod_l+0x8b8>
 8004736:	4613      	mov	r3, r2
 8004738:	e7e6      	b.n	8004708 <_strtod_l+0x8b8>
 800473a:	ea53 0308 	orrs.w	r3, r3, r8
 800473e:	d081      	beq.n	8004644 <_strtod_l+0x7f4>
 8004740:	b1e5      	cbz	r5, 800477c <_strtod_l+0x92c>
 8004742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004744:	421d      	tst	r5, r3
 8004746:	d0ef      	beq.n	8004728 <_strtod_l+0x8d8>
 8004748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800474a:	4640      	mov	r0, r8
 800474c:	4649      	mov	r1, r9
 800474e:	9a05      	ldr	r2, [sp, #20]
 8004750:	b1c3      	cbz	r3, 8004784 <_strtod_l+0x934>
 8004752:	f7ff fb59 	bl	8003e08 <sulp>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800475e:	f7fb fd05 	bl	800016c <__adddf3>
 8004762:	4680      	mov	r8, r0
 8004764:	4689      	mov	r9, r1
 8004766:	e7df      	b.n	8004728 <_strtod_l+0x8d8>
 8004768:	4013      	ands	r3, r2
 800476a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800476e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004772:	f04f 38ff 	mov.w	r8, #4294967295
 8004776:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800477a:	e7d5      	b.n	8004728 <_strtod_l+0x8d8>
 800477c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800477e:	ea13 0f08 	tst.w	r3, r8
 8004782:	e7e0      	b.n	8004746 <_strtod_l+0x8f6>
 8004784:	f7ff fb40 	bl	8003e08 <sulp>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004790:	f7fb fcea 	bl	8000168 <__aeabi_dsub>
 8004794:	2200      	movs	r2, #0
 8004796:	2300      	movs	r3, #0
 8004798:	4680      	mov	r8, r0
 800479a:	4689      	mov	r9, r1
 800479c:	f7fc f904 	bl	80009a8 <__aeabi_dcmpeq>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d0c1      	beq.n	8004728 <_strtod_l+0x8d8>
 80047a4:	e608      	b.n	80043b8 <_strtod_l+0x568>
 80047a6:	4658      	mov	r0, fp
 80047a8:	9904      	ldr	r1, [sp, #16]
 80047aa:	f002 f81d 	bl	80067e8 <__ratio>
 80047ae:	2200      	movs	r2, #0
 80047b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	f7fc f90a 	bl	80009d0 <__aeabi_dcmple>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d070      	beq.n	80048a2 <_strtod_l+0xa52>
 80047c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d042      	beq.n	800484c <_strtod_l+0x9fc>
 80047c6:	2600      	movs	r6, #0
 80047c8:	4f62      	ldr	r7, [pc, #392]	; (8004954 <_strtod_l+0xb04>)
 80047ca:	4d62      	ldr	r5, [pc, #392]	; (8004954 <_strtod_l+0xb04>)
 80047cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047d2:	0d1b      	lsrs	r3, r3, #20
 80047d4:	051b      	lsls	r3, r3, #20
 80047d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80047d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80047da:	4b5f      	ldr	r3, [pc, #380]	; (8004958 <_strtod_l+0xb08>)
 80047dc:	429a      	cmp	r2, r3
 80047de:	f040 80c3 	bne.w	8004968 <_strtod_l+0xb18>
 80047e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e4:	4640      	mov	r0, r8
 80047e6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80047ea:	4649      	mov	r1, r9
 80047ec:	f001 ff26 	bl	800663c <__ulp>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4630      	mov	r0, r6
 80047f6:	4639      	mov	r1, r7
 80047f8:	f7fb fe6e 	bl	80004d8 <__aeabi_dmul>
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	f7fb fcb4 	bl	800016c <__adddf3>
 8004804:	460b      	mov	r3, r1
 8004806:	4951      	ldr	r1, [pc, #324]	; (800494c <_strtod_l+0xafc>)
 8004808:	4a54      	ldr	r2, [pc, #336]	; (800495c <_strtod_l+0xb0c>)
 800480a:	4019      	ands	r1, r3
 800480c:	4291      	cmp	r1, r2
 800480e:	4680      	mov	r8, r0
 8004810:	d95d      	bls.n	80048ce <_strtod_l+0xa7e>
 8004812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004814:	4b4e      	ldr	r3, [pc, #312]	; (8004950 <_strtod_l+0xb00>)
 8004816:	429a      	cmp	r2, r3
 8004818:	d103      	bne.n	8004822 <_strtod_l+0x9d2>
 800481a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800481c:	3301      	adds	r3, #1
 800481e:	f43f ad56 	beq.w	80042ce <_strtod_l+0x47e>
 8004822:	f04f 38ff 	mov.w	r8, #4294967295
 8004826:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004950 <_strtod_l+0xb00>
 800482a:	4650      	mov	r0, sl
 800482c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800482e:	f001 fbd5 	bl	8005fdc <_Bfree>
 8004832:	4650      	mov	r0, sl
 8004834:	9906      	ldr	r1, [sp, #24]
 8004836:	f001 fbd1 	bl	8005fdc <_Bfree>
 800483a:	4650      	mov	r0, sl
 800483c:	9904      	ldr	r1, [sp, #16]
 800483e:	f001 fbcd 	bl	8005fdc <_Bfree>
 8004842:	4659      	mov	r1, fp
 8004844:	4650      	mov	r0, sl
 8004846:	f001 fbc9 	bl	8005fdc <_Bfree>
 800484a:	e627      	b.n	800449c <_strtod_l+0x64c>
 800484c:	f1b8 0f00 	cmp.w	r8, #0
 8004850:	d119      	bne.n	8004886 <_strtod_l+0xa36>
 8004852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004858:	b9e3      	cbnz	r3, 8004894 <_strtod_l+0xa44>
 800485a:	2200      	movs	r2, #0
 800485c:	4630      	mov	r0, r6
 800485e:	4639      	mov	r1, r7
 8004860:	4b3c      	ldr	r3, [pc, #240]	; (8004954 <_strtod_l+0xb04>)
 8004862:	f7fc f8ab 	bl	80009bc <__aeabi_dcmplt>
 8004866:	b9c8      	cbnz	r0, 800489c <_strtod_l+0xa4c>
 8004868:	2200      	movs	r2, #0
 800486a:	4630      	mov	r0, r6
 800486c:	4639      	mov	r1, r7
 800486e:	4b3c      	ldr	r3, [pc, #240]	; (8004960 <_strtod_l+0xb10>)
 8004870:	f7fb fe32 	bl	80004d8 <__aeabi_dmul>
 8004874:	4604      	mov	r4, r0
 8004876:	460d      	mov	r5, r1
 8004878:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800487c:	9416      	str	r4, [sp, #88]	; 0x58
 800487e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004880:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004884:	e7a2      	b.n	80047cc <_strtod_l+0x97c>
 8004886:	f1b8 0f01 	cmp.w	r8, #1
 800488a:	d103      	bne.n	8004894 <_strtod_l+0xa44>
 800488c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	f43f ad92 	beq.w	80043b8 <_strtod_l+0x568>
 8004894:	2600      	movs	r6, #0
 8004896:	2400      	movs	r4, #0
 8004898:	4f32      	ldr	r7, [pc, #200]	; (8004964 <_strtod_l+0xb14>)
 800489a:	e796      	b.n	80047ca <_strtod_l+0x97a>
 800489c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800489e:	4d30      	ldr	r5, [pc, #192]	; (8004960 <_strtod_l+0xb10>)
 80048a0:	e7ea      	b.n	8004878 <_strtod_l+0xa28>
 80048a2:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <_strtod_l+0xb10>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	4630      	mov	r0, r6
 80048a8:	4639      	mov	r1, r7
 80048aa:	f7fb fe15 	bl	80004d8 <__aeabi_dmul>
 80048ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048b0:	4604      	mov	r4, r0
 80048b2:	460d      	mov	r5, r1
 80048b4:	b933      	cbnz	r3, 80048c4 <_strtod_l+0xa74>
 80048b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048ba:	9010      	str	r0, [sp, #64]	; 0x40
 80048bc:	9311      	str	r3, [sp, #68]	; 0x44
 80048be:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80048c2:	e783      	b.n	80047cc <_strtod_l+0x97c>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80048cc:	e7f7      	b.n	80048be <_strtod_l+0xa6e>
 80048ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80048d2:	9b05      	ldr	r3, [sp, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1a8      	bne.n	800482a <_strtod_l+0x9da>
 80048d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048de:	0d1b      	lsrs	r3, r3, #20
 80048e0:	051b      	lsls	r3, r3, #20
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d1a1      	bne.n	800482a <_strtod_l+0x9da>
 80048e6:	4620      	mov	r0, r4
 80048e8:	4629      	mov	r1, r5
 80048ea:	f7fc f93d 	bl	8000b68 <__aeabi_d2lz>
 80048ee:	f7fb fdc5 	bl	800047c <__aeabi_l2d>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4620      	mov	r0, r4
 80048f8:	4629      	mov	r1, r5
 80048fa:	f7fb fc35 	bl	8000168 <__aeabi_dsub>
 80048fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004904:	ea43 0308 	orr.w	r3, r3, r8
 8004908:	4313      	orrs	r3, r2
 800490a:	4604      	mov	r4, r0
 800490c:	460d      	mov	r5, r1
 800490e:	d066      	beq.n	80049de <_strtod_l+0xb8e>
 8004910:	a309      	add	r3, pc, #36	; (adr r3, 8004938 <_strtod_l+0xae8>)
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f7fc f851 	bl	80009bc <__aeabi_dcmplt>
 800491a:	2800      	cmp	r0, #0
 800491c:	f47f ace2 	bne.w	80042e4 <_strtod_l+0x494>
 8004920:	a307      	add	r3, pc, #28	; (adr r3, 8004940 <_strtod_l+0xaf0>)
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	f7fc f865 	bl	80009f8 <__aeabi_dcmpgt>
 800492e:	2800      	cmp	r0, #0
 8004930:	f43f af7b 	beq.w	800482a <_strtod_l+0x9da>
 8004934:	e4d6      	b.n	80042e4 <_strtod_l+0x494>
 8004936:	bf00      	nop
 8004938:	94a03595 	.word	0x94a03595
 800493c:	3fdfffff 	.word	0x3fdfffff
 8004940:	35afe535 	.word	0x35afe535
 8004944:	3fe00000 	.word	0x3fe00000
 8004948:	000fffff 	.word	0x000fffff
 800494c:	7ff00000 	.word	0x7ff00000
 8004950:	7fefffff 	.word	0x7fefffff
 8004954:	3ff00000 	.word	0x3ff00000
 8004958:	7fe00000 	.word	0x7fe00000
 800495c:	7c9fffff 	.word	0x7c9fffff
 8004960:	3fe00000 	.word	0x3fe00000
 8004964:	bff00000 	.word	0xbff00000
 8004968:	9b05      	ldr	r3, [sp, #20]
 800496a:	b313      	cbz	r3, 80049b2 <_strtod_l+0xb62>
 800496c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800496e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004972:	d81e      	bhi.n	80049b2 <_strtod_l+0xb62>
 8004974:	a326      	add	r3, pc, #152	; (adr r3, 8004a10 <_strtod_l+0xbc0>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	4620      	mov	r0, r4
 800497c:	4629      	mov	r1, r5
 800497e:	f7fc f827 	bl	80009d0 <__aeabi_dcmple>
 8004982:	b190      	cbz	r0, 80049aa <_strtod_l+0xb5a>
 8004984:	4629      	mov	r1, r5
 8004986:	4620      	mov	r0, r4
 8004988:	f7fc f87e 	bl	8000a88 <__aeabi_d2uiz>
 800498c:	2801      	cmp	r0, #1
 800498e:	bf38      	it	cc
 8004990:	2001      	movcc	r0, #1
 8004992:	f7fb fd27 	bl	80003e4 <__aeabi_ui2d>
 8004996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004998:	4604      	mov	r4, r0
 800499a:	460d      	mov	r5, r1
 800499c:	b9d3      	cbnz	r3, 80049d4 <_strtod_l+0xb84>
 800499e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049a2:	9012      	str	r0, [sp, #72]	; 0x48
 80049a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80049a6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80049aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049ac:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80049b0:	1a9f      	subs	r7, r3, r2
 80049b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049b6:	f001 fe41 	bl	800663c <__ulp>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4630      	mov	r0, r6
 80049c0:	4639      	mov	r1, r7
 80049c2:	f7fb fd89 	bl	80004d8 <__aeabi_dmul>
 80049c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80049ca:	f7fb fbcf 	bl	800016c <__adddf3>
 80049ce:	4680      	mov	r8, r0
 80049d0:	4689      	mov	r9, r1
 80049d2:	e77e      	b.n	80048d2 <_strtod_l+0xa82>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80049dc:	e7e3      	b.n	80049a6 <_strtod_l+0xb56>
 80049de:	a30e      	add	r3, pc, #56	; (adr r3, 8004a18 <_strtod_l+0xbc8>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb ffea 	bl	80009bc <__aeabi_dcmplt>
 80049e8:	e7a1      	b.n	800492e <_strtod_l+0xade>
 80049ea:	2300      	movs	r3, #0
 80049ec:	930a      	str	r3, [sp, #40]	; 0x28
 80049ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80049f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	f7ff ba71 	b.w	8003eda <_strtod_l+0x8a>
 80049f8:	2a65      	cmp	r2, #101	; 0x65
 80049fa:	f43f ab63 	beq.w	80040c4 <_strtod_l+0x274>
 80049fe:	2a45      	cmp	r2, #69	; 0x45
 8004a00:	f43f ab60 	beq.w	80040c4 <_strtod_l+0x274>
 8004a04:	2301      	movs	r3, #1
 8004a06:	f7ff bb95 	b.w	8004134 <_strtod_l+0x2e4>
 8004a0a:	bf00      	nop
 8004a0c:	f3af 8000 	nop.w
 8004a10:	ffc00000 	.word	0xffc00000
 8004a14:	41dfffff 	.word	0x41dfffff
 8004a18:	94a03595 	.word	0x94a03595
 8004a1c:	3fcfffff 	.word	0x3fcfffff

08004a20 <_strtod_r>:
 8004a20:	4b01      	ldr	r3, [pc, #4]	; (8004a28 <_strtod_r+0x8>)
 8004a22:	f7ff ba15 	b.w	8003e50 <_strtod_l>
 8004a26:	bf00      	nop
 8004a28:	20000074 	.word	0x20000074

08004a2c <_strtol_l.constprop.0>:
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a32:	4680      	mov	r8, r0
 8004a34:	d001      	beq.n	8004a3a <_strtol_l.constprop.0+0xe>
 8004a36:	2b24      	cmp	r3, #36	; 0x24
 8004a38:	d906      	bls.n	8004a48 <_strtol_l.constprop.0+0x1c>
 8004a3a:	f7fe fb21 	bl	8003080 <__errno>
 8004a3e:	2316      	movs	r3, #22
 8004a40:	6003      	str	r3, [r0, #0]
 8004a42:	2000      	movs	r0, #0
 8004a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a48:	460d      	mov	r5, r1
 8004a4a:	4f35      	ldr	r7, [pc, #212]	; (8004b20 <_strtol_l.constprop.0+0xf4>)
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a52:	5de6      	ldrb	r6, [r4, r7]
 8004a54:	f016 0608 	ands.w	r6, r6, #8
 8004a58:	d1f8      	bne.n	8004a4c <_strtol_l.constprop.0+0x20>
 8004a5a:	2c2d      	cmp	r4, #45	; 0x2d
 8004a5c:	d12f      	bne.n	8004abe <_strtol_l.constprop.0+0x92>
 8004a5e:	2601      	movs	r6, #1
 8004a60:	782c      	ldrb	r4, [r5, #0]
 8004a62:	1c85      	adds	r5, r0, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d057      	beq.n	8004b18 <_strtol_l.constprop.0+0xec>
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d109      	bne.n	8004a80 <_strtol_l.constprop.0+0x54>
 8004a6c:	2c30      	cmp	r4, #48	; 0x30
 8004a6e:	d107      	bne.n	8004a80 <_strtol_l.constprop.0+0x54>
 8004a70:	7828      	ldrb	r0, [r5, #0]
 8004a72:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004a76:	2858      	cmp	r0, #88	; 0x58
 8004a78:	d149      	bne.n	8004b0e <_strtol_l.constprop.0+0xe2>
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	786c      	ldrb	r4, [r5, #1]
 8004a7e:	3502      	adds	r5, #2
 8004a80:	2700      	movs	r7, #0
 8004a82:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004a86:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004a8a:	fbbe f9f3 	udiv	r9, lr, r3
 8004a8e:	4638      	mov	r0, r7
 8004a90:	fb03 ea19 	mls	sl, r3, r9, lr
 8004a94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004a98:	f1bc 0f09 	cmp.w	ip, #9
 8004a9c:	d814      	bhi.n	8004ac8 <_strtol_l.constprop.0+0x9c>
 8004a9e:	4664      	mov	r4, ip
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	dd22      	ble.n	8004aea <_strtol_l.constprop.0+0xbe>
 8004aa4:	2f00      	cmp	r7, #0
 8004aa6:	db1d      	blt.n	8004ae4 <_strtol_l.constprop.0+0xb8>
 8004aa8:	4581      	cmp	r9, r0
 8004aaa:	d31b      	bcc.n	8004ae4 <_strtol_l.constprop.0+0xb8>
 8004aac:	d101      	bne.n	8004ab2 <_strtol_l.constprop.0+0x86>
 8004aae:	45a2      	cmp	sl, r4
 8004ab0:	db18      	blt.n	8004ae4 <_strtol_l.constprop.0+0xb8>
 8004ab2:	2701      	movs	r7, #1
 8004ab4:	fb00 4003 	mla	r0, r0, r3, r4
 8004ab8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004abc:	e7ea      	b.n	8004a94 <_strtol_l.constprop.0+0x68>
 8004abe:	2c2b      	cmp	r4, #43	; 0x2b
 8004ac0:	bf04      	itt	eq
 8004ac2:	782c      	ldrbeq	r4, [r5, #0]
 8004ac4:	1c85      	addeq	r5, r0, #2
 8004ac6:	e7cd      	b.n	8004a64 <_strtol_l.constprop.0+0x38>
 8004ac8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004acc:	f1bc 0f19 	cmp.w	ip, #25
 8004ad0:	d801      	bhi.n	8004ad6 <_strtol_l.constprop.0+0xaa>
 8004ad2:	3c37      	subs	r4, #55	; 0x37
 8004ad4:	e7e4      	b.n	8004aa0 <_strtol_l.constprop.0+0x74>
 8004ad6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004ada:	f1bc 0f19 	cmp.w	ip, #25
 8004ade:	d804      	bhi.n	8004aea <_strtol_l.constprop.0+0xbe>
 8004ae0:	3c57      	subs	r4, #87	; 0x57
 8004ae2:	e7dd      	b.n	8004aa0 <_strtol_l.constprop.0+0x74>
 8004ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ae8:	e7e6      	b.n	8004ab8 <_strtol_l.constprop.0+0x8c>
 8004aea:	2f00      	cmp	r7, #0
 8004aec:	da07      	bge.n	8004afe <_strtol_l.constprop.0+0xd2>
 8004aee:	2322      	movs	r3, #34	; 0x22
 8004af0:	4670      	mov	r0, lr
 8004af2:	f8c8 3000 	str.w	r3, [r8]
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	d0a4      	beq.n	8004a44 <_strtol_l.constprop.0+0x18>
 8004afa:	1e69      	subs	r1, r5, #1
 8004afc:	e005      	b.n	8004b0a <_strtol_l.constprop.0+0xde>
 8004afe:	b106      	cbz	r6, 8004b02 <_strtol_l.constprop.0+0xd6>
 8004b00:	4240      	negs	r0, r0
 8004b02:	2a00      	cmp	r2, #0
 8004b04:	d09e      	beq.n	8004a44 <_strtol_l.constprop.0+0x18>
 8004b06:	2f00      	cmp	r7, #0
 8004b08:	d1f7      	bne.n	8004afa <_strtol_l.constprop.0+0xce>
 8004b0a:	6011      	str	r1, [r2, #0]
 8004b0c:	e79a      	b.n	8004a44 <_strtol_l.constprop.0+0x18>
 8004b0e:	2430      	movs	r4, #48	; 0x30
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1b5      	bne.n	8004a80 <_strtol_l.constprop.0+0x54>
 8004b14:	2308      	movs	r3, #8
 8004b16:	e7b3      	b.n	8004a80 <_strtol_l.constprop.0+0x54>
 8004b18:	2c30      	cmp	r4, #48	; 0x30
 8004b1a:	d0a9      	beq.n	8004a70 <_strtol_l.constprop.0+0x44>
 8004b1c:	230a      	movs	r3, #10
 8004b1e:	e7af      	b.n	8004a80 <_strtol_l.constprop.0+0x54>
 8004b20:	08007a11 	.word	0x08007a11

08004b24 <_strtol_r>:
 8004b24:	f7ff bf82 	b.w	8004a2c <_strtol_l.constprop.0>

08004b28 <quorem>:
 8004b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	6903      	ldr	r3, [r0, #16]
 8004b2e:	690c      	ldr	r4, [r1, #16]
 8004b30:	4607      	mov	r7, r0
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	f2c0 8082 	blt.w	8004c3c <quorem+0x114>
 8004b38:	3c01      	subs	r4, #1
 8004b3a:	f100 0514 	add.w	r5, r0, #20
 8004b3e:	f101 0814 	add.w	r8, r1, #20
 8004b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b50:	3301      	adds	r3, #1
 8004b52:	429a      	cmp	r2, r3
 8004b54:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b60:	d331      	bcc.n	8004bc6 <quorem+0x9e>
 8004b62:	f04f 0e00 	mov.w	lr, #0
 8004b66:	4640      	mov	r0, r8
 8004b68:	46ac      	mov	ip, r5
 8004b6a:	46f2      	mov	sl, lr
 8004b6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b70:	b293      	uxth	r3, r2
 8004b72:	fb06 e303 	mla	r3, r6, r3, lr
 8004b76:	0c12      	lsrs	r2, r2, #16
 8004b78:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	fb06 e202 	mla	r2, r6, r2, lr
 8004b82:	ebaa 0303 	sub.w	r3, sl, r3
 8004b86:	f8dc a000 	ldr.w	sl, [ip]
 8004b8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b8e:	fa1f fa8a 	uxth.w	sl, sl
 8004b92:	4453      	add	r3, sl
 8004b94:	f8dc a000 	ldr.w	sl, [ip]
 8004b98:	b292      	uxth	r2, r2
 8004b9a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ba8:	4581      	cmp	r9, r0
 8004baa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bae:	f84c 3b04 	str.w	r3, [ip], #4
 8004bb2:	d2db      	bcs.n	8004b6c <quorem+0x44>
 8004bb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bb8:	b92b      	cbnz	r3, 8004bc6 <quorem+0x9e>
 8004bba:	9b01      	ldr	r3, [sp, #4]
 8004bbc:	3b04      	subs	r3, #4
 8004bbe:	429d      	cmp	r5, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	d32f      	bcc.n	8004c24 <quorem+0xfc>
 8004bc4:	613c      	str	r4, [r7, #16]
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f001 fc90 	bl	80064ec <__mcmp>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	db25      	blt.n	8004c1c <quorem+0xf4>
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f04f 0c00 	mov.w	ip, #0
 8004bd6:	3601      	adds	r6, #1
 8004bd8:	f858 1b04 	ldr.w	r1, [r8], #4
 8004bdc:	f8d0 e000 	ldr.w	lr, [r0]
 8004be0:	b28b      	uxth	r3, r1
 8004be2:	ebac 0303 	sub.w	r3, ip, r3
 8004be6:	fa1f f28e 	uxth.w	r2, lr
 8004bea:	4413      	add	r3, r2
 8004bec:	0c0a      	lsrs	r2, r1, #16
 8004bee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bfc:	45c1      	cmp	r9, r8
 8004bfe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c02:	f840 3b04 	str.w	r3, [r0], #4
 8004c06:	d2e7      	bcs.n	8004bd8 <quorem+0xb0>
 8004c08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c10:	b922      	cbnz	r2, 8004c1c <quorem+0xf4>
 8004c12:	3b04      	subs	r3, #4
 8004c14:	429d      	cmp	r5, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	d30a      	bcc.n	8004c30 <quorem+0x108>
 8004c1a:	613c      	str	r4, [r7, #16]
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	b003      	add	sp, #12
 8004c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	3b04      	subs	r3, #4
 8004c28:	2a00      	cmp	r2, #0
 8004c2a:	d1cb      	bne.n	8004bc4 <quorem+0x9c>
 8004c2c:	3c01      	subs	r4, #1
 8004c2e:	e7c6      	b.n	8004bbe <quorem+0x96>
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	3b04      	subs	r3, #4
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	d1f0      	bne.n	8004c1a <quorem+0xf2>
 8004c38:	3c01      	subs	r4, #1
 8004c3a:	e7eb      	b.n	8004c14 <quorem+0xec>
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	e7ee      	b.n	8004c1e <quorem+0xf6>

08004c40 <_dtoa_r>:
 8004c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c44:	4616      	mov	r6, r2
 8004c46:	461f      	mov	r7, r3
 8004c48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c4a:	b099      	sub	sp, #100	; 0x64
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c56:	b974      	cbnz	r4, 8004c76 <_dtoa_r+0x36>
 8004c58:	2010      	movs	r0, #16
 8004c5a:	f001 f949 	bl	8005ef0 <malloc>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6268      	str	r0, [r5, #36]	; 0x24
 8004c62:	b920      	cbnz	r0, 8004c6e <_dtoa_r+0x2e>
 8004c64:	21ea      	movs	r1, #234	; 0xea
 8004c66:	4ba8      	ldr	r3, [pc, #672]	; (8004f08 <_dtoa_r+0x2c8>)
 8004c68:	48a8      	ldr	r0, [pc, #672]	; (8004f0c <_dtoa_r+0x2cc>)
 8004c6a:	f002 f8b3 	bl	8006dd4 <__assert_func>
 8004c6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c72:	6004      	str	r4, [r0, #0]
 8004c74:	60c4      	str	r4, [r0, #12]
 8004c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c78:	6819      	ldr	r1, [r3, #0]
 8004c7a:	b151      	cbz	r1, 8004c92 <_dtoa_r+0x52>
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4093      	lsls	r3, r2
 8004c82:	604a      	str	r2, [r1, #4]
 8004c84:	608b      	str	r3, [r1, #8]
 8004c86:	4628      	mov	r0, r5
 8004c88:	f001 f9a8 	bl	8005fdc <_Bfree>
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	1e3b      	subs	r3, r7, #0
 8004c94:	bfaf      	iteee	ge
 8004c96:	2300      	movge	r3, #0
 8004c98:	2201      	movlt	r2, #1
 8004c9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c9e:	9305      	strlt	r3, [sp, #20]
 8004ca0:	bfa8      	it	ge
 8004ca2:	f8c8 3000 	strge.w	r3, [r8]
 8004ca6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004caa:	4b99      	ldr	r3, [pc, #612]	; (8004f10 <_dtoa_r+0x2d0>)
 8004cac:	bfb8      	it	lt
 8004cae:	f8c8 2000 	strlt.w	r2, [r8]
 8004cb2:	ea33 0309 	bics.w	r3, r3, r9
 8004cb6:	d119      	bne.n	8004cec <_dtoa_r+0xac>
 8004cb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cc4:	4333      	orrs	r3, r6
 8004cc6:	f000 857f 	beq.w	80057c8 <_dtoa_r+0xb88>
 8004cca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ccc:	b953      	cbnz	r3, 8004ce4 <_dtoa_r+0xa4>
 8004cce:	4b91      	ldr	r3, [pc, #580]	; (8004f14 <_dtoa_r+0x2d4>)
 8004cd0:	e022      	b.n	8004d18 <_dtoa_r+0xd8>
 8004cd2:	4b91      	ldr	r3, [pc, #580]	; (8004f18 <_dtoa_r+0x2d8>)
 8004cd4:	9303      	str	r3, [sp, #12]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	9803      	ldr	r0, [sp, #12]
 8004cde:	b019      	add	sp, #100	; 0x64
 8004ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce4:	4b8b      	ldr	r3, [pc, #556]	; (8004f14 <_dtoa_r+0x2d4>)
 8004ce6:	9303      	str	r3, [sp, #12]
 8004ce8:	3303      	adds	r3, #3
 8004cea:	e7f5      	b.n	8004cd8 <_dtoa_r+0x98>
 8004cec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004cf0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f7fb fe54 	bl	80009a8 <__aeabi_dcmpeq>
 8004d00:	4680      	mov	r8, r0
 8004d02:	b158      	cbz	r0, 8004d1c <_dtoa_r+0xdc>
 8004d04:	2301      	movs	r3, #1
 8004d06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8558 	beq.w	80057c2 <_dtoa_r+0xb82>
 8004d12:	4882      	ldr	r0, [pc, #520]	; (8004f1c <_dtoa_r+0x2dc>)
 8004d14:	6018      	str	r0, [r3, #0]
 8004d16:	1e43      	subs	r3, r0, #1
 8004d18:	9303      	str	r3, [sp, #12]
 8004d1a:	e7df      	b.n	8004cdc <_dtoa_r+0x9c>
 8004d1c:	ab16      	add	r3, sp, #88	; 0x58
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	ab17      	add	r3, sp, #92	; 0x5c
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	4628      	mov	r0, r5
 8004d26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d2a:	f001 fd01 	bl	8006730 <__d2b>
 8004d2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d32:	4683      	mov	fp, r0
 8004d34:	2c00      	cmp	r4, #0
 8004d36:	d07f      	beq.n	8004e38 <_dtoa_r+0x1f8>
 8004d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d3e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d52:	2200      	movs	r2, #0
 8004d54:	4b72      	ldr	r3, [pc, #456]	; (8004f20 <_dtoa_r+0x2e0>)
 8004d56:	f7fb fa07 	bl	8000168 <__aeabi_dsub>
 8004d5a:	a365      	add	r3, pc, #404	; (adr r3, 8004ef0 <_dtoa_r+0x2b0>)
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	f7fb fbba 	bl	80004d8 <__aeabi_dmul>
 8004d64:	a364      	add	r3, pc, #400	; (adr r3, 8004ef8 <_dtoa_r+0x2b8>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f7fb f9ff 	bl	800016c <__adddf3>
 8004d6e:	4606      	mov	r6, r0
 8004d70:	4620      	mov	r0, r4
 8004d72:	460f      	mov	r7, r1
 8004d74:	f7fb fb46 	bl	8000404 <__aeabi_i2d>
 8004d78:	a361      	add	r3, pc, #388	; (adr r3, 8004f00 <_dtoa_r+0x2c0>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fbab 	bl	80004d8 <__aeabi_dmul>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4630      	mov	r0, r6
 8004d88:	4639      	mov	r1, r7
 8004d8a:	f7fb f9ef 	bl	800016c <__adddf3>
 8004d8e:	4606      	mov	r6, r0
 8004d90:	460f      	mov	r7, r1
 8004d92:	f7fb fe51 	bl	8000a38 <__aeabi_d2iz>
 8004d96:	2200      	movs	r2, #0
 8004d98:	4682      	mov	sl, r0
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	4639      	mov	r1, r7
 8004da0:	f7fb fe0c 	bl	80009bc <__aeabi_dcmplt>
 8004da4:	b148      	cbz	r0, 8004dba <_dtoa_r+0x17a>
 8004da6:	4650      	mov	r0, sl
 8004da8:	f7fb fb2c 	bl	8000404 <__aeabi_i2d>
 8004dac:	4632      	mov	r2, r6
 8004dae:	463b      	mov	r3, r7
 8004db0:	f7fb fdfa 	bl	80009a8 <__aeabi_dcmpeq>
 8004db4:	b908      	cbnz	r0, 8004dba <_dtoa_r+0x17a>
 8004db6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dba:	f1ba 0f16 	cmp.w	sl, #22
 8004dbe:	d858      	bhi.n	8004e72 <_dtoa_r+0x232>
 8004dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dc4:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <_dtoa_r+0x2e4>)
 8004dc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f7fb fdf5 	bl	80009bc <__aeabi_dcmplt>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d04f      	beq.n	8004e76 <_dtoa_r+0x236>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004de0:	1b1c      	subs	r4, r3, r4
 8004de2:	1e63      	subs	r3, r4, #1
 8004de4:	9309      	str	r3, [sp, #36]	; 0x24
 8004de6:	bf49      	itett	mi
 8004de8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004dec:	2300      	movpl	r3, #0
 8004dee:	9306      	strmi	r3, [sp, #24]
 8004df0:	2300      	movmi	r3, #0
 8004df2:	bf54      	ite	pl
 8004df4:	9306      	strpl	r3, [sp, #24]
 8004df6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004df8:	f1ba 0f00 	cmp.w	sl, #0
 8004dfc:	db3d      	blt.n	8004e7a <_dtoa_r+0x23a>
 8004dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e00:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e04:	4453      	add	r3, sl
 8004e06:	9309      	str	r3, [sp, #36]	; 0x24
 8004e08:	2300      	movs	r3, #0
 8004e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e0e:	2b09      	cmp	r3, #9
 8004e10:	f200 808c 	bhi.w	8004f2c <_dtoa_r+0x2ec>
 8004e14:	2b05      	cmp	r3, #5
 8004e16:	bfc4      	itt	gt
 8004e18:	3b04      	subgt	r3, #4
 8004e1a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e1e:	bfc8      	it	gt
 8004e20:	2400      	movgt	r4, #0
 8004e22:	f1a3 0302 	sub.w	r3, r3, #2
 8004e26:	bfd8      	it	le
 8004e28:	2401      	movle	r4, #1
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	f200 808a 	bhi.w	8004f44 <_dtoa_r+0x304>
 8004e30:	e8df f003 	tbb	[pc, r3]
 8004e34:	5b4d4f2d 	.word	0x5b4d4f2d
 8004e38:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e3c:	441c      	add	r4, r3
 8004e3e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	bfc3      	ittte	gt
 8004e46:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e4a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e4e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e52:	f1c3 0320 	rsble	r3, r3, #32
 8004e56:	bfc6      	itte	gt
 8004e58:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e5c:	4318      	orrgt	r0, r3
 8004e5e:	fa06 f003 	lslle.w	r0, r6, r3
 8004e62:	f7fb fabf 	bl	80003e4 <__aeabi_ui2d>
 8004e66:	2301      	movs	r3, #1
 8004e68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e6c:	3c01      	subs	r4, #1
 8004e6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e70:	e76f      	b.n	8004d52 <_dtoa_r+0x112>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e7b2      	b.n	8004ddc <_dtoa_r+0x19c>
 8004e76:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e78:	e7b1      	b.n	8004dde <_dtoa_r+0x19e>
 8004e7a:	9b06      	ldr	r3, [sp, #24]
 8004e7c:	eba3 030a 	sub.w	r3, r3, sl
 8004e80:	9306      	str	r3, [sp, #24]
 8004e82:	f1ca 0300 	rsb	r3, sl, #0
 8004e86:	930a      	str	r3, [sp, #40]	; 0x28
 8004e88:	2300      	movs	r3, #0
 8004e8a:	930e      	str	r3, [sp, #56]	; 0x38
 8004e8c:	e7be      	b.n	8004e0c <_dtoa_r+0x1cc>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	dc58      	bgt.n	8004f4a <_dtoa_r+0x30a>
 8004e98:	f04f 0901 	mov.w	r9, #1
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ea2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004eaa:	6042      	str	r2, [r0, #4]
 8004eac:	2204      	movs	r2, #4
 8004eae:	f102 0614 	add.w	r6, r2, #20
 8004eb2:	429e      	cmp	r6, r3
 8004eb4:	6841      	ldr	r1, [r0, #4]
 8004eb6:	d94e      	bls.n	8004f56 <_dtoa_r+0x316>
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f001 f84f 	bl	8005f5c <_Balloc>
 8004ebe:	9003      	str	r0, [sp, #12]
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d14c      	bne.n	8004f5e <_dtoa_r+0x31e>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004eca:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <_dtoa_r+0x2e8>)
 8004ecc:	e6cc      	b.n	8004c68 <_dtoa_r+0x28>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e7de      	b.n	8004e90 <_dtoa_r+0x250>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ed6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ed8:	eb0a 0903 	add.w	r9, sl, r3
 8004edc:	f109 0301 	add.w	r3, r9, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	9308      	str	r3, [sp, #32]
 8004ee4:	bfb8      	it	lt
 8004ee6:	2301      	movlt	r3, #1
 8004ee8:	e7dd      	b.n	8004ea6 <_dtoa_r+0x266>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e7f2      	b.n	8004ed4 <_dtoa_r+0x294>
 8004eee:	bf00      	nop
 8004ef0:	636f4361 	.word	0x636f4361
 8004ef4:	3fd287a7 	.word	0x3fd287a7
 8004ef8:	8b60c8b3 	.word	0x8b60c8b3
 8004efc:	3fc68a28 	.word	0x3fc68a28
 8004f00:	509f79fb 	.word	0x509f79fb
 8004f04:	3fd34413 	.word	0x3fd34413
 8004f08:	08007b1e 	.word	0x08007b1e
 8004f0c:	08007b35 	.word	0x08007b35
 8004f10:	7ff00000 	.word	0x7ff00000
 8004f14:	08007b1a 	.word	0x08007b1a
 8004f18:	08007b11 	.word	0x08007b11
 8004f1c:	08007995 	.word	0x08007995
 8004f20:	3ff80000 	.word	0x3ff80000
 8004f24:	08007ca0 	.word	0x08007ca0
 8004f28:	08007b90 	.word	0x08007b90
 8004f2c:	2401      	movs	r4, #1
 8004f2e:	2300      	movs	r3, #0
 8004f30:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f32:	9322      	str	r3, [sp, #136]	; 0x88
 8004f34:	f04f 39ff 	mov.w	r9, #4294967295
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2312      	movs	r3, #18
 8004f3c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f40:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f42:	e7b0      	b.n	8004ea6 <_dtoa_r+0x266>
 8004f44:	2301      	movs	r3, #1
 8004f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f48:	e7f4      	b.n	8004f34 <_dtoa_r+0x2f4>
 8004f4a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004f4e:	464b      	mov	r3, r9
 8004f50:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f54:	e7a7      	b.n	8004ea6 <_dtoa_r+0x266>
 8004f56:	3101      	adds	r1, #1
 8004f58:	6041      	str	r1, [r0, #4]
 8004f5a:	0052      	lsls	r2, r2, #1
 8004f5c:	e7a7      	b.n	8004eae <_dtoa_r+0x26e>
 8004f5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f60:	9a03      	ldr	r2, [sp, #12]
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	9b08      	ldr	r3, [sp, #32]
 8004f66:	2b0e      	cmp	r3, #14
 8004f68:	f200 80a8 	bhi.w	80050bc <_dtoa_r+0x47c>
 8004f6c:	2c00      	cmp	r4, #0
 8004f6e:	f000 80a5 	beq.w	80050bc <_dtoa_r+0x47c>
 8004f72:	f1ba 0f00 	cmp.w	sl, #0
 8004f76:	dd34      	ble.n	8004fe2 <_dtoa_r+0x3a2>
 8004f78:	4a9a      	ldr	r2, [pc, #616]	; (80051e4 <_dtoa_r+0x5a4>)
 8004f7a:	f00a 030f 	and.w	r3, sl, #15
 8004f7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f82:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004f86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f8e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004f92:	d016      	beq.n	8004fc2 <_dtoa_r+0x382>
 8004f94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f98:	4b93      	ldr	r3, [pc, #588]	; (80051e8 <_dtoa_r+0x5a8>)
 8004f9a:	2703      	movs	r7, #3
 8004f9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fa0:	f7fb fbc4 	bl	800072c <__aeabi_ddiv>
 8004fa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fa8:	f004 040f 	and.w	r4, r4, #15
 8004fac:	4e8e      	ldr	r6, [pc, #568]	; (80051e8 <_dtoa_r+0x5a8>)
 8004fae:	b954      	cbnz	r4, 8004fc6 <_dtoa_r+0x386>
 8004fb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fb8:	f7fb fbb8 	bl	800072c <__aeabi_ddiv>
 8004fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fc0:	e029      	b.n	8005016 <_dtoa_r+0x3d6>
 8004fc2:	2702      	movs	r7, #2
 8004fc4:	e7f2      	b.n	8004fac <_dtoa_r+0x36c>
 8004fc6:	07e1      	lsls	r1, r4, #31
 8004fc8:	d508      	bpl.n	8004fdc <_dtoa_r+0x39c>
 8004fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fd2:	f7fb fa81 	bl	80004d8 <__aeabi_dmul>
 8004fd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fda:	3701      	adds	r7, #1
 8004fdc:	1064      	asrs	r4, r4, #1
 8004fde:	3608      	adds	r6, #8
 8004fe0:	e7e5      	b.n	8004fae <_dtoa_r+0x36e>
 8004fe2:	f000 80a5 	beq.w	8005130 <_dtoa_r+0x4f0>
 8004fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fea:	f1ca 0400 	rsb	r4, sl, #0
 8004fee:	4b7d      	ldr	r3, [pc, #500]	; (80051e4 <_dtoa_r+0x5a4>)
 8004ff0:	f004 020f 	and.w	r2, r4, #15
 8004ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f7fb fa6c 	bl	80004d8 <__aeabi_dmul>
 8005000:	2702      	movs	r7, #2
 8005002:	2300      	movs	r3, #0
 8005004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005008:	4e77      	ldr	r6, [pc, #476]	; (80051e8 <_dtoa_r+0x5a8>)
 800500a:	1124      	asrs	r4, r4, #4
 800500c:	2c00      	cmp	r4, #0
 800500e:	f040 8084 	bne.w	800511a <_dtoa_r+0x4da>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1d2      	bne.n	8004fbc <_dtoa_r+0x37c>
 8005016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 808b 	beq.w	8005134 <_dtoa_r+0x4f4>
 800501e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005022:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800502a:	2200      	movs	r2, #0
 800502c:	4b6f      	ldr	r3, [pc, #444]	; (80051ec <_dtoa_r+0x5ac>)
 800502e:	f7fb fcc5 	bl	80009bc <__aeabi_dcmplt>
 8005032:	2800      	cmp	r0, #0
 8005034:	d07e      	beq.n	8005134 <_dtoa_r+0x4f4>
 8005036:	9b08      	ldr	r3, [sp, #32]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d07b      	beq.n	8005134 <_dtoa_r+0x4f4>
 800503c:	f1b9 0f00 	cmp.w	r9, #0
 8005040:	dd38      	ble.n	80050b4 <_dtoa_r+0x474>
 8005042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005046:	2200      	movs	r2, #0
 8005048:	4b69      	ldr	r3, [pc, #420]	; (80051f0 <_dtoa_r+0x5b0>)
 800504a:	f7fb fa45 	bl	80004d8 <__aeabi_dmul>
 800504e:	464c      	mov	r4, r9
 8005050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005054:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005058:	3701      	adds	r7, #1
 800505a:	4638      	mov	r0, r7
 800505c:	f7fb f9d2 	bl	8000404 <__aeabi_i2d>
 8005060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005064:	f7fb fa38 	bl	80004d8 <__aeabi_dmul>
 8005068:	2200      	movs	r2, #0
 800506a:	4b62      	ldr	r3, [pc, #392]	; (80051f4 <_dtoa_r+0x5b4>)
 800506c:	f7fb f87e 	bl	800016c <__adddf3>
 8005070:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005074:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005078:	9611      	str	r6, [sp, #68]	; 0x44
 800507a:	2c00      	cmp	r4, #0
 800507c:	d15d      	bne.n	800513a <_dtoa_r+0x4fa>
 800507e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005082:	2200      	movs	r2, #0
 8005084:	4b5c      	ldr	r3, [pc, #368]	; (80051f8 <_dtoa_r+0x5b8>)
 8005086:	f7fb f86f 	bl	8000168 <__aeabi_dsub>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005092:	4633      	mov	r3, r6
 8005094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005096:	f7fb fcaf 	bl	80009f8 <__aeabi_dcmpgt>
 800509a:	2800      	cmp	r0, #0
 800509c:	f040 829c 	bne.w	80055d8 <_dtoa_r+0x998>
 80050a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050aa:	f7fb fc87 	bl	80009bc <__aeabi_dcmplt>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	f040 8290 	bne.w	80055d4 <_dtoa_r+0x994>
 80050b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80050b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f2c0 8152 	blt.w	8005368 <_dtoa_r+0x728>
 80050c4:	f1ba 0f0e 	cmp.w	sl, #14
 80050c8:	f300 814e 	bgt.w	8005368 <_dtoa_r+0x728>
 80050cc:	4b45      	ldr	r3, [pc, #276]	; (80051e4 <_dtoa_r+0x5a4>)
 80050ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80050da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f280 80db 	bge.w	8005298 <_dtoa_r+0x658>
 80050e2:	9b08      	ldr	r3, [sp, #32]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f300 80d7 	bgt.w	8005298 <_dtoa_r+0x658>
 80050ea:	f040 8272 	bne.w	80055d2 <_dtoa_r+0x992>
 80050ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050f2:	2200      	movs	r2, #0
 80050f4:	4b40      	ldr	r3, [pc, #256]	; (80051f8 <_dtoa_r+0x5b8>)
 80050f6:	f7fb f9ef 	bl	80004d8 <__aeabi_dmul>
 80050fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050fe:	f7fb fc71 	bl	80009e4 <__aeabi_dcmpge>
 8005102:	9c08      	ldr	r4, [sp, #32]
 8005104:	4626      	mov	r6, r4
 8005106:	2800      	cmp	r0, #0
 8005108:	f040 8248 	bne.w	800559c <_dtoa_r+0x95c>
 800510c:	2331      	movs	r3, #49	; 0x31
 800510e:	9f03      	ldr	r7, [sp, #12]
 8005110:	f10a 0a01 	add.w	sl, sl, #1
 8005114:	f807 3b01 	strb.w	r3, [r7], #1
 8005118:	e244      	b.n	80055a4 <_dtoa_r+0x964>
 800511a:	07e2      	lsls	r2, r4, #31
 800511c:	d505      	bpl.n	800512a <_dtoa_r+0x4ea>
 800511e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005122:	f7fb f9d9 	bl	80004d8 <__aeabi_dmul>
 8005126:	2301      	movs	r3, #1
 8005128:	3701      	adds	r7, #1
 800512a:	1064      	asrs	r4, r4, #1
 800512c:	3608      	adds	r6, #8
 800512e:	e76d      	b.n	800500c <_dtoa_r+0x3cc>
 8005130:	2702      	movs	r7, #2
 8005132:	e770      	b.n	8005016 <_dtoa_r+0x3d6>
 8005134:	46d0      	mov	r8, sl
 8005136:	9c08      	ldr	r4, [sp, #32]
 8005138:	e78f      	b.n	800505a <_dtoa_r+0x41a>
 800513a:	9903      	ldr	r1, [sp, #12]
 800513c:	4b29      	ldr	r3, [pc, #164]	; (80051e4 <_dtoa_r+0x5a4>)
 800513e:	4421      	add	r1, r4
 8005140:	9112      	str	r1, [sp, #72]	; 0x48
 8005142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005148:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800514c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005150:	2900      	cmp	r1, #0
 8005152:	d055      	beq.n	8005200 <_dtoa_r+0x5c0>
 8005154:	2000      	movs	r0, #0
 8005156:	4929      	ldr	r1, [pc, #164]	; (80051fc <_dtoa_r+0x5bc>)
 8005158:	f7fb fae8 	bl	800072c <__aeabi_ddiv>
 800515c:	463b      	mov	r3, r7
 800515e:	4632      	mov	r2, r6
 8005160:	f7fb f802 	bl	8000168 <__aeabi_dsub>
 8005164:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005168:	9f03      	ldr	r7, [sp, #12]
 800516a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800516e:	f7fb fc63 	bl	8000a38 <__aeabi_d2iz>
 8005172:	4604      	mov	r4, r0
 8005174:	f7fb f946 	bl	8000404 <__aeabi_i2d>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005180:	f7fa fff2 	bl	8000168 <__aeabi_dsub>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	3430      	adds	r4, #48	; 0x30
 800518a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800518e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005192:	f807 4b01 	strb.w	r4, [r7], #1
 8005196:	f7fb fc11 	bl	80009bc <__aeabi_dcmplt>
 800519a:	2800      	cmp	r0, #0
 800519c:	d174      	bne.n	8005288 <_dtoa_r+0x648>
 800519e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a2:	2000      	movs	r0, #0
 80051a4:	4911      	ldr	r1, [pc, #68]	; (80051ec <_dtoa_r+0x5ac>)
 80051a6:	f7fa ffdf 	bl	8000168 <__aeabi_dsub>
 80051aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051ae:	f7fb fc05 	bl	80009bc <__aeabi_dcmplt>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	f040 80b7 	bne.w	8005326 <_dtoa_r+0x6e6>
 80051b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051ba:	429f      	cmp	r7, r3
 80051bc:	f43f af7a 	beq.w	80050b4 <_dtoa_r+0x474>
 80051c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051c4:	2200      	movs	r2, #0
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <_dtoa_r+0x5b0>)
 80051c8:	f7fb f986 	bl	80004d8 <__aeabi_dmul>
 80051cc:	2200      	movs	r2, #0
 80051ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <_dtoa_r+0x5b0>)
 80051d8:	f7fb f97e 	bl	80004d8 <__aeabi_dmul>
 80051dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051e0:	e7c3      	b.n	800516a <_dtoa_r+0x52a>
 80051e2:	bf00      	nop
 80051e4:	08007ca0 	.word	0x08007ca0
 80051e8:	08007c78 	.word	0x08007c78
 80051ec:	3ff00000 	.word	0x3ff00000
 80051f0:	40240000 	.word	0x40240000
 80051f4:	401c0000 	.word	0x401c0000
 80051f8:	40140000 	.word	0x40140000
 80051fc:	3fe00000 	.word	0x3fe00000
 8005200:	4630      	mov	r0, r6
 8005202:	4639      	mov	r1, r7
 8005204:	f7fb f968 	bl	80004d8 <__aeabi_dmul>
 8005208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800520a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800520e:	9c03      	ldr	r4, [sp, #12]
 8005210:	9314      	str	r3, [sp, #80]	; 0x50
 8005212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005216:	f7fb fc0f 	bl	8000a38 <__aeabi_d2iz>
 800521a:	9015      	str	r0, [sp, #84]	; 0x54
 800521c:	f7fb f8f2 	bl	8000404 <__aeabi_i2d>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005228:	f7fa ff9e 	bl	8000168 <__aeabi_dsub>
 800522c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800522e:	4606      	mov	r6, r0
 8005230:	3330      	adds	r3, #48	; 0x30
 8005232:	f804 3b01 	strb.w	r3, [r4], #1
 8005236:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005238:	460f      	mov	r7, r1
 800523a:	429c      	cmp	r4, r3
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	d124      	bne.n	800528c <_dtoa_r+0x64c>
 8005242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005246:	4bb0      	ldr	r3, [pc, #704]	; (8005508 <_dtoa_r+0x8c8>)
 8005248:	f7fa ff90 	bl	800016c <__adddf3>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f7fb fbd0 	bl	80009f8 <__aeabi_dcmpgt>
 8005258:	2800      	cmp	r0, #0
 800525a:	d163      	bne.n	8005324 <_dtoa_r+0x6e4>
 800525c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005260:	2000      	movs	r0, #0
 8005262:	49a9      	ldr	r1, [pc, #676]	; (8005508 <_dtoa_r+0x8c8>)
 8005264:	f7fa ff80 	bl	8000168 <__aeabi_dsub>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4630      	mov	r0, r6
 800526e:	4639      	mov	r1, r7
 8005270:	f7fb fba4 	bl	80009bc <__aeabi_dcmplt>
 8005274:	2800      	cmp	r0, #0
 8005276:	f43f af1d 	beq.w	80050b4 <_dtoa_r+0x474>
 800527a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800527c:	1e7b      	subs	r3, r7, #1
 800527e:	9314      	str	r3, [sp, #80]	; 0x50
 8005280:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005284:	2b30      	cmp	r3, #48	; 0x30
 8005286:	d0f8      	beq.n	800527a <_dtoa_r+0x63a>
 8005288:	46c2      	mov	sl, r8
 800528a:	e03b      	b.n	8005304 <_dtoa_r+0x6c4>
 800528c:	4b9f      	ldr	r3, [pc, #636]	; (800550c <_dtoa_r+0x8cc>)
 800528e:	f7fb f923 	bl	80004d8 <__aeabi_dmul>
 8005292:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005296:	e7bc      	b.n	8005212 <_dtoa_r+0x5d2>
 8005298:	9f03      	ldr	r7, [sp, #12]
 800529a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800529e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	f7fb fa41 	bl	800072c <__aeabi_ddiv>
 80052aa:	f7fb fbc5 	bl	8000a38 <__aeabi_d2iz>
 80052ae:	4604      	mov	r4, r0
 80052b0:	f7fb f8a8 	bl	8000404 <__aeabi_i2d>
 80052b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052b8:	f7fb f90e 	bl	80004d8 <__aeabi_dmul>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4640      	mov	r0, r8
 80052c2:	4649      	mov	r1, r9
 80052c4:	f7fa ff50 	bl	8000168 <__aeabi_dsub>
 80052c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80052cc:	f807 6b01 	strb.w	r6, [r7], #1
 80052d0:	9e03      	ldr	r6, [sp, #12]
 80052d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80052d6:	1bbe      	subs	r6, r7, r6
 80052d8:	45b4      	cmp	ip, r6
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	d136      	bne.n	800534e <_dtoa_r+0x70e>
 80052e0:	f7fa ff44 	bl	800016c <__adddf3>
 80052e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052e8:	4680      	mov	r8, r0
 80052ea:	4689      	mov	r9, r1
 80052ec:	f7fb fb84 	bl	80009f8 <__aeabi_dcmpgt>
 80052f0:	bb58      	cbnz	r0, 800534a <_dtoa_r+0x70a>
 80052f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052f6:	4640      	mov	r0, r8
 80052f8:	4649      	mov	r1, r9
 80052fa:	f7fb fb55 	bl	80009a8 <__aeabi_dcmpeq>
 80052fe:	b108      	cbz	r0, 8005304 <_dtoa_r+0x6c4>
 8005300:	07e1      	lsls	r1, r4, #31
 8005302:	d422      	bmi.n	800534a <_dtoa_r+0x70a>
 8005304:	4628      	mov	r0, r5
 8005306:	4659      	mov	r1, fp
 8005308:	f000 fe68 	bl	8005fdc <_Bfree>
 800530c:	2300      	movs	r3, #0
 800530e:	703b      	strb	r3, [r7, #0]
 8005310:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005312:	f10a 0001 	add.w	r0, sl, #1
 8005316:	6018      	str	r0, [r3, #0]
 8005318:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800531a:	2b00      	cmp	r3, #0
 800531c:	f43f acde 	beq.w	8004cdc <_dtoa_r+0x9c>
 8005320:	601f      	str	r7, [r3, #0]
 8005322:	e4db      	b.n	8004cdc <_dtoa_r+0x9c>
 8005324:	4627      	mov	r7, r4
 8005326:	463b      	mov	r3, r7
 8005328:	461f      	mov	r7, r3
 800532a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800532e:	2a39      	cmp	r2, #57	; 0x39
 8005330:	d107      	bne.n	8005342 <_dtoa_r+0x702>
 8005332:	9a03      	ldr	r2, [sp, #12]
 8005334:	429a      	cmp	r2, r3
 8005336:	d1f7      	bne.n	8005328 <_dtoa_r+0x6e8>
 8005338:	2230      	movs	r2, #48	; 0x30
 800533a:	9903      	ldr	r1, [sp, #12]
 800533c:	f108 0801 	add.w	r8, r8, #1
 8005340:	700a      	strb	r2, [r1, #0]
 8005342:	781a      	ldrb	r2, [r3, #0]
 8005344:	3201      	adds	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	e79e      	b.n	8005288 <_dtoa_r+0x648>
 800534a:	46d0      	mov	r8, sl
 800534c:	e7eb      	b.n	8005326 <_dtoa_r+0x6e6>
 800534e:	2200      	movs	r2, #0
 8005350:	4b6e      	ldr	r3, [pc, #440]	; (800550c <_dtoa_r+0x8cc>)
 8005352:	f7fb f8c1 	bl	80004d8 <__aeabi_dmul>
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4680      	mov	r8, r0
 800535c:	4689      	mov	r9, r1
 800535e:	f7fb fb23 	bl	80009a8 <__aeabi_dcmpeq>
 8005362:	2800      	cmp	r0, #0
 8005364:	d09b      	beq.n	800529e <_dtoa_r+0x65e>
 8005366:	e7cd      	b.n	8005304 <_dtoa_r+0x6c4>
 8005368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800536a:	2a00      	cmp	r2, #0
 800536c:	f000 80d0 	beq.w	8005510 <_dtoa_r+0x8d0>
 8005370:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005372:	2a01      	cmp	r2, #1
 8005374:	f300 80ae 	bgt.w	80054d4 <_dtoa_r+0x894>
 8005378:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800537a:	2a00      	cmp	r2, #0
 800537c:	f000 80a6 	beq.w	80054cc <_dtoa_r+0x88c>
 8005380:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005384:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005386:	9f06      	ldr	r7, [sp, #24]
 8005388:	9a06      	ldr	r2, [sp, #24]
 800538a:	2101      	movs	r1, #1
 800538c:	441a      	add	r2, r3
 800538e:	9206      	str	r2, [sp, #24]
 8005390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005392:	4628      	mov	r0, r5
 8005394:	441a      	add	r2, r3
 8005396:	9209      	str	r2, [sp, #36]	; 0x24
 8005398:	f000 ff20 	bl	80061dc <__i2b>
 800539c:	4606      	mov	r6, r0
 800539e:	2f00      	cmp	r7, #0
 80053a0:	dd0c      	ble.n	80053bc <_dtoa_r+0x77c>
 80053a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dd09      	ble.n	80053bc <_dtoa_r+0x77c>
 80053a8:	42bb      	cmp	r3, r7
 80053aa:	bfa8      	it	ge
 80053ac:	463b      	movge	r3, r7
 80053ae:	9a06      	ldr	r2, [sp, #24]
 80053b0:	1aff      	subs	r7, r7, r3
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	9206      	str	r2, [sp, #24]
 80053b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	9309      	str	r3, [sp, #36]	; 0x24
 80053bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053be:	b1f3      	cbz	r3, 80053fe <_dtoa_r+0x7be>
 80053c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80a8 	beq.w	8005518 <_dtoa_r+0x8d8>
 80053c8:	2c00      	cmp	r4, #0
 80053ca:	dd10      	ble.n	80053ee <_dtoa_r+0x7ae>
 80053cc:	4631      	mov	r1, r6
 80053ce:	4622      	mov	r2, r4
 80053d0:	4628      	mov	r0, r5
 80053d2:	f000 ffc1 	bl	8006358 <__pow5mult>
 80053d6:	465a      	mov	r2, fp
 80053d8:	4601      	mov	r1, r0
 80053da:	4606      	mov	r6, r0
 80053dc:	4628      	mov	r0, r5
 80053de:	f000 ff13 	bl	8006208 <__multiply>
 80053e2:	4680      	mov	r8, r0
 80053e4:	4659      	mov	r1, fp
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fdf8 	bl	8005fdc <_Bfree>
 80053ec:	46c3      	mov	fp, r8
 80053ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f0:	1b1a      	subs	r2, r3, r4
 80053f2:	d004      	beq.n	80053fe <_dtoa_r+0x7be>
 80053f4:	4659      	mov	r1, fp
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 ffae 	bl	8006358 <__pow5mult>
 80053fc:	4683      	mov	fp, r0
 80053fe:	2101      	movs	r1, #1
 8005400:	4628      	mov	r0, r5
 8005402:	f000 feeb 	bl	80061dc <__i2b>
 8005406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005408:	4604      	mov	r4, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	f340 8086 	ble.w	800551c <_dtoa_r+0x8dc>
 8005410:	461a      	mov	r2, r3
 8005412:	4601      	mov	r1, r0
 8005414:	4628      	mov	r0, r5
 8005416:	f000 ff9f 	bl	8006358 <__pow5mult>
 800541a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800541c:	4604      	mov	r4, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	dd7f      	ble.n	8005522 <_dtoa_r+0x8e2>
 8005422:	f04f 0800 	mov.w	r8, #0
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800542c:	6918      	ldr	r0, [r3, #16]
 800542e:	f000 fe87 	bl	8006140 <__hi0bits>
 8005432:	f1c0 0020 	rsb	r0, r0, #32
 8005436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005438:	4418      	add	r0, r3
 800543a:	f010 001f 	ands.w	r0, r0, #31
 800543e:	f000 8092 	beq.w	8005566 <_dtoa_r+0x926>
 8005442:	f1c0 0320 	rsb	r3, r0, #32
 8005446:	2b04      	cmp	r3, #4
 8005448:	f340 808a 	ble.w	8005560 <_dtoa_r+0x920>
 800544c:	f1c0 001c 	rsb	r0, r0, #28
 8005450:	9b06      	ldr	r3, [sp, #24]
 8005452:	4407      	add	r7, r0
 8005454:	4403      	add	r3, r0
 8005456:	9306      	str	r3, [sp, #24]
 8005458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545a:	4403      	add	r3, r0
 800545c:	9309      	str	r3, [sp, #36]	; 0x24
 800545e:	9b06      	ldr	r3, [sp, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	dd05      	ble.n	8005470 <_dtoa_r+0x830>
 8005464:	4659      	mov	r1, fp
 8005466:	461a      	mov	r2, r3
 8005468:	4628      	mov	r0, r5
 800546a:	f000 ffcf 	bl	800640c <__lshift>
 800546e:	4683      	mov	fp, r0
 8005470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	dd05      	ble.n	8005482 <_dtoa_r+0x842>
 8005476:	4621      	mov	r1, r4
 8005478:	461a      	mov	r2, r3
 800547a:	4628      	mov	r0, r5
 800547c:	f000 ffc6 	bl	800640c <__lshift>
 8005480:	4604      	mov	r4, r0
 8005482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d070      	beq.n	800556a <_dtoa_r+0x92a>
 8005488:	4621      	mov	r1, r4
 800548a:	4658      	mov	r0, fp
 800548c:	f001 f82e 	bl	80064ec <__mcmp>
 8005490:	2800      	cmp	r0, #0
 8005492:	da6a      	bge.n	800556a <_dtoa_r+0x92a>
 8005494:	2300      	movs	r3, #0
 8005496:	4659      	mov	r1, fp
 8005498:	220a      	movs	r2, #10
 800549a:	4628      	mov	r0, r5
 800549c:	f000 fdc0 	bl	8006020 <__multadd>
 80054a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054a2:	4683      	mov	fp, r0
 80054a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8194 	beq.w	80057d6 <_dtoa_r+0xb96>
 80054ae:	4631      	mov	r1, r6
 80054b0:	2300      	movs	r3, #0
 80054b2:	220a      	movs	r2, #10
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 fdb3 	bl	8006020 <__multadd>
 80054ba:	f1b9 0f00 	cmp.w	r9, #0
 80054be:	4606      	mov	r6, r0
 80054c0:	f300 8093 	bgt.w	80055ea <_dtoa_r+0x9aa>
 80054c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	dc57      	bgt.n	800557a <_dtoa_r+0x93a>
 80054ca:	e08e      	b.n	80055ea <_dtoa_r+0x9aa>
 80054cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054d2:	e757      	b.n	8005384 <_dtoa_r+0x744>
 80054d4:	9b08      	ldr	r3, [sp, #32]
 80054d6:	1e5c      	subs	r4, r3, #1
 80054d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054da:	42a3      	cmp	r3, r4
 80054dc:	bfb7      	itett	lt
 80054de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054e0:	1b1c      	subge	r4, r3, r4
 80054e2:	1ae2      	sublt	r2, r4, r3
 80054e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80054e6:	bfbe      	ittt	lt
 80054e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80054ea:	189b      	addlt	r3, r3, r2
 80054ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80054ee:	9b08      	ldr	r3, [sp, #32]
 80054f0:	bfb8      	it	lt
 80054f2:	2400      	movlt	r4, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bfbb      	ittet	lt
 80054f8:	9b06      	ldrlt	r3, [sp, #24]
 80054fa:	9a08      	ldrlt	r2, [sp, #32]
 80054fc:	9f06      	ldrge	r7, [sp, #24]
 80054fe:	1a9f      	sublt	r7, r3, r2
 8005500:	bfac      	ite	ge
 8005502:	9b08      	ldrge	r3, [sp, #32]
 8005504:	2300      	movlt	r3, #0
 8005506:	e73f      	b.n	8005388 <_dtoa_r+0x748>
 8005508:	3fe00000 	.word	0x3fe00000
 800550c:	40240000 	.word	0x40240000
 8005510:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005512:	9f06      	ldr	r7, [sp, #24]
 8005514:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005516:	e742      	b.n	800539e <_dtoa_r+0x75e>
 8005518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800551a:	e76b      	b.n	80053f4 <_dtoa_r+0x7b4>
 800551c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800551e:	2b01      	cmp	r3, #1
 8005520:	dc19      	bgt.n	8005556 <_dtoa_r+0x916>
 8005522:	9b04      	ldr	r3, [sp, #16]
 8005524:	b9bb      	cbnz	r3, 8005556 <_dtoa_r+0x916>
 8005526:	9b05      	ldr	r3, [sp, #20]
 8005528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800552c:	b99b      	cbnz	r3, 8005556 <_dtoa_r+0x916>
 800552e:	9b05      	ldr	r3, [sp, #20]
 8005530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005534:	0d1b      	lsrs	r3, r3, #20
 8005536:	051b      	lsls	r3, r3, #20
 8005538:	b183      	cbz	r3, 800555c <_dtoa_r+0x91c>
 800553a:	f04f 0801 	mov.w	r8, #1
 800553e:	9b06      	ldr	r3, [sp, #24]
 8005540:	3301      	adds	r3, #1
 8005542:	9306      	str	r3, [sp, #24]
 8005544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005546:	3301      	adds	r3, #1
 8005548:	9309      	str	r3, [sp, #36]	; 0x24
 800554a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	f47f af6a 	bne.w	8005426 <_dtoa_r+0x7e6>
 8005552:	2001      	movs	r0, #1
 8005554:	e76f      	b.n	8005436 <_dtoa_r+0x7f6>
 8005556:	f04f 0800 	mov.w	r8, #0
 800555a:	e7f6      	b.n	800554a <_dtoa_r+0x90a>
 800555c:	4698      	mov	r8, r3
 800555e:	e7f4      	b.n	800554a <_dtoa_r+0x90a>
 8005560:	f43f af7d 	beq.w	800545e <_dtoa_r+0x81e>
 8005564:	4618      	mov	r0, r3
 8005566:	301c      	adds	r0, #28
 8005568:	e772      	b.n	8005450 <_dtoa_r+0x810>
 800556a:	9b08      	ldr	r3, [sp, #32]
 800556c:	2b00      	cmp	r3, #0
 800556e:	dc36      	bgt.n	80055de <_dtoa_r+0x99e>
 8005570:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005572:	2b02      	cmp	r3, #2
 8005574:	dd33      	ble.n	80055de <_dtoa_r+0x99e>
 8005576:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800557a:	f1b9 0f00 	cmp.w	r9, #0
 800557e:	d10d      	bne.n	800559c <_dtoa_r+0x95c>
 8005580:	4621      	mov	r1, r4
 8005582:	464b      	mov	r3, r9
 8005584:	2205      	movs	r2, #5
 8005586:	4628      	mov	r0, r5
 8005588:	f000 fd4a 	bl	8006020 <__multadd>
 800558c:	4601      	mov	r1, r0
 800558e:	4604      	mov	r4, r0
 8005590:	4658      	mov	r0, fp
 8005592:	f000 ffab 	bl	80064ec <__mcmp>
 8005596:	2800      	cmp	r0, #0
 8005598:	f73f adb8 	bgt.w	800510c <_dtoa_r+0x4cc>
 800559c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800559e:	9f03      	ldr	r7, [sp, #12]
 80055a0:	ea6f 0a03 	mvn.w	sl, r3
 80055a4:	f04f 0800 	mov.w	r8, #0
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 fd16 	bl	8005fdc <_Bfree>
 80055b0:	2e00      	cmp	r6, #0
 80055b2:	f43f aea7 	beq.w	8005304 <_dtoa_r+0x6c4>
 80055b6:	f1b8 0f00 	cmp.w	r8, #0
 80055ba:	d005      	beq.n	80055c8 <_dtoa_r+0x988>
 80055bc:	45b0      	cmp	r8, r6
 80055be:	d003      	beq.n	80055c8 <_dtoa_r+0x988>
 80055c0:	4641      	mov	r1, r8
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 fd0a 	bl	8005fdc <_Bfree>
 80055c8:	4631      	mov	r1, r6
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 fd06 	bl	8005fdc <_Bfree>
 80055d0:	e698      	b.n	8005304 <_dtoa_r+0x6c4>
 80055d2:	2400      	movs	r4, #0
 80055d4:	4626      	mov	r6, r4
 80055d6:	e7e1      	b.n	800559c <_dtoa_r+0x95c>
 80055d8:	46c2      	mov	sl, r8
 80055da:	4626      	mov	r6, r4
 80055dc:	e596      	b.n	800510c <_dtoa_r+0x4cc>
 80055de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80fd 	beq.w	80057e4 <_dtoa_r+0xba4>
 80055ea:	2f00      	cmp	r7, #0
 80055ec:	dd05      	ble.n	80055fa <_dtoa_r+0x9ba>
 80055ee:	4631      	mov	r1, r6
 80055f0:	463a      	mov	r2, r7
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 ff0a 	bl	800640c <__lshift>
 80055f8:	4606      	mov	r6, r0
 80055fa:	f1b8 0f00 	cmp.w	r8, #0
 80055fe:	d05c      	beq.n	80056ba <_dtoa_r+0xa7a>
 8005600:	4628      	mov	r0, r5
 8005602:	6871      	ldr	r1, [r6, #4]
 8005604:	f000 fcaa 	bl	8005f5c <_Balloc>
 8005608:	4607      	mov	r7, r0
 800560a:	b928      	cbnz	r0, 8005618 <_dtoa_r+0x9d8>
 800560c:	4602      	mov	r2, r0
 800560e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005612:	4b7f      	ldr	r3, [pc, #508]	; (8005810 <_dtoa_r+0xbd0>)
 8005614:	f7ff bb28 	b.w	8004c68 <_dtoa_r+0x28>
 8005618:	6932      	ldr	r2, [r6, #16]
 800561a:	f106 010c 	add.w	r1, r6, #12
 800561e:	3202      	adds	r2, #2
 8005620:	0092      	lsls	r2, r2, #2
 8005622:	300c      	adds	r0, #12
 8005624:	f000 fc8c 	bl	8005f40 <memcpy>
 8005628:	2201      	movs	r2, #1
 800562a:	4639      	mov	r1, r7
 800562c:	4628      	mov	r0, r5
 800562e:	f000 feed 	bl	800640c <__lshift>
 8005632:	46b0      	mov	r8, r6
 8005634:	4606      	mov	r6, r0
 8005636:	9b03      	ldr	r3, [sp, #12]
 8005638:	3301      	adds	r3, #1
 800563a:	9308      	str	r3, [sp, #32]
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	444b      	add	r3, r9
 8005640:	930a      	str	r3, [sp, #40]	; 0x28
 8005642:	9b04      	ldr	r3, [sp, #16]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	9309      	str	r3, [sp, #36]	; 0x24
 800564a:	9b08      	ldr	r3, [sp, #32]
 800564c:	4621      	mov	r1, r4
 800564e:	3b01      	subs	r3, #1
 8005650:	4658      	mov	r0, fp
 8005652:	9304      	str	r3, [sp, #16]
 8005654:	f7ff fa68 	bl	8004b28 <quorem>
 8005658:	4603      	mov	r3, r0
 800565a:	4641      	mov	r1, r8
 800565c:	3330      	adds	r3, #48	; 0x30
 800565e:	9006      	str	r0, [sp, #24]
 8005660:	4658      	mov	r0, fp
 8005662:	930b      	str	r3, [sp, #44]	; 0x2c
 8005664:	f000 ff42 	bl	80064ec <__mcmp>
 8005668:	4632      	mov	r2, r6
 800566a:	4681      	mov	r9, r0
 800566c:	4621      	mov	r1, r4
 800566e:	4628      	mov	r0, r5
 8005670:	f000 ff58 	bl	8006524 <__mdiff>
 8005674:	68c2      	ldr	r2, [r0, #12]
 8005676:	4607      	mov	r7, r0
 8005678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800567a:	bb02      	cbnz	r2, 80056be <_dtoa_r+0xa7e>
 800567c:	4601      	mov	r1, r0
 800567e:	4658      	mov	r0, fp
 8005680:	f000 ff34 	bl	80064ec <__mcmp>
 8005684:	4602      	mov	r2, r0
 8005686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005688:	4639      	mov	r1, r7
 800568a:	4628      	mov	r0, r5
 800568c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005690:	f000 fca4 	bl	8005fdc <_Bfree>
 8005694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005698:	9f08      	ldr	r7, [sp, #32]
 800569a:	ea43 0102 	orr.w	r1, r3, r2
 800569e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a0:	430b      	orrs	r3, r1
 80056a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056a4:	d10d      	bne.n	80056c2 <_dtoa_r+0xa82>
 80056a6:	2b39      	cmp	r3, #57	; 0x39
 80056a8:	d029      	beq.n	80056fe <_dtoa_r+0xabe>
 80056aa:	f1b9 0f00 	cmp.w	r9, #0
 80056ae:	dd01      	ble.n	80056b4 <_dtoa_r+0xa74>
 80056b0:	9b06      	ldr	r3, [sp, #24]
 80056b2:	3331      	adds	r3, #49	; 0x31
 80056b4:	9a04      	ldr	r2, [sp, #16]
 80056b6:	7013      	strb	r3, [r2, #0]
 80056b8:	e776      	b.n	80055a8 <_dtoa_r+0x968>
 80056ba:	4630      	mov	r0, r6
 80056bc:	e7b9      	b.n	8005632 <_dtoa_r+0x9f2>
 80056be:	2201      	movs	r2, #1
 80056c0:	e7e2      	b.n	8005688 <_dtoa_r+0xa48>
 80056c2:	f1b9 0f00 	cmp.w	r9, #0
 80056c6:	db06      	blt.n	80056d6 <_dtoa_r+0xa96>
 80056c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80056ca:	ea41 0909 	orr.w	r9, r1, r9
 80056ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056d0:	ea59 0101 	orrs.w	r1, r9, r1
 80056d4:	d120      	bne.n	8005718 <_dtoa_r+0xad8>
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	ddec      	ble.n	80056b4 <_dtoa_r+0xa74>
 80056da:	4659      	mov	r1, fp
 80056dc:	2201      	movs	r2, #1
 80056de:	4628      	mov	r0, r5
 80056e0:	9308      	str	r3, [sp, #32]
 80056e2:	f000 fe93 	bl	800640c <__lshift>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4683      	mov	fp, r0
 80056ea:	f000 feff 	bl	80064ec <__mcmp>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	9b08      	ldr	r3, [sp, #32]
 80056f2:	dc02      	bgt.n	80056fa <_dtoa_r+0xaba>
 80056f4:	d1de      	bne.n	80056b4 <_dtoa_r+0xa74>
 80056f6:	07da      	lsls	r2, r3, #31
 80056f8:	d5dc      	bpl.n	80056b4 <_dtoa_r+0xa74>
 80056fa:	2b39      	cmp	r3, #57	; 0x39
 80056fc:	d1d8      	bne.n	80056b0 <_dtoa_r+0xa70>
 80056fe:	2339      	movs	r3, #57	; 0x39
 8005700:	9a04      	ldr	r2, [sp, #16]
 8005702:	7013      	strb	r3, [r2, #0]
 8005704:	463b      	mov	r3, r7
 8005706:	461f      	mov	r7, r3
 8005708:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800570c:	3b01      	subs	r3, #1
 800570e:	2a39      	cmp	r2, #57	; 0x39
 8005710:	d050      	beq.n	80057b4 <_dtoa_r+0xb74>
 8005712:	3201      	adds	r2, #1
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	e747      	b.n	80055a8 <_dtoa_r+0x968>
 8005718:	2a00      	cmp	r2, #0
 800571a:	dd03      	ble.n	8005724 <_dtoa_r+0xae4>
 800571c:	2b39      	cmp	r3, #57	; 0x39
 800571e:	d0ee      	beq.n	80056fe <_dtoa_r+0xabe>
 8005720:	3301      	adds	r3, #1
 8005722:	e7c7      	b.n	80056b4 <_dtoa_r+0xa74>
 8005724:	9a08      	ldr	r2, [sp, #32]
 8005726:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005728:	f802 3c01 	strb.w	r3, [r2, #-1]
 800572c:	428a      	cmp	r2, r1
 800572e:	d02a      	beq.n	8005786 <_dtoa_r+0xb46>
 8005730:	4659      	mov	r1, fp
 8005732:	2300      	movs	r3, #0
 8005734:	220a      	movs	r2, #10
 8005736:	4628      	mov	r0, r5
 8005738:	f000 fc72 	bl	8006020 <__multadd>
 800573c:	45b0      	cmp	r8, r6
 800573e:	4683      	mov	fp, r0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	f04f 020a 	mov.w	r2, #10
 8005748:	4641      	mov	r1, r8
 800574a:	4628      	mov	r0, r5
 800574c:	d107      	bne.n	800575e <_dtoa_r+0xb1e>
 800574e:	f000 fc67 	bl	8006020 <__multadd>
 8005752:	4680      	mov	r8, r0
 8005754:	4606      	mov	r6, r0
 8005756:	9b08      	ldr	r3, [sp, #32]
 8005758:	3301      	adds	r3, #1
 800575a:	9308      	str	r3, [sp, #32]
 800575c:	e775      	b.n	800564a <_dtoa_r+0xa0a>
 800575e:	f000 fc5f 	bl	8006020 <__multadd>
 8005762:	4631      	mov	r1, r6
 8005764:	4680      	mov	r8, r0
 8005766:	2300      	movs	r3, #0
 8005768:	220a      	movs	r2, #10
 800576a:	4628      	mov	r0, r5
 800576c:	f000 fc58 	bl	8006020 <__multadd>
 8005770:	4606      	mov	r6, r0
 8005772:	e7f0      	b.n	8005756 <_dtoa_r+0xb16>
 8005774:	f1b9 0f00 	cmp.w	r9, #0
 8005778:	bfcc      	ite	gt
 800577a:	464f      	movgt	r7, r9
 800577c:	2701      	movle	r7, #1
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	9a03      	ldr	r2, [sp, #12]
 8005784:	4417      	add	r7, r2
 8005786:	4659      	mov	r1, fp
 8005788:	2201      	movs	r2, #1
 800578a:	4628      	mov	r0, r5
 800578c:	9308      	str	r3, [sp, #32]
 800578e:	f000 fe3d 	bl	800640c <__lshift>
 8005792:	4621      	mov	r1, r4
 8005794:	4683      	mov	fp, r0
 8005796:	f000 fea9 	bl	80064ec <__mcmp>
 800579a:	2800      	cmp	r0, #0
 800579c:	dcb2      	bgt.n	8005704 <_dtoa_r+0xac4>
 800579e:	d102      	bne.n	80057a6 <_dtoa_r+0xb66>
 80057a0:	9b08      	ldr	r3, [sp, #32]
 80057a2:	07db      	lsls	r3, r3, #31
 80057a4:	d4ae      	bmi.n	8005704 <_dtoa_r+0xac4>
 80057a6:	463b      	mov	r3, r7
 80057a8:	461f      	mov	r7, r3
 80057aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057ae:	2a30      	cmp	r2, #48	; 0x30
 80057b0:	d0fa      	beq.n	80057a8 <_dtoa_r+0xb68>
 80057b2:	e6f9      	b.n	80055a8 <_dtoa_r+0x968>
 80057b4:	9a03      	ldr	r2, [sp, #12]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d1a5      	bne.n	8005706 <_dtoa_r+0xac6>
 80057ba:	2331      	movs	r3, #49	; 0x31
 80057bc:	f10a 0a01 	add.w	sl, sl, #1
 80057c0:	e779      	b.n	80056b6 <_dtoa_r+0xa76>
 80057c2:	4b14      	ldr	r3, [pc, #80]	; (8005814 <_dtoa_r+0xbd4>)
 80057c4:	f7ff baa8 	b.w	8004d18 <_dtoa_r+0xd8>
 80057c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f47f aa81 	bne.w	8004cd2 <_dtoa_r+0x92>
 80057d0:	4b11      	ldr	r3, [pc, #68]	; (8005818 <_dtoa_r+0xbd8>)
 80057d2:	f7ff baa1 	b.w	8004d18 <_dtoa_r+0xd8>
 80057d6:	f1b9 0f00 	cmp.w	r9, #0
 80057da:	dc03      	bgt.n	80057e4 <_dtoa_r+0xba4>
 80057dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057de:	2b02      	cmp	r3, #2
 80057e0:	f73f aecb 	bgt.w	800557a <_dtoa_r+0x93a>
 80057e4:	9f03      	ldr	r7, [sp, #12]
 80057e6:	4621      	mov	r1, r4
 80057e8:	4658      	mov	r0, fp
 80057ea:	f7ff f99d 	bl	8004b28 <quorem>
 80057ee:	9a03      	ldr	r2, [sp, #12]
 80057f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80057f4:	f807 3b01 	strb.w	r3, [r7], #1
 80057f8:	1aba      	subs	r2, r7, r2
 80057fa:	4591      	cmp	r9, r2
 80057fc:	ddba      	ble.n	8005774 <_dtoa_r+0xb34>
 80057fe:	4659      	mov	r1, fp
 8005800:	2300      	movs	r3, #0
 8005802:	220a      	movs	r2, #10
 8005804:	4628      	mov	r0, r5
 8005806:	f000 fc0b 	bl	8006020 <__multadd>
 800580a:	4683      	mov	fp, r0
 800580c:	e7eb      	b.n	80057e6 <_dtoa_r+0xba6>
 800580e:	bf00      	nop
 8005810:	08007b90 	.word	0x08007b90
 8005814:	08007994 	.word	0x08007994
 8005818:	08007b11 	.word	0x08007b11

0800581c <rshift>:
 800581c:	6903      	ldr	r3, [r0, #16]
 800581e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005822:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005826:	f100 0414 	add.w	r4, r0, #20
 800582a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800582e:	dd46      	ble.n	80058be <rshift+0xa2>
 8005830:	f011 011f 	ands.w	r1, r1, #31
 8005834:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005838:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800583c:	d10c      	bne.n	8005858 <rshift+0x3c>
 800583e:	4629      	mov	r1, r5
 8005840:	f100 0710 	add.w	r7, r0, #16
 8005844:	42b1      	cmp	r1, r6
 8005846:	d335      	bcc.n	80058b4 <rshift+0x98>
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	1eea      	subs	r2, r5, #3
 800584e:	4296      	cmp	r6, r2
 8005850:	bf38      	it	cc
 8005852:	2300      	movcc	r3, #0
 8005854:	4423      	add	r3, r4
 8005856:	e015      	b.n	8005884 <rshift+0x68>
 8005858:	46a1      	mov	r9, r4
 800585a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800585e:	f1c1 0820 	rsb	r8, r1, #32
 8005862:	40cf      	lsrs	r7, r1
 8005864:	f105 0e04 	add.w	lr, r5, #4
 8005868:	4576      	cmp	r6, lr
 800586a:	46f4      	mov	ip, lr
 800586c:	d816      	bhi.n	800589c <rshift+0x80>
 800586e:	1a9a      	subs	r2, r3, r2
 8005870:	0092      	lsls	r2, r2, #2
 8005872:	3a04      	subs	r2, #4
 8005874:	3501      	adds	r5, #1
 8005876:	42ae      	cmp	r6, r5
 8005878:	bf38      	it	cc
 800587a:	2200      	movcc	r2, #0
 800587c:	18a3      	adds	r3, r4, r2
 800587e:	50a7      	str	r7, [r4, r2]
 8005880:	b107      	cbz	r7, 8005884 <rshift+0x68>
 8005882:	3304      	adds	r3, #4
 8005884:	42a3      	cmp	r3, r4
 8005886:	eba3 0204 	sub.w	r2, r3, r4
 800588a:	bf08      	it	eq
 800588c:	2300      	moveq	r3, #0
 800588e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005892:	6102      	str	r2, [r0, #16]
 8005894:	bf08      	it	eq
 8005896:	6143      	streq	r3, [r0, #20]
 8005898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800589c:	f8dc c000 	ldr.w	ip, [ip]
 80058a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80058a4:	ea4c 0707 	orr.w	r7, ip, r7
 80058a8:	f849 7b04 	str.w	r7, [r9], #4
 80058ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80058b0:	40cf      	lsrs	r7, r1
 80058b2:	e7d9      	b.n	8005868 <rshift+0x4c>
 80058b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80058b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80058bc:	e7c2      	b.n	8005844 <rshift+0x28>
 80058be:	4623      	mov	r3, r4
 80058c0:	e7e0      	b.n	8005884 <rshift+0x68>

080058c2 <__hexdig_fun>:
 80058c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d802      	bhi.n	80058d0 <__hexdig_fun+0xe>
 80058ca:	3820      	subs	r0, #32
 80058cc:	b2c0      	uxtb	r0, r0
 80058ce:	4770      	bx	lr
 80058d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d801      	bhi.n	80058dc <__hexdig_fun+0x1a>
 80058d8:	3847      	subs	r0, #71	; 0x47
 80058da:	e7f7      	b.n	80058cc <__hexdig_fun+0xa>
 80058dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80058e0:	2b05      	cmp	r3, #5
 80058e2:	d801      	bhi.n	80058e8 <__hexdig_fun+0x26>
 80058e4:	3827      	subs	r0, #39	; 0x27
 80058e6:	e7f1      	b.n	80058cc <__hexdig_fun+0xa>
 80058e8:	2000      	movs	r0, #0
 80058ea:	4770      	bx	lr

080058ec <__gethex>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	b08b      	sub	sp, #44	; 0x2c
 80058f2:	9305      	str	r3, [sp, #20]
 80058f4:	4bb2      	ldr	r3, [pc, #712]	; (8005bc0 <__gethex+0x2d4>)
 80058f6:	9002      	str	r0, [sp, #8]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	468b      	mov	fp, r1
 80058fc:	4618      	mov	r0, r3
 80058fe:	4690      	mov	r8, r2
 8005900:	9303      	str	r3, [sp, #12]
 8005902:	f7fa fc25 	bl	8000150 <strlen>
 8005906:	4682      	mov	sl, r0
 8005908:	9b03      	ldr	r3, [sp, #12]
 800590a:	f8db 2000 	ldr.w	r2, [fp]
 800590e:	4403      	add	r3, r0
 8005910:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005914:	9306      	str	r3, [sp, #24]
 8005916:	1c93      	adds	r3, r2, #2
 8005918:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800591c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005920:	32fe      	adds	r2, #254	; 0xfe
 8005922:	18d1      	adds	r1, r2, r3
 8005924:	461f      	mov	r7, r3
 8005926:	f813 0b01 	ldrb.w	r0, [r3], #1
 800592a:	9101      	str	r1, [sp, #4]
 800592c:	2830      	cmp	r0, #48	; 0x30
 800592e:	d0f8      	beq.n	8005922 <__gethex+0x36>
 8005930:	f7ff ffc7 	bl	80058c2 <__hexdig_fun>
 8005934:	4604      	mov	r4, r0
 8005936:	2800      	cmp	r0, #0
 8005938:	d13a      	bne.n	80059b0 <__gethex+0xc4>
 800593a:	4652      	mov	r2, sl
 800593c:	4638      	mov	r0, r7
 800593e:	9903      	ldr	r1, [sp, #12]
 8005940:	f001 fa26 	bl	8006d90 <strncmp>
 8005944:	4605      	mov	r5, r0
 8005946:	2800      	cmp	r0, #0
 8005948:	d166      	bne.n	8005a18 <__gethex+0x12c>
 800594a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800594e:	eb07 060a 	add.w	r6, r7, sl
 8005952:	f7ff ffb6 	bl	80058c2 <__hexdig_fun>
 8005956:	2800      	cmp	r0, #0
 8005958:	d060      	beq.n	8005a1c <__gethex+0x130>
 800595a:	4633      	mov	r3, r6
 800595c:	7818      	ldrb	r0, [r3, #0]
 800595e:	461f      	mov	r7, r3
 8005960:	2830      	cmp	r0, #48	; 0x30
 8005962:	f103 0301 	add.w	r3, r3, #1
 8005966:	d0f9      	beq.n	800595c <__gethex+0x70>
 8005968:	f7ff ffab 	bl	80058c2 <__hexdig_fun>
 800596c:	2301      	movs	r3, #1
 800596e:	fab0 f480 	clz	r4, r0
 8005972:	4635      	mov	r5, r6
 8005974:	0964      	lsrs	r4, r4, #5
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	463a      	mov	r2, r7
 800597a:	4616      	mov	r6, r2
 800597c:	7830      	ldrb	r0, [r6, #0]
 800597e:	3201      	adds	r2, #1
 8005980:	f7ff ff9f 	bl	80058c2 <__hexdig_fun>
 8005984:	2800      	cmp	r0, #0
 8005986:	d1f8      	bne.n	800597a <__gethex+0x8e>
 8005988:	4652      	mov	r2, sl
 800598a:	4630      	mov	r0, r6
 800598c:	9903      	ldr	r1, [sp, #12]
 800598e:	f001 f9ff 	bl	8006d90 <strncmp>
 8005992:	b980      	cbnz	r0, 80059b6 <__gethex+0xca>
 8005994:	b94d      	cbnz	r5, 80059aa <__gethex+0xbe>
 8005996:	eb06 050a 	add.w	r5, r6, sl
 800599a:	462a      	mov	r2, r5
 800599c:	4616      	mov	r6, r2
 800599e:	7830      	ldrb	r0, [r6, #0]
 80059a0:	3201      	adds	r2, #1
 80059a2:	f7ff ff8e 	bl	80058c2 <__hexdig_fun>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d1f8      	bne.n	800599c <__gethex+0xb0>
 80059aa:	1bad      	subs	r5, r5, r6
 80059ac:	00ad      	lsls	r5, r5, #2
 80059ae:	e004      	b.n	80059ba <__gethex+0xce>
 80059b0:	2400      	movs	r4, #0
 80059b2:	4625      	mov	r5, r4
 80059b4:	e7e0      	b.n	8005978 <__gethex+0x8c>
 80059b6:	2d00      	cmp	r5, #0
 80059b8:	d1f7      	bne.n	80059aa <__gethex+0xbe>
 80059ba:	7833      	ldrb	r3, [r6, #0]
 80059bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80059c0:	2b50      	cmp	r3, #80	; 0x50
 80059c2:	d139      	bne.n	8005a38 <__gethex+0x14c>
 80059c4:	7873      	ldrb	r3, [r6, #1]
 80059c6:	2b2b      	cmp	r3, #43	; 0x2b
 80059c8:	d02a      	beq.n	8005a20 <__gethex+0x134>
 80059ca:	2b2d      	cmp	r3, #45	; 0x2d
 80059cc:	d02c      	beq.n	8005a28 <__gethex+0x13c>
 80059ce:	f04f 0900 	mov.w	r9, #0
 80059d2:	1c71      	adds	r1, r6, #1
 80059d4:	7808      	ldrb	r0, [r1, #0]
 80059d6:	f7ff ff74 	bl	80058c2 <__hexdig_fun>
 80059da:	1e43      	subs	r3, r0, #1
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b18      	cmp	r3, #24
 80059e0:	d82a      	bhi.n	8005a38 <__gethex+0x14c>
 80059e2:	f1a0 0210 	sub.w	r2, r0, #16
 80059e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80059ea:	f7ff ff6a 	bl	80058c2 <__hexdig_fun>
 80059ee:	1e43      	subs	r3, r0, #1
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b18      	cmp	r3, #24
 80059f4:	d91b      	bls.n	8005a2e <__gethex+0x142>
 80059f6:	f1b9 0f00 	cmp.w	r9, #0
 80059fa:	d000      	beq.n	80059fe <__gethex+0x112>
 80059fc:	4252      	negs	r2, r2
 80059fe:	4415      	add	r5, r2
 8005a00:	f8cb 1000 	str.w	r1, [fp]
 8005a04:	b1d4      	cbz	r4, 8005a3c <__gethex+0x150>
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf14      	ite	ne
 8005a0c:	2700      	movne	r7, #0
 8005a0e:	2706      	moveq	r7, #6
 8005a10:	4638      	mov	r0, r7
 8005a12:	b00b      	add	sp, #44	; 0x2c
 8005a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	463e      	mov	r6, r7
 8005a1a:	4625      	mov	r5, r4
 8005a1c:	2401      	movs	r4, #1
 8005a1e:	e7cc      	b.n	80059ba <__gethex+0xce>
 8005a20:	f04f 0900 	mov.w	r9, #0
 8005a24:	1cb1      	adds	r1, r6, #2
 8005a26:	e7d5      	b.n	80059d4 <__gethex+0xe8>
 8005a28:	f04f 0901 	mov.w	r9, #1
 8005a2c:	e7fa      	b.n	8005a24 <__gethex+0x138>
 8005a2e:	230a      	movs	r3, #10
 8005a30:	fb03 0202 	mla	r2, r3, r2, r0
 8005a34:	3a10      	subs	r2, #16
 8005a36:	e7d6      	b.n	80059e6 <__gethex+0xfa>
 8005a38:	4631      	mov	r1, r6
 8005a3a:	e7e1      	b.n	8005a00 <__gethex+0x114>
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	1bf3      	subs	r3, r6, r7
 8005a40:	3b01      	subs	r3, #1
 8005a42:	2b07      	cmp	r3, #7
 8005a44:	dc0a      	bgt.n	8005a5c <__gethex+0x170>
 8005a46:	9802      	ldr	r0, [sp, #8]
 8005a48:	f000 fa88 	bl	8005f5c <_Balloc>
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	b940      	cbnz	r0, 8005a62 <__gethex+0x176>
 8005a50:	4602      	mov	r2, r0
 8005a52:	21de      	movs	r1, #222	; 0xde
 8005a54:	4b5b      	ldr	r3, [pc, #364]	; (8005bc4 <__gethex+0x2d8>)
 8005a56:	485c      	ldr	r0, [pc, #368]	; (8005bc8 <__gethex+0x2dc>)
 8005a58:	f001 f9bc 	bl	8006dd4 <__assert_func>
 8005a5c:	3101      	adds	r1, #1
 8005a5e:	105b      	asrs	r3, r3, #1
 8005a60:	e7ef      	b.n	8005a42 <__gethex+0x156>
 8005a62:	f04f 0b00 	mov.w	fp, #0
 8005a66:	f100 0914 	add.w	r9, r0, #20
 8005a6a:	f1ca 0301 	rsb	r3, sl, #1
 8005a6e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005a72:	f8cd b004 	str.w	fp, [sp, #4]
 8005a76:	9308      	str	r3, [sp, #32]
 8005a78:	42b7      	cmp	r7, r6
 8005a7a:	d33f      	bcc.n	8005afc <__gethex+0x210>
 8005a7c:	9f04      	ldr	r7, [sp, #16]
 8005a7e:	9b01      	ldr	r3, [sp, #4]
 8005a80:	f847 3b04 	str.w	r3, [r7], #4
 8005a84:	eba7 0709 	sub.w	r7, r7, r9
 8005a88:	10bf      	asrs	r7, r7, #2
 8005a8a:	6127      	str	r7, [r4, #16]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fb57 	bl	8006140 <__hi0bits>
 8005a92:	017f      	lsls	r7, r7, #5
 8005a94:	f8d8 6000 	ldr.w	r6, [r8]
 8005a98:	1a3f      	subs	r7, r7, r0
 8005a9a:	42b7      	cmp	r7, r6
 8005a9c:	dd62      	ble.n	8005b64 <__gethex+0x278>
 8005a9e:	1bbf      	subs	r7, r7, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 fef1 	bl	800688a <__any_on>
 8005aa8:	4682      	mov	sl, r0
 8005aaa:	b1a8      	cbz	r0, 8005ad8 <__gethex+0x1ec>
 8005aac:	f04f 0a01 	mov.w	sl, #1
 8005ab0:	1e7b      	subs	r3, r7, #1
 8005ab2:	1159      	asrs	r1, r3, #5
 8005ab4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005ab8:	f003 021f 	and.w	r2, r3, #31
 8005abc:	fa0a f202 	lsl.w	r2, sl, r2
 8005ac0:	420a      	tst	r2, r1
 8005ac2:	d009      	beq.n	8005ad8 <__gethex+0x1ec>
 8005ac4:	4553      	cmp	r3, sl
 8005ac6:	dd05      	ble.n	8005ad4 <__gethex+0x1e8>
 8005ac8:	4620      	mov	r0, r4
 8005aca:	1eb9      	subs	r1, r7, #2
 8005acc:	f000 fedd 	bl	800688a <__any_on>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d144      	bne.n	8005b5e <__gethex+0x272>
 8005ad4:	f04f 0a02 	mov.w	sl, #2
 8005ad8:	4639      	mov	r1, r7
 8005ada:	4620      	mov	r0, r4
 8005adc:	f7ff fe9e 	bl	800581c <rshift>
 8005ae0:	443d      	add	r5, r7
 8005ae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ae6:	42ab      	cmp	r3, r5
 8005ae8:	da4a      	bge.n	8005b80 <__gethex+0x294>
 8005aea:	4621      	mov	r1, r4
 8005aec:	9802      	ldr	r0, [sp, #8]
 8005aee:	f000 fa75 	bl	8005fdc <_Bfree>
 8005af2:	2300      	movs	r3, #0
 8005af4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005af6:	27a3      	movs	r7, #163	; 0xa3
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	e789      	b.n	8005a10 <__gethex+0x124>
 8005afc:	1e73      	subs	r3, r6, #1
 8005afe:	9a06      	ldr	r2, [sp, #24]
 8005b00:	9307      	str	r3, [sp, #28]
 8005b02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d019      	beq.n	8005b3e <__gethex+0x252>
 8005b0a:	f1bb 0f20 	cmp.w	fp, #32
 8005b0e:	d107      	bne.n	8005b20 <__gethex+0x234>
 8005b10:	9b04      	ldr	r3, [sp, #16]
 8005b12:	9a01      	ldr	r2, [sp, #4]
 8005b14:	f843 2b04 	str.w	r2, [r3], #4
 8005b18:	9304      	str	r3, [sp, #16]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	469b      	mov	fp, r3
 8005b1e:	9301      	str	r3, [sp, #4]
 8005b20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005b24:	f7ff fecd 	bl	80058c2 <__hexdig_fun>
 8005b28:	9b01      	ldr	r3, [sp, #4]
 8005b2a:	f000 000f 	and.w	r0, r0, #15
 8005b2e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005b32:	4303      	orrs	r3, r0
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	f10b 0b04 	add.w	fp, fp, #4
 8005b3a:	9b07      	ldr	r3, [sp, #28]
 8005b3c:	e00d      	b.n	8005b5a <__gethex+0x26e>
 8005b3e:	9a08      	ldr	r2, [sp, #32]
 8005b40:	1e73      	subs	r3, r6, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	42bb      	cmp	r3, r7
 8005b46:	d3e0      	bcc.n	8005b0a <__gethex+0x21e>
 8005b48:	4618      	mov	r0, r3
 8005b4a:	4652      	mov	r2, sl
 8005b4c:	9903      	ldr	r1, [sp, #12]
 8005b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b50:	f001 f91e 	bl	8006d90 <strncmp>
 8005b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d1d7      	bne.n	8005b0a <__gethex+0x21e>
 8005b5a:	461e      	mov	r6, r3
 8005b5c:	e78c      	b.n	8005a78 <__gethex+0x18c>
 8005b5e:	f04f 0a03 	mov.w	sl, #3
 8005b62:	e7b9      	b.n	8005ad8 <__gethex+0x1ec>
 8005b64:	da09      	bge.n	8005b7a <__gethex+0x28e>
 8005b66:	1bf7      	subs	r7, r6, r7
 8005b68:	4621      	mov	r1, r4
 8005b6a:	463a      	mov	r2, r7
 8005b6c:	9802      	ldr	r0, [sp, #8]
 8005b6e:	f000 fc4d 	bl	800640c <__lshift>
 8005b72:	4604      	mov	r4, r0
 8005b74:	1bed      	subs	r5, r5, r7
 8005b76:	f100 0914 	add.w	r9, r0, #20
 8005b7a:	f04f 0a00 	mov.w	sl, #0
 8005b7e:	e7b0      	b.n	8005ae2 <__gethex+0x1f6>
 8005b80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005b84:	42a8      	cmp	r0, r5
 8005b86:	dd72      	ble.n	8005c6e <__gethex+0x382>
 8005b88:	1b45      	subs	r5, r0, r5
 8005b8a:	42ae      	cmp	r6, r5
 8005b8c:	dc35      	bgt.n	8005bfa <__gethex+0x30e>
 8005b8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d029      	beq.n	8005bea <__gethex+0x2fe>
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d02b      	beq.n	8005bf2 <__gethex+0x306>
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d11c      	bne.n	8005bd8 <__gethex+0x2ec>
 8005b9e:	42ae      	cmp	r6, r5
 8005ba0:	d11a      	bne.n	8005bd8 <__gethex+0x2ec>
 8005ba2:	2e01      	cmp	r6, #1
 8005ba4:	d112      	bne.n	8005bcc <__gethex+0x2e0>
 8005ba6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005baa:	9a05      	ldr	r2, [sp, #20]
 8005bac:	2762      	movs	r7, #98	; 0x62
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	6123      	str	r3, [r4, #16]
 8005bb4:	f8c9 3000 	str.w	r3, [r9]
 8005bb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bba:	601c      	str	r4, [r3, #0]
 8005bbc:	e728      	b.n	8005a10 <__gethex+0x124>
 8005bbe:	bf00      	nop
 8005bc0:	08007c08 	.word	0x08007c08
 8005bc4:	08007b90 	.word	0x08007b90
 8005bc8:	08007ba1 	.word	0x08007ba1
 8005bcc:	4620      	mov	r0, r4
 8005bce:	1e71      	subs	r1, r6, #1
 8005bd0:	f000 fe5b 	bl	800688a <__any_on>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d1e6      	bne.n	8005ba6 <__gethex+0x2ba>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	9802      	ldr	r0, [sp, #8]
 8005bdc:	f000 f9fe 	bl	8005fdc <_Bfree>
 8005be0:	2300      	movs	r3, #0
 8005be2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005be4:	2750      	movs	r7, #80	; 0x50
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e712      	b.n	8005a10 <__gethex+0x124>
 8005bea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f3      	bne.n	8005bd8 <__gethex+0x2ec>
 8005bf0:	e7d9      	b.n	8005ba6 <__gethex+0x2ba>
 8005bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1d6      	bne.n	8005ba6 <__gethex+0x2ba>
 8005bf8:	e7ee      	b.n	8005bd8 <__gethex+0x2ec>
 8005bfa:	1e6f      	subs	r7, r5, #1
 8005bfc:	f1ba 0f00 	cmp.w	sl, #0
 8005c00:	d132      	bne.n	8005c68 <__gethex+0x37c>
 8005c02:	b127      	cbz	r7, 8005c0e <__gethex+0x322>
 8005c04:	4639      	mov	r1, r7
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 fe3f 	bl	800688a <__any_on>
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	2101      	movs	r1, #1
 8005c10:	117b      	asrs	r3, r7, #5
 8005c12:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005c16:	f007 071f 	and.w	r7, r7, #31
 8005c1a:	fa01 f707 	lsl.w	r7, r1, r7
 8005c1e:	421f      	tst	r7, r3
 8005c20:	f04f 0702 	mov.w	r7, #2
 8005c24:	4629      	mov	r1, r5
 8005c26:	4620      	mov	r0, r4
 8005c28:	bf18      	it	ne
 8005c2a:	f04a 0a02 	orrne.w	sl, sl, #2
 8005c2e:	1b76      	subs	r6, r6, r5
 8005c30:	f7ff fdf4 	bl	800581c <rshift>
 8005c34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005c38:	f1ba 0f00 	cmp.w	sl, #0
 8005c3c:	d048      	beq.n	8005cd0 <__gethex+0x3e4>
 8005c3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d015      	beq.n	8005c72 <__gethex+0x386>
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d017      	beq.n	8005c7a <__gethex+0x38e>
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d109      	bne.n	8005c62 <__gethex+0x376>
 8005c4e:	f01a 0f02 	tst.w	sl, #2
 8005c52:	d006      	beq.n	8005c62 <__gethex+0x376>
 8005c54:	f8d9 0000 	ldr.w	r0, [r9]
 8005c58:	ea4a 0a00 	orr.w	sl, sl, r0
 8005c5c:	f01a 0f01 	tst.w	sl, #1
 8005c60:	d10e      	bne.n	8005c80 <__gethex+0x394>
 8005c62:	f047 0710 	orr.w	r7, r7, #16
 8005c66:	e033      	b.n	8005cd0 <__gethex+0x3e4>
 8005c68:	f04f 0a01 	mov.w	sl, #1
 8005c6c:	e7cf      	b.n	8005c0e <__gethex+0x322>
 8005c6e:	2701      	movs	r7, #1
 8005c70:	e7e2      	b.n	8005c38 <__gethex+0x34c>
 8005c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c74:	f1c3 0301 	rsb	r3, r3, #1
 8005c78:	9315      	str	r3, [sp, #84]	; 0x54
 8005c7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f0      	beq.n	8005c62 <__gethex+0x376>
 8005c80:	f04f 0c00 	mov.w	ip, #0
 8005c84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005c88:	f104 0314 	add.w	r3, r4, #20
 8005c8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005c90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005c9e:	d01c      	beq.n	8005cda <__gethex+0x3ee>
 8005ca0:	3201      	adds	r2, #1
 8005ca2:	6002      	str	r2, [r0, #0]
 8005ca4:	2f02      	cmp	r7, #2
 8005ca6:	f104 0314 	add.w	r3, r4, #20
 8005caa:	d13d      	bne.n	8005d28 <__gethex+0x43c>
 8005cac:	f8d8 2000 	ldr.w	r2, [r8]
 8005cb0:	3a01      	subs	r2, #1
 8005cb2:	42b2      	cmp	r2, r6
 8005cb4:	d10a      	bne.n	8005ccc <__gethex+0x3e0>
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	1171      	asrs	r1, r6, #5
 8005cba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005cbe:	f006 061f 	and.w	r6, r6, #31
 8005cc2:	fa02 f606 	lsl.w	r6, r2, r6
 8005cc6:	421e      	tst	r6, r3
 8005cc8:	bf18      	it	ne
 8005cca:	4617      	movne	r7, r2
 8005ccc:	f047 0720 	orr.w	r7, r7, #32
 8005cd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cd2:	601c      	str	r4, [r3, #0]
 8005cd4:	9b05      	ldr	r3, [sp, #20]
 8005cd6:	601d      	str	r5, [r3, #0]
 8005cd8:	e69a      	b.n	8005a10 <__gethex+0x124>
 8005cda:	4299      	cmp	r1, r3
 8005cdc:	f843 cc04 	str.w	ip, [r3, #-4]
 8005ce0:	d8d8      	bhi.n	8005c94 <__gethex+0x3a8>
 8005ce2:	68a3      	ldr	r3, [r4, #8]
 8005ce4:	459b      	cmp	fp, r3
 8005ce6:	db17      	blt.n	8005d18 <__gethex+0x42c>
 8005ce8:	6861      	ldr	r1, [r4, #4]
 8005cea:	9802      	ldr	r0, [sp, #8]
 8005cec:	3101      	adds	r1, #1
 8005cee:	f000 f935 	bl	8005f5c <_Balloc>
 8005cf2:	4681      	mov	r9, r0
 8005cf4:	b918      	cbnz	r0, 8005cfe <__gethex+0x412>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	2184      	movs	r1, #132	; 0x84
 8005cfa:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <__gethex+0x474>)
 8005cfc:	e6ab      	b.n	8005a56 <__gethex+0x16a>
 8005cfe:	6922      	ldr	r2, [r4, #16]
 8005d00:	f104 010c 	add.w	r1, r4, #12
 8005d04:	3202      	adds	r2, #2
 8005d06:	0092      	lsls	r2, r2, #2
 8005d08:	300c      	adds	r0, #12
 8005d0a:	f000 f919 	bl	8005f40 <memcpy>
 8005d0e:	4621      	mov	r1, r4
 8005d10:	9802      	ldr	r0, [sp, #8]
 8005d12:	f000 f963 	bl	8005fdc <_Bfree>
 8005d16:	464c      	mov	r4, r9
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	6122      	str	r2, [r4, #16]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d24:	615a      	str	r2, [r3, #20]
 8005d26:	e7bd      	b.n	8005ca4 <__gethex+0x3b8>
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	455a      	cmp	r2, fp
 8005d2c:	dd0b      	ble.n	8005d46 <__gethex+0x45a>
 8005d2e:	2101      	movs	r1, #1
 8005d30:	4620      	mov	r0, r4
 8005d32:	f7ff fd73 	bl	800581c <rshift>
 8005d36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d3a:	3501      	adds	r5, #1
 8005d3c:	42ab      	cmp	r3, r5
 8005d3e:	f6ff aed4 	blt.w	8005aea <__gethex+0x1fe>
 8005d42:	2701      	movs	r7, #1
 8005d44:	e7c2      	b.n	8005ccc <__gethex+0x3e0>
 8005d46:	f016 061f 	ands.w	r6, r6, #31
 8005d4a:	d0fa      	beq.n	8005d42 <__gethex+0x456>
 8005d4c:	4453      	add	r3, sl
 8005d4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005d52:	f000 f9f5 	bl	8006140 <__hi0bits>
 8005d56:	f1c6 0620 	rsb	r6, r6, #32
 8005d5a:	42b0      	cmp	r0, r6
 8005d5c:	dbe7      	blt.n	8005d2e <__gethex+0x442>
 8005d5e:	e7f0      	b.n	8005d42 <__gethex+0x456>
 8005d60:	08007b90 	.word	0x08007b90

08005d64 <L_shift>:
 8005d64:	f1c2 0208 	rsb	r2, r2, #8
 8005d68:	0092      	lsls	r2, r2, #2
 8005d6a:	b570      	push	{r4, r5, r6, lr}
 8005d6c:	f1c2 0620 	rsb	r6, r2, #32
 8005d70:	6843      	ldr	r3, [r0, #4]
 8005d72:	6804      	ldr	r4, [r0, #0]
 8005d74:	fa03 f506 	lsl.w	r5, r3, r6
 8005d78:	432c      	orrs	r4, r5
 8005d7a:	40d3      	lsrs	r3, r2
 8005d7c:	6004      	str	r4, [r0, #0]
 8005d7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005d82:	4288      	cmp	r0, r1
 8005d84:	d3f4      	bcc.n	8005d70 <L_shift+0xc>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}

08005d88 <__match>:
 8005d88:	b530      	push	{r4, r5, lr}
 8005d8a:	6803      	ldr	r3, [r0, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d92:	b914      	cbnz	r4, 8005d9a <__match+0x12>
 8005d94:	6003      	str	r3, [r0, #0]
 8005d96:	2001      	movs	r0, #1
 8005d98:	bd30      	pop	{r4, r5, pc}
 8005d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005da2:	2d19      	cmp	r5, #25
 8005da4:	bf98      	it	ls
 8005da6:	3220      	addls	r2, #32
 8005da8:	42a2      	cmp	r2, r4
 8005daa:	d0f0      	beq.n	8005d8e <__match+0x6>
 8005dac:	2000      	movs	r0, #0
 8005dae:	e7f3      	b.n	8005d98 <__match+0x10>

08005db0 <__hexnan>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	2500      	movs	r5, #0
 8005db6:	680b      	ldr	r3, [r1, #0]
 8005db8:	4682      	mov	sl, r0
 8005dba:	115e      	asrs	r6, r3, #5
 8005dbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005dc0:	f013 031f 	ands.w	r3, r3, #31
 8005dc4:	bf18      	it	ne
 8005dc6:	3604      	addne	r6, #4
 8005dc8:	1f37      	subs	r7, r6, #4
 8005dca:	46b9      	mov	r9, r7
 8005dcc:	463c      	mov	r4, r7
 8005dce:	46ab      	mov	fp, r5
 8005dd0:	b087      	sub	sp, #28
 8005dd2:	4690      	mov	r8, r2
 8005dd4:	6802      	ldr	r2, [r0, #0]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	f846 5c04 	str.w	r5, [r6, #-4]
 8005ddc:	9502      	str	r5, [sp, #8]
 8005dde:	7851      	ldrb	r1, [r2, #1]
 8005de0:	1c53      	adds	r3, r2, #1
 8005de2:	9303      	str	r3, [sp, #12]
 8005de4:	b341      	cbz	r1, 8005e38 <__hexnan+0x88>
 8005de6:	4608      	mov	r0, r1
 8005de8:	9205      	str	r2, [sp, #20]
 8005dea:	9104      	str	r1, [sp, #16]
 8005dec:	f7ff fd69 	bl	80058c2 <__hexdig_fun>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d14f      	bne.n	8005e94 <__hexnan+0xe4>
 8005df4:	9904      	ldr	r1, [sp, #16]
 8005df6:	9a05      	ldr	r2, [sp, #20]
 8005df8:	2920      	cmp	r1, #32
 8005dfa:	d818      	bhi.n	8005e2e <__hexnan+0x7e>
 8005dfc:	9b02      	ldr	r3, [sp, #8]
 8005dfe:	459b      	cmp	fp, r3
 8005e00:	dd13      	ble.n	8005e2a <__hexnan+0x7a>
 8005e02:	454c      	cmp	r4, r9
 8005e04:	d206      	bcs.n	8005e14 <__hexnan+0x64>
 8005e06:	2d07      	cmp	r5, #7
 8005e08:	dc04      	bgt.n	8005e14 <__hexnan+0x64>
 8005e0a:	462a      	mov	r2, r5
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f7ff ffa8 	bl	8005d64 <L_shift>
 8005e14:	4544      	cmp	r4, r8
 8005e16:	d950      	bls.n	8005eba <__hexnan+0x10a>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f1a4 0904 	sub.w	r9, r4, #4
 8005e1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005e22:	461d      	mov	r5, r3
 8005e24:	464c      	mov	r4, r9
 8005e26:	f8cd b008 	str.w	fp, [sp, #8]
 8005e2a:	9a03      	ldr	r2, [sp, #12]
 8005e2c:	e7d7      	b.n	8005dde <__hexnan+0x2e>
 8005e2e:	2929      	cmp	r1, #41	; 0x29
 8005e30:	d156      	bne.n	8005ee0 <__hexnan+0x130>
 8005e32:	3202      	adds	r2, #2
 8005e34:	f8ca 2000 	str.w	r2, [sl]
 8005e38:	f1bb 0f00 	cmp.w	fp, #0
 8005e3c:	d050      	beq.n	8005ee0 <__hexnan+0x130>
 8005e3e:	454c      	cmp	r4, r9
 8005e40:	d206      	bcs.n	8005e50 <__hexnan+0xa0>
 8005e42:	2d07      	cmp	r5, #7
 8005e44:	dc04      	bgt.n	8005e50 <__hexnan+0xa0>
 8005e46:	462a      	mov	r2, r5
 8005e48:	4649      	mov	r1, r9
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f7ff ff8a 	bl	8005d64 <L_shift>
 8005e50:	4544      	cmp	r4, r8
 8005e52:	d934      	bls.n	8005ebe <__hexnan+0x10e>
 8005e54:	4623      	mov	r3, r4
 8005e56:	f1a8 0204 	sub.w	r2, r8, #4
 8005e5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8005e5e:	429f      	cmp	r7, r3
 8005e60:	f842 1f04 	str.w	r1, [r2, #4]!
 8005e64:	d2f9      	bcs.n	8005e5a <__hexnan+0xaa>
 8005e66:	1b3b      	subs	r3, r7, r4
 8005e68:	f023 0303 	bic.w	r3, r3, #3
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	3401      	adds	r4, #1
 8005e70:	3e03      	subs	r6, #3
 8005e72:	42b4      	cmp	r4, r6
 8005e74:	bf88      	it	hi
 8005e76:	2304      	movhi	r3, #4
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4443      	add	r3, r8
 8005e7c:	f843 2b04 	str.w	r2, [r3], #4
 8005e80:	429f      	cmp	r7, r3
 8005e82:	d2fb      	bcs.n	8005e7c <__hexnan+0xcc>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	b91b      	cbnz	r3, 8005e90 <__hexnan+0xe0>
 8005e88:	4547      	cmp	r7, r8
 8005e8a:	d127      	bne.n	8005edc <__hexnan+0x12c>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	2005      	movs	r0, #5
 8005e92:	e026      	b.n	8005ee2 <__hexnan+0x132>
 8005e94:	3501      	adds	r5, #1
 8005e96:	2d08      	cmp	r5, #8
 8005e98:	f10b 0b01 	add.w	fp, fp, #1
 8005e9c:	dd06      	ble.n	8005eac <__hexnan+0xfc>
 8005e9e:	4544      	cmp	r4, r8
 8005ea0:	d9c3      	bls.n	8005e2a <__hexnan+0x7a>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2501      	movs	r5, #1
 8005ea6:	f844 3c04 	str.w	r3, [r4, #-4]
 8005eaa:	3c04      	subs	r4, #4
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	f000 000f 	and.w	r0, r0, #15
 8005eb2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005eb6:	6022      	str	r2, [r4, #0]
 8005eb8:	e7b7      	b.n	8005e2a <__hexnan+0x7a>
 8005eba:	2508      	movs	r5, #8
 8005ebc:	e7b5      	b.n	8005e2a <__hexnan+0x7a>
 8005ebe:	9b01      	ldr	r3, [sp, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0df      	beq.n	8005e84 <__hexnan+0xd4>
 8005ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec8:	f1c3 0320 	rsb	r3, r3, #32
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005ed4:	401a      	ands	r2, r3
 8005ed6:	f846 2c04 	str.w	r2, [r6, #-4]
 8005eda:	e7d3      	b.n	8005e84 <__hexnan+0xd4>
 8005edc:	3f04      	subs	r7, #4
 8005ede:	e7d1      	b.n	8005e84 <__hexnan+0xd4>
 8005ee0:	2004      	movs	r0, #4
 8005ee2:	b007      	add	sp, #28
 8005ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ee8 <_localeconv_r>:
 8005ee8:	4800      	ldr	r0, [pc, #0]	; (8005eec <_localeconv_r+0x4>)
 8005eea:	4770      	bx	lr
 8005eec:	20000164 	.word	0x20000164

08005ef0 <malloc>:
 8005ef0:	4b02      	ldr	r3, [pc, #8]	; (8005efc <malloc+0xc>)
 8005ef2:	4601      	mov	r1, r0
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	f000 bd65 	b.w	80069c4 <_malloc_r>
 8005efa:	bf00      	nop
 8005efc:	2000000c 	.word	0x2000000c

08005f00 <__ascii_mbtowc>:
 8005f00:	b082      	sub	sp, #8
 8005f02:	b901      	cbnz	r1, 8005f06 <__ascii_mbtowc+0x6>
 8005f04:	a901      	add	r1, sp, #4
 8005f06:	b142      	cbz	r2, 8005f1a <__ascii_mbtowc+0x1a>
 8005f08:	b14b      	cbz	r3, 8005f1e <__ascii_mbtowc+0x1e>
 8005f0a:	7813      	ldrb	r3, [r2, #0]
 8005f0c:	600b      	str	r3, [r1, #0]
 8005f0e:	7812      	ldrb	r2, [r2, #0]
 8005f10:	1e10      	subs	r0, r2, #0
 8005f12:	bf18      	it	ne
 8005f14:	2001      	movne	r0, #1
 8005f16:	b002      	add	sp, #8
 8005f18:	4770      	bx	lr
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	e7fb      	b.n	8005f16 <__ascii_mbtowc+0x16>
 8005f1e:	f06f 0001 	mvn.w	r0, #1
 8005f22:	e7f8      	b.n	8005f16 <__ascii_mbtowc+0x16>

08005f24 <memchr>:
 8005f24:	4603      	mov	r3, r0
 8005f26:	b510      	push	{r4, lr}
 8005f28:	b2c9      	uxtb	r1, r1
 8005f2a:	4402      	add	r2, r0
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	d101      	bne.n	8005f36 <memchr+0x12>
 8005f32:	2000      	movs	r0, #0
 8005f34:	e003      	b.n	8005f3e <memchr+0x1a>
 8005f36:	7804      	ldrb	r4, [r0, #0]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	428c      	cmp	r4, r1
 8005f3c:	d1f6      	bne.n	8005f2c <memchr+0x8>
 8005f3e:	bd10      	pop	{r4, pc}

08005f40 <memcpy>:
 8005f40:	440a      	add	r2, r1
 8005f42:	4291      	cmp	r1, r2
 8005f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f48:	d100      	bne.n	8005f4c <memcpy+0xc>
 8005f4a:	4770      	bx	lr
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f52:	4291      	cmp	r1, r2
 8005f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f58:	d1f9      	bne.n	8005f4e <memcpy+0xe>
 8005f5a:	bd10      	pop	{r4, pc}

08005f5c <_Balloc>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	b976      	cbnz	r6, 8005f84 <_Balloc+0x28>
 8005f66:	2010      	movs	r0, #16
 8005f68:	f7ff ffc2 	bl	8005ef0 <malloc>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	6260      	str	r0, [r4, #36]	; 0x24
 8005f70:	b920      	cbnz	r0, 8005f7c <_Balloc+0x20>
 8005f72:	2166      	movs	r1, #102	; 0x66
 8005f74:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <_Balloc+0x78>)
 8005f76:	4818      	ldr	r0, [pc, #96]	; (8005fd8 <_Balloc+0x7c>)
 8005f78:	f000 ff2c 	bl	8006dd4 <__assert_func>
 8005f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f80:	6006      	str	r6, [r0, #0]
 8005f82:	60c6      	str	r6, [r0, #12]
 8005f84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f86:	68f3      	ldr	r3, [r6, #12]
 8005f88:	b183      	cbz	r3, 8005fac <_Balloc+0x50>
 8005f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f92:	b9b8      	cbnz	r0, 8005fc4 <_Balloc+0x68>
 8005f94:	2101      	movs	r1, #1
 8005f96:	fa01 f605 	lsl.w	r6, r1, r5
 8005f9a:	1d72      	adds	r2, r6, #5
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	0092      	lsls	r2, r2, #2
 8005fa0:	f000 fc94 	bl	80068cc <_calloc_r>
 8005fa4:	b160      	cbz	r0, 8005fc0 <_Balloc+0x64>
 8005fa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005faa:	e00e      	b.n	8005fca <_Balloc+0x6e>
 8005fac:	2221      	movs	r2, #33	; 0x21
 8005fae:	2104      	movs	r1, #4
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 fc8b 	bl	80068cc <_calloc_r>
 8005fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fb8:	60f0      	str	r0, [r6, #12]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e4      	bne.n	8005f8a <_Balloc+0x2e>
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
 8005fc4:	6802      	ldr	r2, [r0, #0]
 8005fc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fd0:	e7f7      	b.n	8005fc2 <_Balloc+0x66>
 8005fd2:	bf00      	nop
 8005fd4:	08007b1e 	.word	0x08007b1e
 8005fd8:	08007c1c 	.word	0x08007c1c

08005fdc <_Bfree>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	b976      	cbnz	r6, 8006004 <_Bfree+0x28>
 8005fe6:	2010      	movs	r0, #16
 8005fe8:	f7ff ff82 	bl	8005ef0 <malloc>
 8005fec:	4602      	mov	r2, r0
 8005fee:	6268      	str	r0, [r5, #36]	; 0x24
 8005ff0:	b920      	cbnz	r0, 8005ffc <_Bfree+0x20>
 8005ff2:	218a      	movs	r1, #138	; 0x8a
 8005ff4:	4b08      	ldr	r3, [pc, #32]	; (8006018 <_Bfree+0x3c>)
 8005ff6:	4809      	ldr	r0, [pc, #36]	; (800601c <_Bfree+0x40>)
 8005ff8:	f000 feec 	bl	8006dd4 <__assert_func>
 8005ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006000:	6006      	str	r6, [r0, #0]
 8006002:	60c6      	str	r6, [r0, #12]
 8006004:	b13c      	cbz	r4, 8006016 <_Bfree+0x3a>
 8006006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006008:	6862      	ldr	r2, [r4, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006010:	6021      	str	r1, [r4, #0]
 8006012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	08007b1e 	.word	0x08007b1e
 800601c:	08007c1c 	.word	0x08007c1c

08006020 <__multadd>:
 8006020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006024:	4607      	mov	r7, r0
 8006026:	460c      	mov	r4, r1
 8006028:	461e      	mov	r6, r3
 800602a:	2000      	movs	r0, #0
 800602c:	690d      	ldr	r5, [r1, #16]
 800602e:	f101 0c14 	add.w	ip, r1, #20
 8006032:	f8dc 3000 	ldr.w	r3, [ip]
 8006036:	3001      	adds	r0, #1
 8006038:	b299      	uxth	r1, r3
 800603a:	fb02 6101 	mla	r1, r2, r1, r6
 800603e:	0c1e      	lsrs	r6, r3, #16
 8006040:	0c0b      	lsrs	r3, r1, #16
 8006042:	fb02 3306 	mla	r3, r2, r6, r3
 8006046:	b289      	uxth	r1, r1
 8006048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800604c:	4285      	cmp	r5, r0
 800604e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006052:	f84c 1b04 	str.w	r1, [ip], #4
 8006056:	dcec      	bgt.n	8006032 <__multadd+0x12>
 8006058:	b30e      	cbz	r6, 800609e <__multadd+0x7e>
 800605a:	68a3      	ldr	r3, [r4, #8]
 800605c:	42ab      	cmp	r3, r5
 800605e:	dc19      	bgt.n	8006094 <__multadd+0x74>
 8006060:	6861      	ldr	r1, [r4, #4]
 8006062:	4638      	mov	r0, r7
 8006064:	3101      	adds	r1, #1
 8006066:	f7ff ff79 	bl	8005f5c <_Balloc>
 800606a:	4680      	mov	r8, r0
 800606c:	b928      	cbnz	r0, 800607a <__multadd+0x5a>
 800606e:	4602      	mov	r2, r0
 8006070:	21b5      	movs	r1, #181	; 0xb5
 8006072:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <__multadd+0x84>)
 8006074:	480c      	ldr	r0, [pc, #48]	; (80060a8 <__multadd+0x88>)
 8006076:	f000 fead 	bl	8006dd4 <__assert_func>
 800607a:	6922      	ldr	r2, [r4, #16]
 800607c:	f104 010c 	add.w	r1, r4, #12
 8006080:	3202      	adds	r2, #2
 8006082:	0092      	lsls	r2, r2, #2
 8006084:	300c      	adds	r0, #12
 8006086:	f7ff ff5b 	bl	8005f40 <memcpy>
 800608a:	4621      	mov	r1, r4
 800608c:	4638      	mov	r0, r7
 800608e:	f7ff ffa5 	bl	8005fdc <_Bfree>
 8006092:	4644      	mov	r4, r8
 8006094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006098:	3501      	adds	r5, #1
 800609a:	615e      	str	r6, [r3, #20]
 800609c:	6125      	str	r5, [r4, #16]
 800609e:	4620      	mov	r0, r4
 80060a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a4:	08007b90 	.word	0x08007b90
 80060a8:	08007c1c 	.word	0x08007c1c

080060ac <__s2b>:
 80060ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b0:	4615      	mov	r5, r2
 80060b2:	2209      	movs	r2, #9
 80060b4:	461f      	mov	r7, r3
 80060b6:	3308      	adds	r3, #8
 80060b8:	460c      	mov	r4, r1
 80060ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80060be:	4606      	mov	r6, r0
 80060c0:	2201      	movs	r2, #1
 80060c2:	2100      	movs	r1, #0
 80060c4:	429a      	cmp	r2, r3
 80060c6:	db09      	blt.n	80060dc <__s2b+0x30>
 80060c8:	4630      	mov	r0, r6
 80060ca:	f7ff ff47 	bl	8005f5c <_Balloc>
 80060ce:	b940      	cbnz	r0, 80060e2 <__s2b+0x36>
 80060d0:	4602      	mov	r2, r0
 80060d2:	21ce      	movs	r1, #206	; 0xce
 80060d4:	4b18      	ldr	r3, [pc, #96]	; (8006138 <__s2b+0x8c>)
 80060d6:	4819      	ldr	r0, [pc, #100]	; (800613c <__s2b+0x90>)
 80060d8:	f000 fe7c 	bl	8006dd4 <__assert_func>
 80060dc:	0052      	lsls	r2, r2, #1
 80060de:	3101      	adds	r1, #1
 80060e0:	e7f0      	b.n	80060c4 <__s2b+0x18>
 80060e2:	9b08      	ldr	r3, [sp, #32]
 80060e4:	2d09      	cmp	r5, #9
 80060e6:	6143      	str	r3, [r0, #20]
 80060e8:	f04f 0301 	mov.w	r3, #1
 80060ec:	6103      	str	r3, [r0, #16]
 80060ee:	dd16      	ble.n	800611e <__s2b+0x72>
 80060f0:	f104 0909 	add.w	r9, r4, #9
 80060f4:	46c8      	mov	r8, r9
 80060f6:	442c      	add	r4, r5
 80060f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80060fc:	4601      	mov	r1, r0
 80060fe:	220a      	movs	r2, #10
 8006100:	4630      	mov	r0, r6
 8006102:	3b30      	subs	r3, #48	; 0x30
 8006104:	f7ff ff8c 	bl	8006020 <__multadd>
 8006108:	45a0      	cmp	r8, r4
 800610a:	d1f5      	bne.n	80060f8 <__s2b+0x4c>
 800610c:	f1a5 0408 	sub.w	r4, r5, #8
 8006110:	444c      	add	r4, r9
 8006112:	1b2d      	subs	r5, r5, r4
 8006114:	1963      	adds	r3, r4, r5
 8006116:	42bb      	cmp	r3, r7
 8006118:	db04      	blt.n	8006124 <__s2b+0x78>
 800611a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800611e:	2509      	movs	r5, #9
 8006120:	340a      	adds	r4, #10
 8006122:	e7f6      	b.n	8006112 <__s2b+0x66>
 8006124:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006128:	4601      	mov	r1, r0
 800612a:	220a      	movs	r2, #10
 800612c:	4630      	mov	r0, r6
 800612e:	3b30      	subs	r3, #48	; 0x30
 8006130:	f7ff ff76 	bl	8006020 <__multadd>
 8006134:	e7ee      	b.n	8006114 <__s2b+0x68>
 8006136:	bf00      	nop
 8006138:	08007b90 	.word	0x08007b90
 800613c:	08007c1c 	.word	0x08007c1c

08006140 <__hi0bits>:
 8006140:	0c02      	lsrs	r2, r0, #16
 8006142:	0412      	lsls	r2, r2, #16
 8006144:	4603      	mov	r3, r0
 8006146:	b9ca      	cbnz	r2, 800617c <__hi0bits+0x3c>
 8006148:	0403      	lsls	r3, r0, #16
 800614a:	2010      	movs	r0, #16
 800614c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006150:	bf04      	itt	eq
 8006152:	021b      	lsleq	r3, r3, #8
 8006154:	3008      	addeq	r0, #8
 8006156:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800615a:	bf04      	itt	eq
 800615c:	011b      	lsleq	r3, r3, #4
 800615e:	3004      	addeq	r0, #4
 8006160:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006164:	bf04      	itt	eq
 8006166:	009b      	lsleq	r3, r3, #2
 8006168:	3002      	addeq	r0, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	db05      	blt.n	800617a <__hi0bits+0x3a>
 800616e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006172:	f100 0001 	add.w	r0, r0, #1
 8006176:	bf08      	it	eq
 8006178:	2020      	moveq	r0, #32
 800617a:	4770      	bx	lr
 800617c:	2000      	movs	r0, #0
 800617e:	e7e5      	b.n	800614c <__hi0bits+0xc>

08006180 <__lo0bits>:
 8006180:	6803      	ldr	r3, [r0, #0]
 8006182:	4602      	mov	r2, r0
 8006184:	f013 0007 	ands.w	r0, r3, #7
 8006188:	d00b      	beq.n	80061a2 <__lo0bits+0x22>
 800618a:	07d9      	lsls	r1, r3, #31
 800618c:	d421      	bmi.n	80061d2 <__lo0bits+0x52>
 800618e:	0798      	lsls	r0, r3, #30
 8006190:	bf49      	itett	mi
 8006192:	085b      	lsrmi	r3, r3, #1
 8006194:	089b      	lsrpl	r3, r3, #2
 8006196:	2001      	movmi	r0, #1
 8006198:	6013      	strmi	r3, [r2, #0]
 800619a:	bf5c      	itt	pl
 800619c:	2002      	movpl	r0, #2
 800619e:	6013      	strpl	r3, [r2, #0]
 80061a0:	4770      	bx	lr
 80061a2:	b299      	uxth	r1, r3
 80061a4:	b909      	cbnz	r1, 80061aa <__lo0bits+0x2a>
 80061a6:	2010      	movs	r0, #16
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	b2d9      	uxtb	r1, r3
 80061ac:	b909      	cbnz	r1, 80061b2 <__lo0bits+0x32>
 80061ae:	3008      	adds	r0, #8
 80061b0:	0a1b      	lsrs	r3, r3, #8
 80061b2:	0719      	lsls	r1, r3, #28
 80061b4:	bf04      	itt	eq
 80061b6:	091b      	lsreq	r3, r3, #4
 80061b8:	3004      	addeq	r0, #4
 80061ba:	0799      	lsls	r1, r3, #30
 80061bc:	bf04      	itt	eq
 80061be:	089b      	lsreq	r3, r3, #2
 80061c0:	3002      	addeq	r0, #2
 80061c2:	07d9      	lsls	r1, r3, #31
 80061c4:	d403      	bmi.n	80061ce <__lo0bits+0x4e>
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	f100 0001 	add.w	r0, r0, #1
 80061cc:	d003      	beq.n	80061d6 <__lo0bits+0x56>
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4770      	bx	lr
 80061d2:	2000      	movs	r0, #0
 80061d4:	4770      	bx	lr
 80061d6:	2020      	movs	r0, #32
 80061d8:	4770      	bx	lr
	...

080061dc <__i2b>:
 80061dc:	b510      	push	{r4, lr}
 80061de:	460c      	mov	r4, r1
 80061e0:	2101      	movs	r1, #1
 80061e2:	f7ff febb 	bl	8005f5c <_Balloc>
 80061e6:	4602      	mov	r2, r0
 80061e8:	b928      	cbnz	r0, 80061f6 <__i2b+0x1a>
 80061ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061ee:	4b04      	ldr	r3, [pc, #16]	; (8006200 <__i2b+0x24>)
 80061f0:	4804      	ldr	r0, [pc, #16]	; (8006204 <__i2b+0x28>)
 80061f2:	f000 fdef 	bl	8006dd4 <__assert_func>
 80061f6:	2301      	movs	r3, #1
 80061f8:	6144      	str	r4, [r0, #20]
 80061fa:	6103      	str	r3, [r0, #16]
 80061fc:	bd10      	pop	{r4, pc}
 80061fe:	bf00      	nop
 8006200:	08007b90 	.word	0x08007b90
 8006204:	08007c1c 	.word	0x08007c1c

08006208 <__multiply>:
 8006208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	4691      	mov	r9, r2
 800620e:	690a      	ldr	r2, [r1, #16]
 8006210:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006214:	460c      	mov	r4, r1
 8006216:	429a      	cmp	r2, r3
 8006218:	bfbe      	ittt	lt
 800621a:	460b      	movlt	r3, r1
 800621c:	464c      	movlt	r4, r9
 800621e:	4699      	movlt	r9, r3
 8006220:	6927      	ldr	r7, [r4, #16]
 8006222:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006226:	68a3      	ldr	r3, [r4, #8]
 8006228:	6861      	ldr	r1, [r4, #4]
 800622a:	eb07 060a 	add.w	r6, r7, sl
 800622e:	42b3      	cmp	r3, r6
 8006230:	b085      	sub	sp, #20
 8006232:	bfb8      	it	lt
 8006234:	3101      	addlt	r1, #1
 8006236:	f7ff fe91 	bl	8005f5c <_Balloc>
 800623a:	b930      	cbnz	r0, 800624a <__multiply+0x42>
 800623c:	4602      	mov	r2, r0
 800623e:	f240 115d 	movw	r1, #349	; 0x15d
 8006242:	4b43      	ldr	r3, [pc, #268]	; (8006350 <__multiply+0x148>)
 8006244:	4843      	ldr	r0, [pc, #268]	; (8006354 <__multiply+0x14c>)
 8006246:	f000 fdc5 	bl	8006dd4 <__assert_func>
 800624a:	f100 0514 	add.w	r5, r0, #20
 800624e:	462b      	mov	r3, r5
 8006250:	2200      	movs	r2, #0
 8006252:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006256:	4543      	cmp	r3, r8
 8006258:	d321      	bcc.n	800629e <__multiply+0x96>
 800625a:	f104 0314 	add.w	r3, r4, #20
 800625e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006262:	f109 0314 	add.w	r3, r9, #20
 8006266:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800626a:	9202      	str	r2, [sp, #8]
 800626c:	1b3a      	subs	r2, r7, r4
 800626e:	3a15      	subs	r2, #21
 8006270:	f022 0203 	bic.w	r2, r2, #3
 8006274:	3204      	adds	r2, #4
 8006276:	f104 0115 	add.w	r1, r4, #21
 800627a:	428f      	cmp	r7, r1
 800627c:	bf38      	it	cc
 800627e:	2204      	movcc	r2, #4
 8006280:	9201      	str	r2, [sp, #4]
 8006282:	9a02      	ldr	r2, [sp, #8]
 8006284:	9303      	str	r3, [sp, #12]
 8006286:	429a      	cmp	r2, r3
 8006288:	d80c      	bhi.n	80062a4 <__multiply+0x9c>
 800628a:	2e00      	cmp	r6, #0
 800628c:	dd03      	ble.n	8006296 <__multiply+0x8e>
 800628e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006292:	2b00      	cmp	r3, #0
 8006294:	d059      	beq.n	800634a <__multiply+0x142>
 8006296:	6106      	str	r6, [r0, #16]
 8006298:	b005      	add	sp, #20
 800629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629e:	f843 2b04 	str.w	r2, [r3], #4
 80062a2:	e7d8      	b.n	8006256 <__multiply+0x4e>
 80062a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80062a8:	f1ba 0f00 	cmp.w	sl, #0
 80062ac:	d023      	beq.n	80062f6 <__multiply+0xee>
 80062ae:	46a9      	mov	r9, r5
 80062b0:	f04f 0c00 	mov.w	ip, #0
 80062b4:	f104 0e14 	add.w	lr, r4, #20
 80062b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062bc:	f8d9 1000 	ldr.w	r1, [r9]
 80062c0:	fa1f fb82 	uxth.w	fp, r2
 80062c4:	b289      	uxth	r1, r1
 80062c6:	fb0a 110b 	mla	r1, sl, fp, r1
 80062ca:	4461      	add	r1, ip
 80062cc:	f8d9 c000 	ldr.w	ip, [r9]
 80062d0:	0c12      	lsrs	r2, r2, #16
 80062d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80062d6:	fb0a c202 	mla	r2, sl, r2, ip
 80062da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062de:	b289      	uxth	r1, r1
 80062e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062e4:	4577      	cmp	r7, lr
 80062e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062ea:	f849 1b04 	str.w	r1, [r9], #4
 80062ee:	d8e3      	bhi.n	80062b8 <__multiply+0xb0>
 80062f0:	9a01      	ldr	r2, [sp, #4]
 80062f2:	f845 c002 	str.w	ip, [r5, r2]
 80062f6:	9a03      	ldr	r2, [sp, #12]
 80062f8:	3304      	adds	r3, #4
 80062fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062fe:	f1b9 0f00 	cmp.w	r9, #0
 8006302:	d020      	beq.n	8006346 <__multiply+0x13e>
 8006304:	46ae      	mov	lr, r5
 8006306:	f04f 0a00 	mov.w	sl, #0
 800630a:	6829      	ldr	r1, [r5, #0]
 800630c:	f104 0c14 	add.w	ip, r4, #20
 8006310:	f8bc b000 	ldrh.w	fp, [ip]
 8006314:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006318:	b289      	uxth	r1, r1
 800631a:	fb09 220b 	mla	r2, r9, fp, r2
 800631e:	4492      	add	sl, r2
 8006320:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006324:	f84e 1b04 	str.w	r1, [lr], #4
 8006328:	f85c 2b04 	ldr.w	r2, [ip], #4
 800632c:	f8be 1000 	ldrh.w	r1, [lr]
 8006330:	0c12      	lsrs	r2, r2, #16
 8006332:	fb09 1102 	mla	r1, r9, r2, r1
 8006336:	4567      	cmp	r7, ip
 8006338:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800633c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006340:	d8e6      	bhi.n	8006310 <__multiply+0x108>
 8006342:	9a01      	ldr	r2, [sp, #4]
 8006344:	50a9      	str	r1, [r5, r2]
 8006346:	3504      	adds	r5, #4
 8006348:	e79b      	b.n	8006282 <__multiply+0x7a>
 800634a:	3e01      	subs	r6, #1
 800634c:	e79d      	b.n	800628a <__multiply+0x82>
 800634e:	bf00      	nop
 8006350:	08007b90 	.word	0x08007b90
 8006354:	08007c1c 	.word	0x08007c1c

08006358 <__pow5mult>:
 8006358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800635c:	4615      	mov	r5, r2
 800635e:	f012 0203 	ands.w	r2, r2, #3
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	d007      	beq.n	8006378 <__pow5mult+0x20>
 8006368:	4c25      	ldr	r4, [pc, #148]	; (8006400 <__pow5mult+0xa8>)
 800636a:	3a01      	subs	r2, #1
 800636c:	2300      	movs	r3, #0
 800636e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006372:	f7ff fe55 	bl	8006020 <__multadd>
 8006376:	4607      	mov	r7, r0
 8006378:	10ad      	asrs	r5, r5, #2
 800637a:	d03d      	beq.n	80063f8 <__pow5mult+0xa0>
 800637c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800637e:	b97c      	cbnz	r4, 80063a0 <__pow5mult+0x48>
 8006380:	2010      	movs	r0, #16
 8006382:	f7ff fdb5 	bl	8005ef0 <malloc>
 8006386:	4602      	mov	r2, r0
 8006388:	6270      	str	r0, [r6, #36]	; 0x24
 800638a:	b928      	cbnz	r0, 8006398 <__pow5mult+0x40>
 800638c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <__pow5mult+0xac>)
 8006392:	481d      	ldr	r0, [pc, #116]	; (8006408 <__pow5mult+0xb0>)
 8006394:	f000 fd1e 	bl	8006dd4 <__assert_func>
 8006398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800639c:	6004      	str	r4, [r0, #0]
 800639e:	60c4      	str	r4, [r0, #12]
 80063a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80063a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063a8:	b94c      	cbnz	r4, 80063be <__pow5mult+0x66>
 80063aa:	f240 2171 	movw	r1, #625	; 0x271
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7ff ff14 	bl	80061dc <__i2b>
 80063b4:	2300      	movs	r3, #0
 80063b6:	4604      	mov	r4, r0
 80063b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80063bc:	6003      	str	r3, [r0, #0]
 80063be:	f04f 0900 	mov.w	r9, #0
 80063c2:	07eb      	lsls	r3, r5, #31
 80063c4:	d50a      	bpl.n	80063dc <__pow5mult+0x84>
 80063c6:	4639      	mov	r1, r7
 80063c8:	4622      	mov	r2, r4
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7ff ff1c 	bl	8006208 <__multiply>
 80063d0:	4680      	mov	r8, r0
 80063d2:	4639      	mov	r1, r7
 80063d4:	4630      	mov	r0, r6
 80063d6:	f7ff fe01 	bl	8005fdc <_Bfree>
 80063da:	4647      	mov	r7, r8
 80063dc:	106d      	asrs	r5, r5, #1
 80063de:	d00b      	beq.n	80063f8 <__pow5mult+0xa0>
 80063e0:	6820      	ldr	r0, [r4, #0]
 80063e2:	b938      	cbnz	r0, 80063f4 <__pow5mult+0x9c>
 80063e4:	4622      	mov	r2, r4
 80063e6:	4621      	mov	r1, r4
 80063e8:	4630      	mov	r0, r6
 80063ea:	f7ff ff0d 	bl	8006208 <__multiply>
 80063ee:	6020      	str	r0, [r4, #0]
 80063f0:	f8c0 9000 	str.w	r9, [r0]
 80063f4:	4604      	mov	r4, r0
 80063f6:	e7e4      	b.n	80063c2 <__pow5mult+0x6a>
 80063f8:	4638      	mov	r0, r7
 80063fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063fe:	bf00      	nop
 8006400:	08007d68 	.word	0x08007d68
 8006404:	08007b1e 	.word	0x08007b1e
 8006408:	08007c1c 	.word	0x08007c1c

0800640c <__lshift>:
 800640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006410:	460c      	mov	r4, r1
 8006412:	4607      	mov	r7, r0
 8006414:	4691      	mov	r9, r2
 8006416:	6923      	ldr	r3, [r4, #16]
 8006418:	6849      	ldr	r1, [r1, #4]
 800641a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800641e:	68a3      	ldr	r3, [r4, #8]
 8006420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006424:	f108 0601 	add.w	r6, r8, #1
 8006428:	42b3      	cmp	r3, r6
 800642a:	db0b      	blt.n	8006444 <__lshift+0x38>
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff fd95 	bl	8005f5c <_Balloc>
 8006432:	4605      	mov	r5, r0
 8006434:	b948      	cbnz	r0, 800644a <__lshift+0x3e>
 8006436:	4602      	mov	r2, r0
 8006438:	f240 11d9 	movw	r1, #473	; 0x1d9
 800643c:	4b29      	ldr	r3, [pc, #164]	; (80064e4 <__lshift+0xd8>)
 800643e:	482a      	ldr	r0, [pc, #168]	; (80064e8 <__lshift+0xdc>)
 8006440:	f000 fcc8 	bl	8006dd4 <__assert_func>
 8006444:	3101      	adds	r1, #1
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	e7ee      	b.n	8006428 <__lshift+0x1c>
 800644a:	2300      	movs	r3, #0
 800644c:	f100 0114 	add.w	r1, r0, #20
 8006450:	f100 0210 	add.w	r2, r0, #16
 8006454:	4618      	mov	r0, r3
 8006456:	4553      	cmp	r3, sl
 8006458:	db37      	blt.n	80064ca <__lshift+0xbe>
 800645a:	6920      	ldr	r0, [r4, #16]
 800645c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006460:	f104 0314 	add.w	r3, r4, #20
 8006464:	f019 091f 	ands.w	r9, r9, #31
 8006468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800646c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006470:	d02f      	beq.n	80064d2 <__lshift+0xc6>
 8006472:	468a      	mov	sl, r1
 8006474:	f04f 0c00 	mov.w	ip, #0
 8006478:	f1c9 0e20 	rsb	lr, r9, #32
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	fa02 f209 	lsl.w	r2, r2, r9
 8006482:	ea42 020c 	orr.w	r2, r2, ip
 8006486:	f84a 2b04 	str.w	r2, [sl], #4
 800648a:	f853 2b04 	ldr.w	r2, [r3], #4
 800648e:	4298      	cmp	r0, r3
 8006490:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006494:	d8f2      	bhi.n	800647c <__lshift+0x70>
 8006496:	1b03      	subs	r3, r0, r4
 8006498:	3b15      	subs	r3, #21
 800649a:	f023 0303 	bic.w	r3, r3, #3
 800649e:	3304      	adds	r3, #4
 80064a0:	f104 0215 	add.w	r2, r4, #21
 80064a4:	4290      	cmp	r0, r2
 80064a6:	bf38      	it	cc
 80064a8:	2304      	movcc	r3, #4
 80064aa:	f841 c003 	str.w	ip, [r1, r3]
 80064ae:	f1bc 0f00 	cmp.w	ip, #0
 80064b2:	d001      	beq.n	80064b8 <__lshift+0xac>
 80064b4:	f108 0602 	add.w	r6, r8, #2
 80064b8:	3e01      	subs	r6, #1
 80064ba:	4638      	mov	r0, r7
 80064bc:	4621      	mov	r1, r4
 80064be:	612e      	str	r6, [r5, #16]
 80064c0:	f7ff fd8c 	bl	8005fdc <_Bfree>
 80064c4:	4628      	mov	r0, r5
 80064c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80064ce:	3301      	adds	r3, #1
 80064d0:	e7c1      	b.n	8006456 <__lshift+0x4a>
 80064d2:	3904      	subs	r1, #4
 80064d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d8:	4298      	cmp	r0, r3
 80064da:	f841 2f04 	str.w	r2, [r1, #4]!
 80064de:	d8f9      	bhi.n	80064d4 <__lshift+0xc8>
 80064e0:	e7ea      	b.n	80064b8 <__lshift+0xac>
 80064e2:	bf00      	nop
 80064e4:	08007b90 	.word	0x08007b90
 80064e8:	08007c1c 	.word	0x08007c1c

080064ec <__mcmp>:
 80064ec:	4603      	mov	r3, r0
 80064ee:	690a      	ldr	r2, [r1, #16]
 80064f0:	6900      	ldr	r0, [r0, #16]
 80064f2:	b530      	push	{r4, r5, lr}
 80064f4:	1a80      	subs	r0, r0, r2
 80064f6:	d10d      	bne.n	8006514 <__mcmp+0x28>
 80064f8:	3314      	adds	r3, #20
 80064fa:	3114      	adds	r1, #20
 80064fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006500:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006504:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006508:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800650c:	4295      	cmp	r5, r2
 800650e:	d002      	beq.n	8006516 <__mcmp+0x2a>
 8006510:	d304      	bcc.n	800651c <__mcmp+0x30>
 8006512:	2001      	movs	r0, #1
 8006514:	bd30      	pop	{r4, r5, pc}
 8006516:	42a3      	cmp	r3, r4
 8006518:	d3f4      	bcc.n	8006504 <__mcmp+0x18>
 800651a:	e7fb      	b.n	8006514 <__mcmp+0x28>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	e7f8      	b.n	8006514 <__mcmp+0x28>
	...

08006524 <__mdiff>:
 8006524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	460d      	mov	r5, r1
 800652a:	4607      	mov	r7, r0
 800652c:	4611      	mov	r1, r2
 800652e:	4628      	mov	r0, r5
 8006530:	4614      	mov	r4, r2
 8006532:	f7ff ffdb 	bl	80064ec <__mcmp>
 8006536:	1e06      	subs	r6, r0, #0
 8006538:	d111      	bne.n	800655e <__mdiff+0x3a>
 800653a:	4631      	mov	r1, r6
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff fd0d 	bl	8005f5c <_Balloc>
 8006542:	4602      	mov	r2, r0
 8006544:	b928      	cbnz	r0, 8006552 <__mdiff+0x2e>
 8006546:	f240 2132 	movw	r1, #562	; 0x232
 800654a:	4b3a      	ldr	r3, [pc, #232]	; (8006634 <__mdiff+0x110>)
 800654c:	483a      	ldr	r0, [pc, #232]	; (8006638 <__mdiff+0x114>)
 800654e:	f000 fc41 	bl	8006dd4 <__assert_func>
 8006552:	2301      	movs	r3, #1
 8006554:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006558:	4610      	mov	r0, r2
 800655a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655e:	bfa4      	itt	ge
 8006560:	4623      	movge	r3, r4
 8006562:	462c      	movge	r4, r5
 8006564:	4638      	mov	r0, r7
 8006566:	6861      	ldr	r1, [r4, #4]
 8006568:	bfa6      	itte	ge
 800656a:	461d      	movge	r5, r3
 800656c:	2600      	movge	r6, #0
 800656e:	2601      	movlt	r6, #1
 8006570:	f7ff fcf4 	bl	8005f5c <_Balloc>
 8006574:	4602      	mov	r2, r0
 8006576:	b918      	cbnz	r0, 8006580 <__mdiff+0x5c>
 8006578:	f44f 7110 	mov.w	r1, #576	; 0x240
 800657c:	4b2d      	ldr	r3, [pc, #180]	; (8006634 <__mdiff+0x110>)
 800657e:	e7e5      	b.n	800654c <__mdiff+0x28>
 8006580:	f102 0814 	add.w	r8, r2, #20
 8006584:	46c2      	mov	sl, r8
 8006586:	f04f 0c00 	mov.w	ip, #0
 800658a:	6927      	ldr	r7, [r4, #16]
 800658c:	60c6      	str	r6, [r0, #12]
 800658e:	692e      	ldr	r6, [r5, #16]
 8006590:	f104 0014 	add.w	r0, r4, #20
 8006594:	f105 0914 	add.w	r9, r5, #20
 8006598:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800659c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065a0:	3410      	adds	r4, #16
 80065a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80065a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80065aa:	fa1f f18b 	uxth.w	r1, fp
 80065ae:	448c      	add	ip, r1
 80065b0:	b299      	uxth	r1, r3
 80065b2:	0c1b      	lsrs	r3, r3, #16
 80065b4:	ebac 0101 	sub.w	r1, ip, r1
 80065b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065c0:	b289      	uxth	r1, r1
 80065c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80065c6:	454e      	cmp	r6, r9
 80065c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065cc:	f84a 3b04 	str.w	r3, [sl], #4
 80065d0:	d8e7      	bhi.n	80065a2 <__mdiff+0x7e>
 80065d2:	1b73      	subs	r3, r6, r5
 80065d4:	3b15      	subs	r3, #21
 80065d6:	f023 0303 	bic.w	r3, r3, #3
 80065da:	3515      	adds	r5, #21
 80065dc:	3304      	adds	r3, #4
 80065de:	42ae      	cmp	r6, r5
 80065e0:	bf38      	it	cc
 80065e2:	2304      	movcc	r3, #4
 80065e4:	4418      	add	r0, r3
 80065e6:	4443      	add	r3, r8
 80065e8:	461e      	mov	r6, r3
 80065ea:	4605      	mov	r5, r0
 80065ec:	4575      	cmp	r5, lr
 80065ee:	d30e      	bcc.n	800660e <__mdiff+0xea>
 80065f0:	f10e 0103 	add.w	r1, lr, #3
 80065f4:	1a09      	subs	r1, r1, r0
 80065f6:	f021 0103 	bic.w	r1, r1, #3
 80065fa:	3803      	subs	r0, #3
 80065fc:	4586      	cmp	lr, r0
 80065fe:	bf38      	it	cc
 8006600:	2100      	movcc	r1, #0
 8006602:	4419      	add	r1, r3
 8006604:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006608:	b18b      	cbz	r3, 800662e <__mdiff+0x10a>
 800660a:	6117      	str	r7, [r2, #16]
 800660c:	e7a4      	b.n	8006558 <__mdiff+0x34>
 800660e:	f855 8b04 	ldr.w	r8, [r5], #4
 8006612:	fa1f f188 	uxth.w	r1, r8
 8006616:	4461      	add	r1, ip
 8006618:	140c      	asrs	r4, r1, #16
 800661a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800661e:	b289      	uxth	r1, r1
 8006620:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006624:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006628:	f846 1b04 	str.w	r1, [r6], #4
 800662c:	e7de      	b.n	80065ec <__mdiff+0xc8>
 800662e:	3f01      	subs	r7, #1
 8006630:	e7e8      	b.n	8006604 <__mdiff+0xe0>
 8006632:	bf00      	nop
 8006634:	08007b90 	.word	0x08007b90
 8006638:	08007c1c 	.word	0x08007c1c

0800663c <__ulp>:
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <__ulp+0x48>)
 800663e:	400b      	ands	r3, r1
 8006640:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006644:	2b00      	cmp	r3, #0
 8006646:	dd02      	ble.n	800664e <__ulp+0x12>
 8006648:	2000      	movs	r0, #0
 800664a:	4619      	mov	r1, r3
 800664c:	4770      	bx	lr
 800664e:	425b      	negs	r3, r3
 8006650:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006654:	f04f 0000 	mov.w	r0, #0
 8006658:	f04f 0100 	mov.w	r1, #0
 800665c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006660:	da04      	bge.n	800666c <__ulp+0x30>
 8006662:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006666:	fa43 f102 	asr.w	r1, r3, r2
 800666a:	4770      	bx	lr
 800666c:	f1a2 0314 	sub.w	r3, r2, #20
 8006670:	2b1e      	cmp	r3, #30
 8006672:	bfd6      	itet	le
 8006674:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006678:	2301      	movgt	r3, #1
 800667a:	fa22 f303 	lsrle.w	r3, r2, r3
 800667e:	4618      	mov	r0, r3
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	7ff00000 	.word	0x7ff00000

08006688 <__b2d>:
 8006688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800668c:	6907      	ldr	r7, [r0, #16]
 800668e:	f100 0914 	add.w	r9, r0, #20
 8006692:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006696:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800669a:	f1a7 0804 	sub.w	r8, r7, #4
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff fd4e 	bl	8006140 <__hi0bits>
 80066a4:	f1c0 0320 	rsb	r3, r0, #32
 80066a8:	280a      	cmp	r0, #10
 80066aa:	600b      	str	r3, [r1, #0]
 80066ac:	491f      	ldr	r1, [pc, #124]	; (800672c <__b2d+0xa4>)
 80066ae:	dc17      	bgt.n	80066e0 <__b2d+0x58>
 80066b0:	45c1      	cmp	r9, r8
 80066b2:	bf28      	it	cs
 80066b4:	2200      	movcs	r2, #0
 80066b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80066ba:	fa26 f30c 	lsr.w	r3, r6, ip
 80066be:	bf38      	it	cc
 80066c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80066c4:	ea43 0501 	orr.w	r5, r3, r1
 80066c8:	f100 0315 	add.w	r3, r0, #21
 80066cc:	fa06 f303 	lsl.w	r3, r6, r3
 80066d0:	fa22 f20c 	lsr.w	r2, r2, ip
 80066d4:	ea43 0402 	orr.w	r4, r3, r2
 80066d8:	4620      	mov	r0, r4
 80066da:	4629      	mov	r1, r5
 80066dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e0:	45c1      	cmp	r9, r8
 80066e2:	bf2e      	itee	cs
 80066e4:	2200      	movcs	r2, #0
 80066e6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80066ea:	f1a7 0808 	subcc.w	r8, r7, #8
 80066ee:	f1b0 030b 	subs.w	r3, r0, #11
 80066f2:	d016      	beq.n	8006722 <__b2d+0x9a>
 80066f4:	f1c3 0720 	rsb	r7, r3, #32
 80066f8:	fa22 f107 	lsr.w	r1, r2, r7
 80066fc:	45c8      	cmp	r8, r9
 80066fe:	fa06 f603 	lsl.w	r6, r6, r3
 8006702:	ea46 0601 	orr.w	r6, r6, r1
 8006706:	bf94      	ite	ls
 8006708:	2100      	movls	r1, #0
 800670a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800670e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006712:	fa02 f003 	lsl.w	r0, r2, r3
 8006716:	40f9      	lsrs	r1, r7
 8006718:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800671c:	ea40 0401 	orr.w	r4, r0, r1
 8006720:	e7da      	b.n	80066d8 <__b2d+0x50>
 8006722:	4614      	mov	r4, r2
 8006724:	ea46 0501 	orr.w	r5, r6, r1
 8006728:	e7d6      	b.n	80066d8 <__b2d+0x50>
 800672a:	bf00      	nop
 800672c:	3ff00000 	.word	0x3ff00000

08006730 <__d2b>:
 8006730:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006734:	2101      	movs	r1, #1
 8006736:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800673a:	4690      	mov	r8, r2
 800673c:	461d      	mov	r5, r3
 800673e:	f7ff fc0d 	bl	8005f5c <_Balloc>
 8006742:	4604      	mov	r4, r0
 8006744:	b930      	cbnz	r0, 8006754 <__d2b+0x24>
 8006746:	4602      	mov	r2, r0
 8006748:	f240 310a 	movw	r1, #778	; 0x30a
 800674c:	4b24      	ldr	r3, [pc, #144]	; (80067e0 <__d2b+0xb0>)
 800674e:	4825      	ldr	r0, [pc, #148]	; (80067e4 <__d2b+0xb4>)
 8006750:	f000 fb40 	bl	8006dd4 <__assert_func>
 8006754:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006758:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800675c:	bb2d      	cbnz	r5, 80067aa <__d2b+0x7a>
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	f1b8 0300 	subs.w	r3, r8, #0
 8006764:	d026      	beq.n	80067b4 <__d2b+0x84>
 8006766:	4668      	mov	r0, sp
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	f7ff fd09 	bl	8006180 <__lo0bits>
 800676e:	9900      	ldr	r1, [sp, #0]
 8006770:	b1f0      	cbz	r0, 80067b0 <__d2b+0x80>
 8006772:	9a01      	ldr	r2, [sp, #4]
 8006774:	f1c0 0320 	rsb	r3, r0, #32
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	430b      	orrs	r3, r1
 800677e:	40c2      	lsrs	r2, r0
 8006780:	6163      	str	r3, [r4, #20]
 8006782:	9201      	str	r2, [sp, #4]
 8006784:	9b01      	ldr	r3, [sp, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf14      	ite	ne
 800678a:	2102      	movne	r1, #2
 800678c:	2101      	moveq	r1, #1
 800678e:	61a3      	str	r3, [r4, #24]
 8006790:	6121      	str	r1, [r4, #16]
 8006792:	b1c5      	cbz	r5, 80067c6 <__d2b+0x96>
 8006794:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006798:	4405      	add	r5, r0
 800679a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800679e:	603d      	str	r5, [r7, #0]
 80067a0:	6030      	str	r0, [r6, #0]
 80067a2:	4620      	mov	r0, r4
 80067a4:	b002      	add	sp, #8
 80067a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ae:	e7d6      	b.n	800675e <__d2b+0x2e>
 80067b0:	6161      	str	r1, [r4, #20]
 80067b2:	e7e7      	b.n	8006784 <__d2b+0x54>
 80067b4:	a801      	add	r0, sp, #4
 80067b6:	f7ff fce3 	bl	8006180 <__lo0bits>
 80067ba:	2101      	movs	r1, #1
 80067bc:	9b01      	ldr	r3, [sp, #4]
 80067be:	6121      	str	r1, [r4, #16]
 80067c0:	6163      	str	r3, [r4, #20]
 80067c2:	3020      	adds	r0, #32
 80067c4:	e7e5      	b.n	8006792 <__d2b+0x62>
 80067c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80067ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067ce:	6038      	str	r0, [r7, #0]
 80067d0:	6918      	ldr	r0, [r3, #16]
 80067d2:	f7ff fcb5 	bl	8006140 <__hi0bits>
 80067d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80067da:	6031      	str	r1, [r6, #0]
 80067dc:	e7e1      	b.n	80067a2 <__d2b+0x72>
 80067de:	bf00      	nop
 80067e0:	08007b90 	.word	0x08007b90
 80067e4:	08007c1c 	.word	0x08007c1c

080067e8 <__ratio>:
 80067e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	4688      	mov	r8, r1
 80067ee:	4669      	mov	r1, sp
 80067f0:	4681      	mov	r9, r0
 80067f2:	f7ff ff49 	bl	8006688 <__b2d>
 80067f6:	460f      	mov	r7, r1
 80067f8:	4604      	mov	r4, r0
 80067fa:	460d      	mov	r5, r1
 80067fc:	4640      	mov	r0, r8
 80067fe:	a901      	add	r1, sp, #4
 8006800:	f7ff ff42 	bl	8006688 <__b2d>
 8006804:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006808:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800680c:	468b      	mov	fp, r1
 800680e:	eba3 0c02 	sub.w	ip, r3, r2
 8006812:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800681c:	2b00      	cmp	r3, #0
 800681e:	bfd5      	itete	le
 8006820:	460a      	movle	r2, r1
 8006822:	462a      	movgt	r2, r5
 8006824:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006828:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800682c:	bfd8      	it	le
 800682e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006832:	465b      	mov	r3, fp
 8006834:	4602      	mov	r2, r0
 8006836:	4639      	mov	r1, r7
 8006838:	4620      	mov	r0, r4
 800683a:	f7f9 ff77 	bl	800072c <__aeabi_ddiv>
 800683e:	b003      	add	sp, #12
 8006840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006844 <__copybits>:
 8006844:	3901      	subs	r1, #1
 8006846:	b570      	push	{r4, r5, r6, lr}
 8006848:	1149      	asrs	r1, r1, #5
 800684a:	6914      	ldr	r4, [r2, #16]
 800684c:	3101      	adds	r1, #1
 800684e:	f102 0314 	add.w	r3, r2, #20
 8006852:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006856:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800685a:	1f05      	subs	r5, r0, #4
 800685c:	42a3      	cmp	r3, r4
 800685e:	d30c      	bcc.n	800687a <__copybits+0x36>
 8006860:	1aa3      	subs	r3, r4, r2
 8006862:	3b11      	subs	r3, #17
 8006864:	f023 0303 	bic.w	r3, r3, #3
 8006868:	3211      	adds	r2, #17
 800686a:	42a2      	cmp	r2, r4
 800686c:	bf88      	it	hi
 800686e:	2300      	movhi	r3, #0
 8006870:	4418      	add	r0, r3
 8006872:	2300      	movs	r3, #0
 8006874:	4288      	cmp	r0, r1
 8006876:	d305      	bcc.n	8006884 <__copybits+0x40>
 8006878:	bd70      	pop	{r4, r5, r6, pc}
 800687a:	f853 6b04 	ldr.w	r6, [r3], #4
 800687e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006882:	e7eb      	b.n	800685c <__copybits+0x18>
 8006884:	f840 3b04 	str.w	r3, [r0], #4
 8006888:	e7f4      	b.n	8006874 <__copybits+0x30>

0800688a <__any_on>:
 800688a:	f100 0214 	add.w	r2, r0, #20
 800688e:	6900      	ldr	r0, [r0, #16]
 8006890:	114b      	asrs	r3, r1, #5
 8006892:	4298      	cmp	r0, r3
 8006894:	b510      	push	{r4, lr}
 8006896:	db11      	blt.n	80068bc <__any_on+0x32>
 8006898:	dd0a      	ble.n	80068b0 <__any_on+0x26>
 800689a:	f011 011f 	ands.w	r1, r1, #31
 800689e:	d007      	beq.n	80068b0 <__any_on+0x26>
 80068a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80068a4:	fa24 f001 	lsr.w	r0, r4, r1
 80068a8:	fa00 f101 	lsl.w	r1, r0, r1
 80068ac:	428c      	cmp	r4, r1
 80068ae:	d10b      	bne.n	80068c8 <__any_on+0x3e>
 80068b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d803      	bhi.n	80068c0 <__any_on+0x36>
 80068b8:	2000      	movs	r0, #0
 80068ba:	bd10      	pop	{r4, pc}
 80068bc:	4603      	mov	r3, r0
 80068be:	e7f7      	b.n	80068b0 <__any_on+0x26>
 80068c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d0f5      	beq.n	80068b4 <__any_on+0x2a>
 80068c8:	2001      	movs	r0, #1
 80068ca:	e7f6      	b.n	80068ba <__any_on+0x30>

080068cc <_calloc_r>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	fba1 5402 	umull	r5, r4, r1, r2
 80068d2:	b934      	cbnz	r4, 80068e2 <_calloc_r+0x16>
 80068d4:	4629      	mov	r1, r5
 80068d6:	f000 f875 	bl	80069c4 <_malloc_r>
 80068da:	4606      	mov	r6, r0
 80068dc:	b928      	cbnz	r0, 80068ea <_calloc_r+0x1e>
 80068de:	4630      	mov	r0, r6
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	220c      	movs	r2, #12
 80068e4:	2600      	movs	r6, #0
 80068e6:	6002      	str	r2, [r0, #0]
 80068e8:	e7f9      	b.n	80068de <_calloc_r+0x12>
 80068ea:	462a      	mov	r2, r5
 80068ec:	4621      	mov	r1, r4
 80068ee:	f7fc fbf1 	bl	80030d4 <memset>
 80068f2:	e7f4      	b.n	80068de <_calloc_r+0x12>

080068f4 <_free_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4605      	mov	r5, r0
 80068f8:	2900      	cmp	r1, #0
 80068fa:	d040      	beq.n	800697e <_free_r+0x8a>
 80068fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006900:	1f0c      	subs	r4, r1, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	bfb8      	it	lt
 8006906:	18e4      	addlt	r4, r4, r3
 8006908:	f000 faae 	bl	8006e68 <__malloc_lock>
 800690c:	4a1c      	ldr	r2, [pc, #112]	; (8006980 <_free_r+0x8c>)
 800690e:	6813      	ldr	r3, [r2, #0]
 8006910:	b933      	cbnz	r3, 8006920 <_free_r+0x2c>
 8006912:	6063      	str	r3, [r4, #4]
 8006914:	6014      	str	r4, [r2, #0]
 8006916:	4628      	mov	r0, r5
 8006918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800691c:	f000 baaa 	b.w	8006e74 <__malloc_unlock>
 8006920:	42a3      	cmp	r3, r4
 8006922:	d908      	bls.n	8006936 <_free_r+0x42>
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	1821      	adds	r1, r4, r0
 8006928:	428b      	cmp	r3, r1
 800692a:	bf01      	itttt	eq
 800692c:	6819      	ldreq	r1, [r3, #0]
 800692e:	685b      	ldreq	r3, [r3, #4]
 8006930:	1809      	addeq	r1, r1, r0
 8006932:	6021      	streq	r1, [r4, #0]
 8006934:	e7ed      	b.n	8006912 <_free_r+0x1e>
 8006936:	461a      	mov	r2, r3
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	b10b      	cbz	r3, 8006940 <_free_r+0x4c>
 800693c:	42a3      	cmp	r3, r4
 800693e:	d9fa      	bls.n	8006936 <_free_r+0x42>
 8006940:	6811      	ldr	r1, [r2, #0]
 8006942:	1850      	adds	r0, r2, r1
 8006944:	42a0      	cmp	r0, r4
 8006946:	d10b      	bne.n	8006960 <_free_r+0x6c>
 8006948:	6820      	ldr	r0, [r4, #0]
 800694a:	4401      	add	r1, r0
 800694c:	1850      	adds	r0, r2, r1
 800694e:	4283      	cmp	r3, r0
 8006950:	6011      	str	r1, [r2, #0]
 8006952:	d1e0      	bne.n	8006916 <_free_r+0x22>
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4401      	add	r1, r0
 800695a:	6011      	str	r1, [r2, #0]
 800695c:	6053      	str	r3, [r2, #4]
 800695e:	e7da      	b.n	8006916 <_free_r+0x22>
 8006960:	d902      	bls.n	8006968 <_free_r+0x74>
 8006962:	230c      	movs	r3, #12
 8006964:	602b      	str	r3, [r5, #0]
 8006966:	e7d6      	b.n	8006916 <_free_r+0x22>
 8006968:	6820      	ldr	r0, [r4, #0]
 800696a:	1821      	adds	r1, r4, r0
 800696c:	428b      	cmp	r3, r1
 800696e:	bf01      	itttt	eq
 8006970:	6819      	ldreq	r1, [r3, #0]
 8006972:	685b      	ldreq	r3, [r3, #4]
 8006974:	1809      	addeq	r1, r1, r0
 8006976:	6021      	streq	r1, [r4, #0]
 8006978:	6063      	str	r3, [r4, #4]
 800697a:	6054      	str	r4, [r2, #4]
 800697c:	e7cb      	b.n	8006916 <_free_r+0x22>
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	200002a8 	.word	0x200002a8

08006984 <sbrk_aligned>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4e0e      	ldr	r6, [pc, #56]	; (80069c0 <sbrk_aligned+0x3c>)
 8006988:	460c      	mov	r4, r1
 800698a:	6831      	ldr	r1, [r6, #0]
 800698c:	4605      	mov	r5, r0
 800698e:	b911      	cbnz	r1, 8006996 <sbrk_aligned+0x12>
 8006990:	f000 f9ee 	bl	8006d70 <_sbrk_r>
 8006994:	6030      	str	r0, [r6, #0]
 8006996:	4621      	mov	r1, r4
 8006998:	4628      	mov	r0, r5
 800699a:	f000 f9e9 	bl	8006d70 <_sbrk_r>
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	d00a      	beq.n	80069b8 <sbrk_aligned+0x34>
 80069a2:	1cc4      	adds	r4, r0, #3
 80069a4:	f024 0403 	bic.w	r4, r4, #3
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d007      	beq.n	80069bc <sbrk_aligned+0x38>
 80069ac:	1a21      	subs	r1, r4, r0
 80069ae:	4628      	mov	r0, r5
 80069b0:	f000 f9de 	bl	8006d70 <_sbrk_r>
 80069b4:	3001      	adds	r0, #1
 80069b6:	d101      	bne.n	80069bc <sbrk_aligned+0x38>
 80069b8:	f04f 34ff 	mov.w	r4, #4294967295
 80069bc:	4620      	mov	r0, r4
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	200002ac 	.word	0x200002ac

080069c4 <_malloc_r>:
 80069c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c8:	1ccd      	adds	r5, r1, #3
 80069ca:	f025 0503 	bic.w	r5, r5, #3
 80069ce:	3508      	adds	r5, #8
 80069d0:	2d0c      	cmp	r5, #12
 80069d2:	bf38      	it	cc
 80069d4:	250c      	movcc	r5, #12
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	4607      	mov	r7, r0
 80069da:	db01      	blt.n	80069e0 <_malloc_r+0x1c>
 80069dc:	42a9      	cmp	r1, r5
 80069de:	d905      	bls.n	80069ec <_malloc_r+0x28>
 80069e0:	230c      	movs	r3, #12
 80069e2:	2600      	movs	r6, #0
 80069e4:	603b      	str	r3, [r7, #0]
 80069e6:	4630      	mov	r0, r6
 80069e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069ec:	4e2e      	ldr	r6, [pc, #184]	; (8006aa8 <_malloc_r+0xe4>)
 80069ee:	f000 fa3b 	bl	8006e68 <__malloc_lock>
 80069f2:	6833      	ldr	r3, [r6, #0]
 80069f4:	461c      	mov	r4, r3
 80069f6:	bb34      	cbnz	r4, 8006a46 <_malloc_r+0x82>
 80069f8:	4629      	mov	r1, r5
 80069fa:	4638      	mov	r0, r7
 80069fc:	f7ff ffc2 	bl	8006984 <sbrk_aligned>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	4604      	mov	r4, r0
 8006a04:	d14d      	bne.n	8006aa2 <_malloc_r+0xde>
 8006a06:	6834      	ldr	r4, [r6, #0]
 8006a08:	4626      	mov	r6, r4
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	d140      	bne.n	8006a90 <_malloc_r+0xcc>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	4631      	mov	r1, r6
 8006a12:	4638      	mov	r0, r7
 8006a14:	eb04 0803 	add.w	r8, r4, r3
 8006a18:	f000 f9aa 	bl	8006d70 <_sbrk_r>
 8006a1c:	4580      	cmp	r8, r0
 8006a1e:	d13a      	bne.n	8006a96 <_malloc_r+0xd2>
 8006a20:	6821      	ldr	r1, [r4, #0]
 8006a22:	3503      	adds	r5, #3
 8006a24:	1a6d      	subs	r5, r5, r1
 8006a26:	f025 0503 	bic.w	r5, r5, #3
 8006a2a:	3508      	adds	r5, #8
 8006a2c:	2d0c      	cmp	r5, #12
 8006a2e:	bf38      	it	cc
 8006a30:	250c      	movcc	r5, #12
 8006a32:	4638      	mov	r0, r7
 8006a34:	4629      	mov	r1, r5
 8006a36:	f7ff ffa5 	bl	8006984 <sbrk_aligned>
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d02b      	beq.n	8006a96 <_malloc_r+0xd2>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	442b      	add	r3, r5
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	e00e      	b.n	8006a64 <_malloc_r+0xa0>
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	1b52      	subs	r2, r2, r5
 8006a4a:	d41e      	bmi.n	8006a8a <_malloc_r+0xc6>
 8006a4c:	2a0b      	cmp	r2, #11
 8006a4e:	d916      	bls.n	8006a7e <_malloc_r+0xba>
 8006a50:	1961      	adds	r1, r4, r5
 8006a52:	42a3      	cmp	r3, r4
 8006a54:	6025      	str	r5, [r4, #0]
 8006a56:	bf18      	it	ne
 8006a58:	6059      	strne	r1, [r3, #4]
 8006a5a:	6863      	ldr	r3, [r4, #4]
 8006a5c:	bf08      	it	eq
 8006a5e:	6031      	streq	r1, [r6, #0]
 8006a60:	5162      	str	r2, [r4, r5]
 8006a62:	604b      	str	r3, [r1, #4]
 8006a64:	4638      	mov	r0, r7
 8006a66:	f104 060b 	add.w	r6, r4, #11
 8006a6a:	f000 fa03 	bl	8006e74 <__malloc_unlock>
 8006a6e:	f026 0607 	bic.w	r6, r6, #7
 8006a72:	1d23      	adds	r3, r4, #4
 8006a74:	1af2      	subs	r2, r6, r3
 8006a76:	d0b6      	beq.n	80069e6 <_malloc_r+0x22>
 8006a78:	1b9b      	subs	r3, r3, r6
 8006a7a:	50a3      	str	r3, [r4, r2]
 8006a7c:	e7b3      	b.n	80069e6 <_malloc_r+0x22>
 8006a7e:	6862      	ldr	r2, [r4, #4]
 8006a80:	42a3      	cmp	r3, r4
 8006a82:	bf0c      	ite	eq
 8006a84:	6032      	streq	r2, [r6, #0]
 8006a86:	605a      	strne	r2, [r3, #4]
 8006a88:	e7ec      	b.n	8006a64 <_malloc_r+0xa0>
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	6864      	ldr	r4, [r4, #4]
 8006a8e:	e7b2      	b.n	80069f6 <_malloc_r+0x32>
 8006a90:	4634      	mov	r4, r6
 8006a92:	6876      	ldr	r6, [r6, #4]
 8006a94:	e7b9      	b.n	8006a0a <_malloc_r+0x46>
 8006a96:	230c      	movs	r3, #12
 8006a98:	4638      	mov	r0, r7
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	f000 f9ea 	bl	8006e74 <__malloc_unlock>
 8006aa0:	e7a1      	b.n	80069e6 <_malloc_r+0x22>
 8006aa2:	6025      	str	r5, [r4, #0]
 8006aa4:	e7de      	b.n	8006a64 <_malloc_r+0xa0>
 8006aa6:	bf00      	nop
 8006aa8:	200002a8 	.word	0x200002a8

08006aac <__ssputs_r>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	688e      	ldr	r6, [r1, #8]
 8006ab2:	4682      	mov	sl, r0
 8006ab4:	429e      	cmp	r6, r3
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	4690      	mov	r8, r2
 8006aba:	461f      	mov	r7, r3
 8006abc:	d838      	bhi.n	8006b30 <__ssputs_r+0x84>
 8006abe:	898a      	ldrh	r2, [r1, #12]
 8006ac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ac4:	d032      	beq.n	8006b2c <__ssputs_r+0x80>
 8006ac6:	6825      	ldr	r5, [r4, #0]
 8006ac8:	6909      	ldr	r1, [r1, #16]
 8006aca:	3301      	adds	r3, #1
 8006acc:	eba5 0901 	sub.w	r9, r5, r1
 8006ad0:	6965      	ldr	r5, [r4, #20]
 8006ad2:	444b      	add	r3, r9
 8006ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ad8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006adc:	106d      	asrs	r5, r5, #1
 8006ade:	429d      	cmp	r5, r3
 8006ae0:	bf38      	it	cc
 8006ae2:	461d      	movcc	r5, r3
 8006ae4:	0553      	lsls	r3, r2, #21
 8006ae6:	d531      	bpl.n	8006b4c <__ssputs_r+0xa0>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7ff ff6b 	bl	80069c4 <_malloc_r>
 8006aee:	4606      	mov	r6, r0
 8006af0:	b950      	cbnz	r0, 8006b08 <__ssputs_r+0x5c>
 8006af2:	230c      	movs	r3, #12
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	f8ca 3000 	str.w	r3, [sl]
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b02:	81a3      	strh	r3, [r4, #12]
 8006b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b08:	464a      	mov	r2, r9
 8006b0a:	6921      	ldr	r1, [r4, #16]
 8006b0c:	f7ff fa18 	bl	8005f40 <memcpy>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	6126      	str	r6, [r4, #16]
 8006b1e:	444e      	add	r6, r9
 8006b20:	6026      	str	r6, [r4, #0]
 8006b22:	463e      	mov	r6, r7
 8006b24:	6165      	str	r5, [r4, #20]
 8006b26:	eba5 0509 	sub.w	r5, r5, r9
 8006b2a:	60a5      	str	r5, [r4, #8]
 8006b2c:	42be      	cmp	r6, r7
 8006b2e:	d900      	bls.n	8006b32 <__ssputs_r+0x86>
 8006b30:	463e      	mov	r6, r7
 8006b32:	4632      	mov	r2, r6
 8006b34:	4641      	mov	r1, r8
 8006b36:	6820      	ldr	r0, [r4, #0]
 8006b38:	f000 f97c 	bl	8006e34 <memmove>
 8006b3c:	68a3      	ldr	r3, [r4, #8]
 8006b3e:	2000      	movs	r0, #0
 8006b40:	1b9b      	subs	r3, r3, r6
 8006b42:	60a3      	str	r3, [r4, #8]
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	4433      	add	r3, r6
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	e7db      	b.n	8006b04 <__ssputs_r+0x58>
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	f000 f997 	bl	8006e80 <_realloc_r>
 8006b52:	4606      	mov	r6, r0
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d1e1      	bne.n	8006b1c <__ssputs_r+0x70>
 8006b58:	4650      	mov	r0, sl
 8006b5a:	6921      	ldr	r1, [r4, #16]
 8006b5c:	f7ff feca 	bl	80068f4 <_free_r>
 8006b60:	e7c7      	b.n	8006af2 <__ssputs_r+0x46>
	...

08006b64 <_svfiprintf_r>:
 8006b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b68:	4698      	mov	r8, r3
 8006b6a:	898b      	ldrh	r3, [r1, #12]
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	061b      	lsls	r3, r3, #24
 8006b70:	460d      	mov	r5, r1
 8006b72:	4614      	mov	r4, r2
 8006b74:	b09d      	sub	sp, #116	; 0x74
 8006b76:	d50e      	bpl.n	8006b96 <_svfiprintf_r+0x32>
 8006b78:	690b      	ldr	r3, [r1, #16]
 8006b7a:	b963      	cbnz	r3, 8006b96 <_svfiprintf_r+0x32>
 8006b7c:	2140      	movs	r1, #64	; 0x40
 8006b7e:	f7ff ff21 	bl	80069c4 <_malloc_r>
 8006b82:	6028      	str	r0, [r5, #0]
 8006b84:	6128      	str	r0, [r5, #16]
 8006b86:	b920      	cbnz	r0, 8006b92 <_svfiprintf_r+0x2e>
 8006b88:	230c      	movs	r3, #12
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	e0d1      	b.n	8006d36 <_svfiprintf_r+0x1d2>
 8006b92:	2340      	movs	r3, #64	; 0x40
 8006b94:	616b      	str	r3, [r5, #20]
 8006b96:	2300      	movs	r3, #0
 8006b98:	9309      	str	r3, [sp, #36]	; 0x24
 8006b9a:	2320      	movs	r3, #32
 8006b9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ba0:	2330      	movs	r3, #48	; 0x30
 8006ba2:	f04f 0901 	mov.w	r9, #1
 8006ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006baa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d50 <_svfiprintf_r+0x1ec>
 8006bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	469a      	mov	sl, r3
 8006bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bba:	b10a      	cbz	r2, 8006bc0 <_svfiprintf_r+0x5c>
 8006bbc:	2a25      	cmp	r2, #37	; 0x25
 8006bbe:	d1f9      	bne.n	8006bb4 <_svfiprintf_r+0x50>
 8006bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8006bc4:	d00b      	beq.n	8006bde <_svfiprintf_r+0x7a>
 8006bc6:	465b      	mov	r3, fp
 8006bc8:	4622      	mov	r2, r4
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f7ff ff6d 	bl	8006aac <__ssputs_r>
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	f000 80aa 	beq.w	8006d2c <_svfiprintf_r+0x1c8>
 8006bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bda:	445a      	add	r2, fp
 8006bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8006bde:	f89a 3000 	ldrb.w	r3, [sl]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 80a2 	beq.w	8006d2c <_svfiprintf_r+0x1c8>
 8006be8:	2300      	movs	r3, #0
 8006bea:	f04f 32ff 	mov.w	r2, #4294967295
 8006bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bf2:	f10a 0a01 	add.w	sl, sl, #1
 8006bf6:	9304      	str	r3, [sp, #16]
 8006bf8:	9307      	str	r3, [sp, #28]
 8006bfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bfe:	931a      	str	r3, [sp, #104]	; 0x68
 8006c00:	4654      	mov	r4, sl
 8006c02:	2205      	movs	r2, #5
 8006c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c08:	4851      	ldr	r0, [pc, #324]	; (8006d50 <_svfiprintf_r+0x1ec>)
 8006c0a:	f7ff f98b 	bl	8005f24 <memchr>
 8006c0e:	9a04      	ldr	r2, [sp, #16]
 8006c10:	b9d8      	cbnz	r0, 8006c4a <_svfiprintf_r+0xe6>
 8006c12:	06d0      	lsls	r0, r2, #27
 8006c14:	bf44      	itt	mi
 8006c16:	2320      	movmi	r3, #32
 8006c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c1c:	0711      	lsls	r1, r2, #28
 8006c1e:	bf44      	itt	mi
 8006c20:	232b      	movmi	r3, #43	; 0x2b
 8006c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c26:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2c:	d015      	beq.n	8006c5a <_svfiprintf_r+0xf6>
 8006c2e:	4654      	mov	r4, sl
 8006c30:	2000      	movs	r0, #0
 8006c32:	f04f 0c0a 	mov.w	ip, #10
 8006c36:	9a07      	ldr	r2, [sp, #28]
 8006c38:	4621      	mov	r1, r4
 8006c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c3e:	3b30      	subs	r3, #48	; 0x30
 8006c40:	2b09      	cmp	r3, #9
 8006c42:	d94e      	bls.n	8006ce2 <_svfiprintf_r+0x17e>
 8006c44:	b1b0      	cbz	r0, 8006c74 <_svfiprintf_r+0x110>
 8006c46:	9207      	str	r2, [sp, #28]
 8006c48:	e014      	b.n	8006c74 <_svfiprintf_r+0x110>
 8006c4a:	eba0 0308 	sub.w	r3, r0, r8
 8006c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c52:	4313      	orrs	r3, r2
 8006c54:	46a2      	mov	sl, r4
 8006c56:	9304      	str	r3, [sp, #16]
 8006c58:	e7d2      	b.n	8006c00 <_svfiprintf_r+0x9c>
 8006c5a:	9b03      	ldr	r3, [sp, #12]
 8006c5c:	1d19      	adds	r1, r3, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	9103      	str	r1, [sp, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bfbb      	ittet	lt
 8006c66:	425b      	neglt	r3, r3
 8006c68:	f042 0202 	orrlt.w	r2, r2, #2
 8006c6c:	9307      	strge	r3, [sp, #28]
 8006c6e:	9307      	strlt	r3, [sp, #28]
 8006c70:	bfb8      	it	lt
 8006c72:	9204      	strlt	r2, [sp, #16]
 8006c74:	7823      	ldrb	r3, [r4, #0]
 8006c76:	2b2e      	cmp	r3, #46	; 0x2e
 8006c78:	d10c      	bne.n	8006c94 <_svfiprintf_r+0x130>
 8006c7a:	7863      	ldrb	r3, [r4, #1]
 8006c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7e:	d135      	bne.n	8006cec <_svfiprintf_r+0x188>
 8006c80:	9b03      	ldr	r3, [sp, #12]
 8006c82:	3402      	adds	r4, #2
 8006c84:	1d1a      	adds	r2, r3, #4
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	9203      	str	r2, [sp, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bfb8      	it	lt
 8006c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c92:	9305      	str	r3, [sp, #20]
 8006c94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006d54 <_svfiprintf_r+0x1f0>
 8006c98:	2203      	movs	r2, #3
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	7821      	ldrb	r1, [r4, #0]
 8006c9e:	f7ff f941 	bl	8005f24 <memchr>
 8006ca2:	b140      	cbz	r0, 8006cb6 <_svfiprintf_r+0x152>
 8006ca4:	2340      	movs	r3, #64	; 0x40
 8006ca6:	eba0 000a 	sub.w	r0, r0, sl
 8006caa:	fa03 f000 	lsl.w	r0, r3, r0
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	3401      	adds	r4, #1
 8006cb2:	4303      	orrs	r3, r0
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cba:	2206      	movs	r2, #6
 8006cbc:	4826      	ldr	r0, [pc, #152]	; (8006d58 <_svfiprintf_r+0x1f4>)
 8006cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cc2:	f7ff f92f 	bl	8005f24 <memchr>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d038      	beq.n	8006d3c <_svfiprintf_r+0x1d8>
 8006cca:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <_svfiprintf_r+0x1f8>)
 8006ccc:	bb1b      	cbnz	r3, 8006d16 <_svfiprintf_r+0x1b2>
 8006cce:	9b03      	ldr	r3, [sp, #12]
 8006cd0:	3307      	adds	r3, #7
 8006cd2:	f023 0307 	bic.w	r3, r3, #7
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	9303      	str	r3, [sp, #12]
 8006cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cdc:	4433      	add	r3, r6
 8006cde:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce0:	e767      	b.n	8006bb2 <_svfiprintf_r+0x4e>
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	2001      	movs	r0, #1
 8006ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cea:	e7a5      	b.n	8006c38 <_svfiprintf_r+0xd4>
 8006cec:	2300      	movs	r3, #0
 8006cee:	f04f 0c0a 	mov.w	ip, #10
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	3401      	adds	r4, #1
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cfe:	3a30      	subs	r2, #48	; 0x30
 8006d00:	2a09      	cmp	r2, #9
 8006d02:	d903      	bls.n	8006d0c <_svfiprintf_r+0x1a8>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0c5      	beq.n	8006c94 <_svfiprintf_r+0x130>
 8006d08:	9105      	str	r1, [sp, #20]
 8006d0a:	e7c3      	b.n	8006c94 <_svfiprintf_r+0x130>
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	2301      	movs	r3, #1
 8006d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d14:	e7f0      	b.n	8006cf8 <_svfiprintf_r+0x194>
 8006d16:	ab03      	add	r3, sp, #12
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <_svfiprintf_r+0x1fc>)
 8006d20:	a904      	add	r1, sp, #16
 8006d22:	f7fc fa7d 	bl	8003220 <_printf_float>
 8006d26:	1c42      	adds	r2, r0, #1
 8006d28:	4606      	mov	r6, r0
 8006d2a:	d1d6      	bne.n	8006cda <_svfiprintf_r+0x176>
 8006d2c:	89ab      	ldrh	r3, [r5, #12]
 8006d2e:	065b      	lsls	r3, r3, #25
 8006d30:	f53f af2c 	bmi.w	8006b8c <_svfiprintf_r+0x28>
 8006d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d36:	b01d      	add	sp, #116	; 0x74
 8006d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3c:	ab03      	add	r3, sp, #12
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	462a      	mov	r2, r5
 8006d42:	4638      	mov	r0, r7
 8006d44:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <_svfiprintf_r+0x1fc>)
 8006d46:	a904      	add	r1, sp, #16
 8006d48:	f7fc fd06 	bl	8003758 <_printf_i>
 8006d4c:	e7eb      	b.n	8006d26 <_svfiprintf_r+0x1c2>
 8006d4e:	bf00      	nop
 8006d50:	08007d74 	.word	0x08007d74
 8006d54:	08007d7a 	.word	0x08007d7a
 8006d58:	08007d7e 	.word	0x08007d7e
 8006d5c:	08003221 	.word	0x08003221
 8006d60:	08006aad 	.word	0x08006aad

08006d64 <nan>:
 8006d64:	2000      	movs	r0, #0
 8006d66:	4901      	ldr	r1, [pc, #4]	; (8006d6c <nan+0x8>)
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	7ff80000 	.word	0x7ff80000

08006d70 <_sbrk_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	2300      	movs	r3, #0
 8006d74:	4d05      	ldr	r5, [pc, #20]	; (8006d8c <_sbrk_r+0x1c>)
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	f7fa fad0 	bl	8001320 <_sbrk>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_sbrk_r+0x1a>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_sbrk_r+0x1a>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	200002b0 	.word	0x200002b0

08006d90 <strncmp>:
 8006d90:	4603      	mov	r3, r0
 8006d92:	b510      	push	{r4, lr}
 8006d94:	b172      	cbz	r2, 8006db4 <strncmp+0x24>
 8006d96:	3901      	subs	r1, #1
 8006d98:	1884      	adds	r4, r0, r2
 8006d9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006da2:	4290      	cmp	r0, r2
 8006da4:	d101      	bne.n	8006daa <strncmp+0x1a>
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	d101      	bne.n	8006dae <strncmp+0x1e>
 8006daa:	1a80      	subs	r0, r0, r2
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d1f3      	bne.n	8006d9a <strncmp+0xa>
 8006db2:	e7fa      	b.n	8006daa <strncmp+0x1a>
 8006db4:	4610      	mov	r0, r2
 8006db6:	e7f9      	b.n	8006dac <strncmp+0x1c>

08006db8 <__ascii_wctomb>:
 8006db8:	4603      	mov	r3, r0
 8006dba:	4608      	mov	r0, r1
 8006dbc:	b141      	cbz	r1, 8006dd0 <__ascii_wctomb+0x18>
 8006dbe:	2aff      	cmp	r2, #255	; 0xff
 8006dc0:	d904      	bls.n	8006dcc <__ascii_wctomb+0x14>
 8006dc2:	228a      	movs	r2, #138	; 0x8a
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	4770      	bx	lr
 8006dcc:	2001      	movs	r0, #1
 8006dce:	700a      	strb	r2, [r1, #0]
 8006dd0:	4770      	bx	lr
	...

08006dd4 <__assert_func>:
 8006dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dd6:	4614      	mov	r4, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <__assert_func+0x2c>)
 8006ddc:	4605      	mov	r5, r0
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68d8      	ldr	r0, [r3, #12]
 8006de2:	b14c      	cbz	r4, 8006df8 <__assert_func+0x24>
 8006de4:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <__assert_func+0x30>)
 8006de6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dea:	9100      	str	r1, [sp, #0]
 8006dec:	462b      	mov	r3, r5
 8006dee:	4906      	ldr	r1, [pc, #24]	; (8006e08 <__assert_func+0x34>)
 8006df0:	f000 f80e 	bl	8006e10 <fiprintf>
 8006df4:	f000 fa8a 	bl	800730c <abort>
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <__assert_func+0x38>)
 8006dfa:	461c      	mov	r4, r3
 8006dfc:	e7f3      	b.n	8006de6 <__assert_func+0x12>
 8006dfe:	bf00      	nop
 8006e00:	2000000c 	.word	0x2000000c
 8006e04:	08007d85 	.word	0x08007d85
 8006e08:	08007d92 	.word	0x08007d92
 8006e0c:	08007dc0 	.word	0x08007dc0

08006e10 <fiprintf>:
 8006e10:	b40e      	push	{r1, r2, r3}
 8006e12:	b503      	push	{r0, r1, lr}
 8006e14:	4601      	mov	r1, r0
 8006e16:	ab03      	add	r3, sp, #12
 8006e18:	4805      	ldr	r0, [pc, #20]	; (8006e30 <fiprintf+0x20>)
 8006e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	f000 f883 	bl	8006f2c <_vfiprintf_r>
 8006e26:	b002      	add	sp, #8
 8006e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e2c:	b003      	add	sp, #12
 8006e2e:	4770      	bx	lr
 8006e30:	2000000c 	.word	0x2000000c

08006e34 <memmove>:
 8006e34:	4288      	cmp	r0, r1
 8006e36:	b510      	push	{r4, lr}
 8006e38:	eb01 0402 	add.w	r4, r1, r2
 8006e3c:	d902      	bls.n	8006e44 <memmove+0x10>
 8006e3e:	4284      	cmp	r4, r0
 8006e40:	4623      	mov	r3, r4
 8006e42:	d807      	bhi.n	8006e54 <memmove+0x20>
 8006e44:	1e43      	subs	r3, r0, #1
 8006e46:	42a1      	cmp	r1, r4
 8006e48:	d008      	beq.n	8006e5c <memmove+0x28>
 8006e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e52:	e7f8      	b.n	8006e46 <memmove+0x12>
 8006e54:	4601      	mov	r1, r0
 8006e56:	4402      	add	r2, r0
 8006e58:	428a      	cmp	r2, r1
 8006e5a:	d100      	bne.n	8006e5e <memmove+0x2a>
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e66:	e7f7      	b.n	8006e58 <memmove+0x24>

08006e68 <__malloc_lock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <__malloc_lock+0x8>)
 8006e6a:	f000 bc0b 	b.w	8007684 <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	200002b4 	.word	0x200002b4

08006e74 <__malloc_unlock>:
 8006e74:	4801      	ldr	r0, [pc, #4]	; (8006e7c <__malloc_unlock+0x8>)
 8006e76:	f000 bc06 	b.w	8007686 <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	200002b4 	.word	0x200002b4

08006e80 <_realloc_r>:
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	4680      	mov	r8, r0
 8006e86:	4614      	mov	r4, r2
 8006e88:	460e      	mov	r6, r1
 8006e8a:	b921      	cbnz	r1, 8006e96 <_realloc_r+0x16>
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e92:	f7ff bd97 	b.w	80069c4 <_malloc_r>
 8006e96:	b92a      	cbnz	r2, 8006ea4 <_realloc_r+0x24>
 8006e98:	f7ff fd2c 	bl	80068f4 <_free_r>
 8006e9c:	4625      	mov	r5, r4
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea4:	f000 fc56 	bl	8007754 <_malloc_usable_size_r>
 8006ea8:	4284      	cmp	r4, r0
 8006eaa:	4607      	mov	r7, r0
 8006eac:	d802      	bhi.n	8006eb4 <_realloc_r+0x34>
 8006eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eb2:	d812      	bhi.n	8006eda <_realloc_r+0x5a>
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	f7ff fd84 	bl	80069c4 <_malloc_r>
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d0ed      	beq.n	8006e9e <_realloc_r+0x1e>
 8006ec2:	42bc      	cmp	r4, r7
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	bf28      	it	cs
 8006eca:	463a      	movcs	r2, r7
 8006ecc:	f7ff f838 	bl	8005f40 <memcpy>
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	f7ff fd0e 	bl	80068f4 <_free_r>
 8006ed8:	e7e1      	b.n	8006e9e <_realloc_r+0x1e>
 8006eda:	4635      	mov	r5, r6
 8006edc:	e7df      	b.n	8006e9e <_realloc_r+0x1e>

08006ede <__sfputc_r>:
 8006ede:	6893      	ldr	r3, [r2, #8]
 8006ee0:	b410      	push	{r4}
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	6093      	str	r3, [r2, #8]
 8006ee8:	da07      	bge.n	8006efa <__sfputc_r+0x1c>
 8006eea:	6994      	ldr	r4, [r2, #24]
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	db01      	blt.n	8006ef4 <__sfputc_r+0x16>
 8006ef0:	290a      	cmp	r1, #10
 8006ef2:	d102      	bne.n	8006efa <__sfputc_r+0x1c>
 8006ef4:	bc10      	pop	{r4}
 8006ef6:	f000 b949 	b.w	800718c <__swbuf_r>
 8006efa:	6813      	ldr	r3, [r2, #0]
 8006efc:	1c58      	adds	r0, r3, #1
 8006efe:	6010      	str	r0, [r2, #0]
 8006f00:	7019      	strb	r1, [r3, #0]
 8006f02:	4608      	mov	r0, r1
 8006f04:	bc10      	pop	{r4}
 8006f06:	4770      	bx	lr

08006f08 <__sfputs_r>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	460f      	mov	r7, r1
 8006f0e:	4614      	mov	r4, r2
 8006f10:	18d5      	adds	r5, r2, r3
 8006f12:	42ac      	cmp	r4, r5
 8006f14:	d101      	bne.n	8006f1a <__sfputs_r+0x12>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e007      	b.n	8006f2a <__sfputs_r+0x22>
 8006f1a:	463a      	mov	r2, r7
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f22:	f7ff ffdc 	bl	8006ede <__sfputc_r>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d1f3      	bne.n	8006f12 <__sfputs_r+0xa>
 8006f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f2c <_vfiprintf_r>:
 8006f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	460d      	mov	r5, r1
 8006f32:	4614      	mov	r4, r2
 8006f34:	4698      	mov	r8, r3
 8006f36:	4606      	mov	r6, r0
 8006f38:	b09d      	sub	sp, #116	; 0x74
 8006f3a:	b118      	cbz	r0, 8006f44 <_vfiprintf_r+0x18>
 8006f3c:	6983      	ldr	r3, [r0, #24]
 8006f3e:	b90b      	cbnz	r3, 8006f44 <_vfiprintf_r+0x18>
 8006f40:	f000 fb02 	bl	8007548 <__sinit>
 8006f44:	4b89      	ldr	r3, [pc, #548]	; (800716c <_vfiprintf_r+0x240>)
 8006f46:	429d      	cmp	r5, r3
 8006f48:	d11b      	bne.n	8006f82 <_vfiprintf_r+0x56>
 8006f4a:	6875      	ldr	r5, [r6, #4]
 8006f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f4e:	07d9      	lsls	r1, r3, #31
 8006f50:	d405      	bmi.n	8006f5e <_vfiprintf_r+0x32>
 8006f52:	89ab      	ldrh	r3, [r5, #12]
 8006f54:	059a      	lsls	r2, r3, #22
 8006f56:	d402      	bmi.n	8006f5e <_vfiprintf_r+0x32>
 8006f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f5a:	f000 fb93 	bl	8007684 <__retarget_lock_acquire_recursive>
 8006f5e:	89ab      	ldrh	r3, [r5, #12]
 8006f60:	071b      	lsls	r3, r3, #28
 8006f62:	d501      	bpl.n	8006f68 <_vfiprintf_r+0x3c>
 8006f64:	692b      	ldr	r3, [r5, #16]
 8006f66:	b9eb      	cbnz	r3, 8006fa4 <_vfiprintf_r+0x78>
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f000 f960 	bl	8007230 <__swsetup_r>
 8006f70:	b1c0      	cbz	r0, 8006fa4 <_vfiprintf_r+0x78>
 8006f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f74:	07dc      	lsls	r4, r3, #31
 8006f76:	d50e      	bpl.n	8006f96 <_vfiprintf_r+0x6a>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	b01d      	add	sp, #116	; 0x74
 8006f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	4b7b      	ldr	r3, [pc, #492]	; (8007170 <_vfiprintf_r+0x244>)
 8006f84:	429d      	cmp	r5, r3
 8006f86:	d101      	bne.n	8006f8c <_vfiprintf_r+0x60>
 8006f88:	68b5      	ldr	r5, [r6, #8]
 8006f8a:	e7df      	b.n	8006f4c <_vfiprintf_r+0x20>
 8006f8c:	4b79      	ldr	r3, [pc, #484]	; (8007174 <_vfiprintf_r+0x248>)
 8006f8e:	429d      	cmp	r5, r3
 8006f90:	bf08      	it	eq
 8006f92:	68f5      	ldreq	r5, [r6, #12]
 8006f94:	e7da      	b.n	8006f4c <_vfiprintf_r+0x20>
 8006f96:	89ab      	ldrh	r3, [r5, #12]
 8006f98:	0598      	lsls	r0, r3, #22
 8006f9a:	d4ed      	bmi.n	8006f78 <_vfiprintf_r+0x4c>
 8006f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f9e:	f000 fb72 	bl	8007686 <__retarget_lock_release_recursive>
 8006fa2:	e7e9      	b.n	8006f78 <_vfiprintf_r+0x4c>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa8:	2320      	movs	r3, #32
 8006faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fae:	2330      	movs	r3, #48	; 0x30
 8006fb0:	f04f 0901 	mov.w	r9, #1
 8006fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fb8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007178 <_vfiprintf_r+0x24c>
 8006fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	469a      	mov	sl, r3
 8006fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc8:	b10a      	cbz	r2, 8006fce <_vfiprintf_r+0xa2>
 8006fca:	2a25      	cmp	r2, #37	; 0x25
 8006fcc:	d1f9      	bne.n	8006fc2 <_vfiprintf_r+0x96>
 8006fce:	ebba 0b04 	subs.w	fp, sl, r4
 8006fd2:	d00b      	beq.n	8006fec <_vfiprintf_r+0xc0>
 8006fd4:	465b      	mov	r3, fp
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff ff94 	bl	8006f08 <__sfputs_r>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f000 80aa 	beq.w	800713a <_vfiprintf_r+0x20e>
 8006fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe8:	445a      	add	r2, fp
 8006fea:	9209      	str	r2, [sp, #36]	; 0x24
 8006fec:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80a2 	beq.w	800713a <_vfiprintf_r+0x20e>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007000:	f10a 0a01 	add.w	sl, sl, #1
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	9307      	str	r3, [sp, #28]
 8007008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800700c:	931a      	str	r3, [sp, #104]	; 0x68
 800700e:	4654      	mov	r4, sl
 8007010:	2205      	movs	r2, #5
 8007012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007016:	4858      	ldr	r0, [pc, #352]	; (8007178 <_vfiprintf_r+0x24c>)
 8007018:	f7fe ff84 	bl	8005f24 <memchr>
 800701c:	9a04      	ldr	r2, [sp, #16]
 800701e:	b9d8      	cbnz	r0, 8007058 <_vfiprintf_r+0x12c>
 8007020:	06d1      	lsls	r1, r2, #27
 8007022:	bf44      	itt	mi
 8007024:	2320      	movmi	r3, #32
 8007026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800702a:	0713      	lsls	r3, r2, #28
 800702c:	bf44      	itt	mi
 800702e:	232b      	movmi	r3, #43	; 0x2b
 8007030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007034:	f89a 3000 	ldrb.w	r3, [sl]
 8007038:	2b2a      	cmp	r3, #42	; 0x2a
 800703a:	d015      	beq.n	8007068 <_vfiprintf_r+0x13c>
 800703c:	4654      	mov	r4, sl
 800703e:	2000      	movs	r0, #0
 8007040:	f04f 0c0a 	mov.w	ip, #10
 8007044:	9a07      	ldr	r2, [sp, #28]
 8007046:	4621      	mov	r1, r4
 8007048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800704c:	3b30      	subs	r3, #48	; 0x30
 800704e:	2b09      	cmp	r3, #9
 8007050:	d94e      	bls.n	80070f0 <_vfiprintf_r+0x1c4>
 8007052:	b1b0      	cbz	r0, 8007082 <_vfiprintf_r+0x156>
 8007054:	9207      	str	r2, [sp, #28]
 8007056:	e014      	b.n	8007082 <_vfiprintf_r+0x156>
 8007058:	eba0 0308 	sub.w	r3, r0, r8
 800705c:	fa09 f303 	lsl.w	r3, r9, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	46a2      	mov	sl, r4
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	e7d2      	b.n	800700e <_vfiprintf_r+0xe2>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	1d19      	adds	r1, r3, #4
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	9103      	str	r1, [sp, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	bfbb      	ittet	lt
 8007074:	425b      	neglt	r3, r3
 8007076:	f042 0202 	orrlt.w	r2, r2, #2
 800707a:	9307      	strge	r3, [sp, #28]
 800707c:	9307      	strlt	r3, [sp, #28]
 800707e:	bfb8      	it	lt
 8007080:	9204      	strlt	r2, [sp, #16]
 8007082:	7823      	ldrb	r3, [r4, #0]
 8007084:	2b2e      	cmp	r3, #46	; 0x2e
 8007086:	d10c      	bne.n	80070a2 <_vfiprintf_r+0x176>
 8007088:	7863      	ldrb	r3, [r4, #1]
 800708a:	2b2a      	cmp	r3, #42	; 0x2a
 800708c:	d135      	bne.n	80070fa <_vfiprintf_r+0x1ce>
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	3402      	adds	r4, #2
 8007092:	1d1a      	adds	r2, r3, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	9203      	str	r2, [sp, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	bfb8      	it	lt
 800709c:	f04f 33ff 	movlt.w	r3, #4294967295
 80070a0:	9305      	str	r3, [sp, #20]
 80070a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800717c <_vfiprintf_r+0x250>
 80070a6:	2203      	movs	r2, #3
 80070a8:	4650      	mov	r0, sl
 80070aa:	7821      	ldrb	r1, [r4, #0]
 80070ac:	f7fe ff3a 	bl	8005f24 <memchr>
 80070b0:	b140      	cbz	r0, 80070c4 <_vfiprintf_r+0x198>
 80070b2:	2340      	movs	r3, #64	; 0x40
 80070b4:	eba0 000a 	sub.w	r0, r0, sl
 80070b8:	fa03 f000 	lsl.w	r0, r3, r0
 80070bc:	9b04      	ldr	r3, [sp, #16]
 80070be:	3401      	adds	r4, #1
 80070c0:	4303      	orrs	r3, r0
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c8:	2206      	movs	r2, #6
 80070ca:	482d      	ldr	r0, [pc, #180]	; (8007180 <_vfiprintf_r+0x254>)
 80070cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070d0:	f7fe ff28 	bl	8005f24 <memchr>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d03f      	beq.n	8007158 <_vfiprintf_r+0x22c>
 80070d8:	4b2a      	ldr	r3, [pc, #168]	; (8007184 <_vfiprintf_r+0x258>)
 80070da:	bb1b      	cbnz	r3, 8007124 <_vfiprintf_r+0x1f8>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	3307      	adds	r3, #7
 80070e0:	f023 0307 	bic.w	r3, r3, #7
 80070e4:	3308      	adds	r3, #8
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ea:	443b      	add	r3, r7
 80070ec:	9309      	str	r3, [sp, #36]	; 0x24
 80070ee:	e767      	b.n	8006fc0 <_vfiprintf_r+0x94>
 80070f0:	460c      	mov	r4, r1
 80070f2:	2001      	movs	r0, #1
 80070f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80070f8:	e7a5      	b.n	8007046 <_vfiprintf_r+0x11a>
 80070fa:	2300      	movs	r3, #0
 80070fc:	f04f 0c0a 	mov.w	ip, #10
 8007100:	4619      	mov	r1, r3
 8007102:	3401      	adds	r4, #1
 8007104:	9305      	str	r3, [sp, #20]
 8007106:	4620      	mov	r0, r4
 8007108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800710c:	3a30      	subs	r2, #48	; 0x30
 800710e:	2a09      	cmp	r2, #9
 8007110:	d903      	bls.n	800711a <_vfiprintf_r+0x1ee>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0c5      	beq.n	80070a2 <_vfiprintf_r+0x176>
 8007116:	9105      	str	r1, [sp, #20]
 8007118:	e7c3      	b.n	80070a2 <_vfiprintf_r+0x176>
 800711a:	4604      	mov	r4, r0
 800711c:	2301      	movs	r3, #1
 800711e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007122:	e7f0      	b.n	8007106 <_vfiprintf_r+0x1da>
 8007124:	ab03      	add	r3, sp, #12
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	462a      	mov	r2, r5
 800712a:	4630      	mov	r0, r6
 800712c:	4b16      	ldr	r3, [pc, #88]	; (8007188 <_vfiprintf_r+0x25c>)
 800712e:	a904      	add	r1, sp, #16
 8007130:	f7fc f876 	bl	8003220 <_printf_float>
 8007134:	4607      	mov	r7, r0
 8007136:	1c78      	adds	r0, r7, #1
 8007138:	d1d6      	bne.n	80070e8 <_vfiprintf_r+0x1bc>
 800713a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800713c:	07d9      	lsls	r1, r3, #31
 800713e:	d405      	bmi.n	800714c <_vfiprintf_r+0x220>
 8007140:	89ab      	ldrh	r3, [r5, #12]
 8007142:	059a      	lsls	r2, r3, #22
 8007144:	d402      	bmi.n	800714c <_vfiprintf_r+0x220>
 8007146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007148:	f000 fa9d 	bl	8007686 <__retarget_lock_release_recursive>
 800714c:	89ab      	ldrh	r3, [r5, #12]
 800714e:	065b      	lsls	r3, r3, #25
 8007150:	f53f af12 	bmi.w	8006f78 <_vfiprintf_r+0x4c>
 8007154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007156:	e711      	b.n	8006f7c <_vfiprintf_r+0x50>
 8007158:	ab03      	add	r3, sp, #12
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	462a      	mov	r2, r5
 800715e:	4630      	mov	r0, r6
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <_vfiprintf_r+0x25c>)
 8007162:	a904      	add	r1, sp, #16
 8007164:	f7fc faf8 	bl	8003758 <_printf_i>
 8007168:	e7e4      	b.n	8007134 <_vfiprintf_r+0x208>
 800716a:	bf00      	nop
 800716c:	08007de4 	.word	0x08007de4
 8007170:	08007e04 	.word	0x08007e04
 8007174:	08007dc4 	.word	0x08007dc4
 8007178:	08007d74 	.word	0x08007d74
 800717c:	08007d7a 	.word	0x08007d7a
 8007180:	08007d7e 	.word	0x08007d7e
 8007184:	08003221 	.word	0x08003221
 8007188:	08006f09 	.word	0x08006f09

0800718c <__swbuf_r>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	460e      	mov	r6, r1
 8007190:	4614      	mov	r4, r2
 8007192:	4605      	mov	r5, r0
 8007194:	b118      	cbz	r0, 800719e <__swbuf_r+0x12>
 8007196:	6983      	ldr	r3, [r0, #24]
 8007198:	b90b      	cbnz	r3, 800719e <__swbuf_r+0x12>
 800719a:	f000 f9d5 	bl	8007548 <__sinit>
 800719e:	4b21      	ldr	r3, [pc, #132]	; (8007224 <__swbuf_r+0x98>)
 80071a0:	429c      	cmp	r4, r3
 80071a2:	d12b      	bne.n	80071fc <__swbuf_r+0x70>
 80071a4:	686c      	ldr	r4, [r5, #4]
 80071a6:	69a3      	ldr	r3, [r4, #24]
 80071a8:	60a3      	str	r3, [r4, #8]
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	071a      	lsls	r2, r3, #28
 80071ae:	d52f      	bpl.n	8007210 <__swbuf_r+0x84>
 80071b0:	6923      	ldr	r3, [r4, #16]
 80071b2:	b36b      	cbz	r3, 8007210 <__swbuf_r+0x84>
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	6820      	ldr	r0, [r4, #0]
 80071b8:	b2f6      	uxtb	r6, r6
 80071ba:	1ac0      	subs	r0, r0, r3
 80071bc:	6963      	ldr	r3, [r4, #20]
 80071be:	4637      	mov	r7, r6
 80071c0:	4283      	cmp	r3, r0
 80071c2:	dc04      	bgt.n	80071ce <__swbuf_r+0x42>
 80071c4:	4621      	mov	r1, r4
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 f92a 	bl	8007420 <_fflush_r>
 80071cc:	bb30      	cbnz	r0, 800721c <__swbuf_r+0x90>
 80071ce:	68a3      	ldr	r3, [r4, #8]
 80071d0:	3001      	adds	r0, #1
 80071d2:	3b01      	subs	r3, #1
 80071d4:	60a3      	str	r3, [r4, #8]
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	6022      	str	r2, [r4, #0]
 80071dc:	701e      	strb	r6, [r3, #0]
 80071de:	6963      	ldr	r3, [r4, #20]
 80071e0:	4283      	cmp	r3, r0
 80071e2:	d004      	beq.n	80071ee <__swbuf_r+0x62>
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	07db      	lsls	r3, r3, #31
 80071e8:	d506      	bpl.n	80071f8 <__swbuf_r+0x6c>
 80071ea:	2e0a      	cmp	r6, #10
 80071ec:	d104      	bne.n	80071f8 <__swbuf_r+0x6c>
 80071ee:	4621      	mov	r1, r4
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 f915 	bl	8007420 <_fflush_r>
 80071f6:	b988      	cbnz	r0, 800721c <__swbuf_r+0x90>
 80071f8:	4638      	mov	r0, r7
 80071fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071fc:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <__swbuf_r+0x9c>)
 80071fe:	429c      	cmp	r4, r3
 8007200:	d101      	bne.n	8007206 <__swbuf_r+0x7a>
 8007202:	68ac      	ldr	r4, [r5, #8]
 8007204:	e7cf      	b.n	80071a6 <__swbuf_r+0x1a>
 8007206:	4b09      	ldr	r3, [pc, #36]	; (800722c <__swbuf_r+0xa0>)
 8007208:	429c      	cmp	r4, r3
 800720a:	bf08      	it	eq
 800720c:	68ec      	ldreq	r4, [r5, #12]
 800720e:	e7ca      	b.n	80071a6 <__swbuf_r+0x1a>
 8007210:	4621      	mov	r1, r4
 8007212:	4628      	mov	r0, r5
 8007214:	f000 f80c 	bl	8007230 <__swsetup_r>
 8007218:	2800      	cmp	r0, #0
 800721a:	d0cb      	beq.n	80071b4 <__swbuf_r+0x28>
 800721c:	f04f 37ff 	mov.w	r7, #4294967295
 8007220:	e7ea      	b.n	80071f8 <__swbuf_r+0x6c>
 8007222:	bf00      	nop
 8007224:	08007de4 	.word	0x08007de4
 8007228:	08007e04 	.word	0x08007e04
 800722c:	08007dc4 	.word	0x08007dc4

08007230 <__swsetup_r>:
 8007230:	4b32      	ldr	r3, [pc, #200]	; (80072fc <__swsetup_r+0xcc>)
 8007232:	b570      	push	{r4, r5, r6, lr}
 8007234:	681d      	ldr	r5, [r3, #0]
 8007236:	4606      	mov	r6, r0
 8007238:	460c      	mov	r4, r1
 800723a:	b125      	cbz	r5, 8007246 <__swsetup_r+0x16>
 800723c:	69ab      	ldr	r3, [r5, #24]
 800723e:	b913      	cbnz	r3, 8007246 <__swsetup_r+0x16>
 8007240:	4628      	mov	r0, r5
 8007242:	f000 f981 	bl	8007548 <__sinit>
 8007246:	4b2e      	ldr	r3, [pc, #184]	; (8007300 <__swsetup_r+0xd0>)
 8007248:	429c      	cmp	r4, r3
 800724a:	d10f      	bne.n	800726c <__swsetup_r+0x3c>
 800724c:	686c      	ldr	r4, [r5, #4]
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007254:	0719      	lsls	r1, r3, #28
 8007256:	d42c      	bmi.n	80072b2 <__swsetup_r+0x82>
 8007258:	06dd      	lsls	r5, r3, #27
 800725a:	d411      	bmi.n	8007280 <__swsetup_r+0x50>
 800725c:	2309      	movs	r3, #9
 800725e:	6033      	str	r3, [r6, #0]
 8007260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	e03e      	b.n	80072ea <__swsetup_r+0xba>
 800726c:	4b25      	ldr	r3, [pc, #148]	; (8007304 <__swsetup_r+0xd4>)
 800726e:	429c      	cmp	r4, r3
 8007270:	d101      	bne.n	8007276 <__swsetup_r+0x46>
 8007272:	68ac      	ldr	r4, [r5, #8]
 8007274:	e7eb      	b.n	800724e <__swsetup_r+0x1e>
 8007276:	4b24      	ldr	r3, [pc, #144]	; (8007308 <__swsetup_r+0xd8>)
 8007278:	429c      	cmp	r4, r3
 800727a:	bf08      	it	eq
 800727c:	68ec      	ldreq	r4, [r5, #12]
 800727e:	e7e6      	b.n	800724e <__swsetup_r+0x1e>
 8007280:	0758      	lsls	r0, r3, #29
 8007282:	d512      	bpl.n	80072aa <__swsetup_r+0x7a>
 8007284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007286:	b141      	cbz	r1, 800729a <__swsetup_r+0x6a>
 8007288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800728c:	4299      	cmp	r1, r3
 800728e:	d002      	beq.n	8007296 <__swsetup_r+0x66>
 8007290:	4630      	mov	r0, r6
 8007292:	f7ff fb2f 	bl	80068f4 <_free_r>
 8007296:	2300      	movs	r3, #0
 8007298:	6363      	str	r3, [r4, #52]	; 0x34
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072a0:	81a3      	strh	r3, [r4, #12]
 80072a2:	2300      	movs	r3, #0
 80072a4:	6063      	str	r3, [r4, #4]
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f043 0308 	orr.w	r3, r3, #8
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	b94b      	cbnz	r3, 80072ca <__swsetup_r+0x9a>
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c0:	d003      	beq.n	80072ca <__swsetup_r+0x9a>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4630      	mov	r0, r6
 80072c6:	f000 fa05 	bl	80076d4 <__smakebuf_r>
 80072ca:	89a0      	ldrh	r0, [r4, #12]
 80072cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072d0:	f010 0301 	ands.w	r3, r0, #1
 80072d4:	d00a      	beq.n	80072ec <__swsetup_r+0xbc>
 80072d6:	2300      	movs	r3, #0
 80072d8:	60a3      	str	r3, [r4, #8]
 80072da:	6963      	ldr	r3, [r4, #20]
 80072dc:	425b      	negs	r3, r3
 80072de:	61a3      	str	r3, [r4, #24]
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	b943      	cbnz	r3, 80072f6 <__swsetup_r+0xc6>
 80072e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072e8:	d1ba      	bne.n	8007260 <__swsetup_r+0x30>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	0781      	lsls	r1, r0, #30
 80072ee:	bf58      	it	pl
 80072f0:	6963      	ldrpl	r3, [r4, #20]
 80072f2:	60a3      	str	r3, [r4, #8]
 80072f4:	e7f4      	b.n	80072e0 <__swsetup_r+0xb0>
 80072f6:	2000      	movs	r0, #0
 80072f8:	e7f7      	b.n	80072ea <__swsetup_r+0xba>
 80072fa:	bf00      	nop
 80072fc:	2000000c 	.word	0x2000000c
 8007300:	08007de4 	.word	0x08007de4
 8007304:	08007e04 	.word	0x08007e04
 8007308:	08007dc4 	.word	0x08007dc4

0800730c <abort>:
 800730c:	2006      	movs	r0, #6
 800730e:	b508      	push	{r3, lr}
 8007310:	f000 fa50 	bl	80077b4 <raise>
 8007314:	2001      	movs	r0, #1
 8007316:	f7f9 ff90 	bl	800123a <_exit>
	...

0800731c <__sflush_r>:
 800731c:	898a      	ldrh	r2, [r1, #12]
 800731e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007320:	4605      	mov	r5, r0
 8007322:	0710      	lsls	r0, r2, #28
 8007324:	460c      	mov	r4, r1
 8007326:	d457      	bmi.n	80073d8 <__sflush_r+0xbc>
 8007328:	684b      	ldr	r3, [r1, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	dc04      	bgt.n	8007338 <__sflush_r+0x1c>
 800732e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	dc01      	bgt.n	8007338 <__sflush_r+0x1c>
 8007334:	2000      	movs	r0, #0
 8007336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800733a:	2e00      	cmp	r6, #0
 800733c:	d0fa      	beq.n	8007334 <__sflush_r+0x18>
 800733e:	2300      	movs	r3, #0
 8007340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007344:	682f      	ldr	r7, [r5, #0]
 8007346:	602b      	str	r3, [r5, #0]
 8007348:	d032      	beq.n	80073b0 <__sflush_r+0x94>
 800734a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	075a      	lsls	r2, r3, #29
 8007350:	d505      	bpl.n	800735e <__sflush_r+0x42>
 8007352:	6863      	ldr	r3, [r4, #4]
 8007354:	1ac0      	subs	r0, r0, r3
 8007356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007358:	b10b      	cbz	r3, 800735e <__sflush_r+0x42>
 800735a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800735c:	1ac0      	subs	r0, r0, r3
 800735e:	2300      	movs	r3, #0
 8007360:	4602      	mov	r2, r0
 8007362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007364:	4628      	mov	r0, r5
 8007366:	6a21      	ldr	r1, [r4, #32]
 8007368:	47b0      	blx	r6
 800736a:	1c43      	adds	r3, r0, #1
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	d106      	bne.n	800737e <__sflush_r+0x62>
 8007370:	6829      	ldr	r1, [r5, #0]
 8007372:	291d      	cmp	r1, #29
 8007374:	d82c      	bhi.n	80073d0 <__sflush_r+0xb4>
 8007376:	4a29      	ldr	r2, [pc, #164]	; (800741c <__sflush_r+0x100>)
 8007378:	40ca      	lsrs	r2, r1
 800737a:	07d6      	lsls	r6, r2, #31
 800737c:	d528      	bpl.n	80073d0 <__sflush_r+0xb4>
 800737e:	2200      	movs	r2, #0
 8007380:	6062      	str	r2, [r4, #4]
 8007382:	6922      	ldr	r2, [r4, #16]
 8007384:	04d9      	lsls	r1, r3, #19
 8007386:	6022      	str	r2, [r4, #0]
 8007388:	d504      	bpl.n	8007394 <__sflush_r+0x78>
 800738a:	1c42      	adds	r2, r0, #1
 800738c:	d101      	bne.n	8007392 <__sflush_r+0x76>
 800738e:	682b      	ldr	r3, [r5, #0]
 8007390:	b903      	cbnz	r3, 8007394 <__sflush_r+0x78>
 8007392:	6560      	str	r0, [r4, #84]	; 0x54
 8007394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007396:	602f      	str	r7, [r5, #0]
 8007398:	2900      	cmp	r1, #0
 800739a:	d0cb      	beq.n	8007334 <__sflush_r+0x18>
 800739c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073a0:	4299      	cmp	r1, r3
 80073a2:	d002      	beq.n	80073aa <__sflush_r+0x8e>
 80073a4:	4628      	mov	r0, r5
 80073a6:	f7ff faa5 	bl	80068f4 <_free_r>
 80073aa:	2000      	movs	r0, #0
 80073ac:	6360      	str	r0, [r4, #52]	; 0x34
 80073ae:	e7c2      	b.n	8007336 <__sflush_r+0x1a>
 80073b0:	6a21      	ldr	r1, [r4, #32]
 80073b2:	2301      	movs	r3, #1
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b0      	blx	r6
 80073b8:	1c41      	adds	r1, r0, #1
 80073ba:	d1c7      	bne.n	800734c <__sflush_r+0x30>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0c4      	beq.n	800734c <__sflush_r+0x30>
 80073c2:	2b1d      	cmp	r3, #29
 80073c4:	d001      	beq.n	80073ca <__sflush_r+0xae>
 80073c6:	2b16      	cmp	r3, #22
 80073c8:	d101      	bne.n	80073ce <__sflush_r+0xb2>
 80073ca:	602f      	str	r7, [r5, #0]
 80073cc:	e7b2      	b.n	8007334 <__sflush_r+0x18>
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d4:	81a3      	strh	r3, [r4, #12]
 80073d6:	e7ae      	b.n	8007336 <__sflush_r+0x1a>
 80073d8:	690f      	ldr	r7, [r1, #16]
 80073da:	2f00      	cmp	r7, #0
 80073dc:	d0aa      	beq.n	8007334 <__sflush_r+0x18>
 80073de:	0793      	lsls	r3, r2, #30
 80073e0:	bf18      	it	ne
 80073e2:	2300      	movne	r3, #0
 80073e4:	680e      	ldr	r6, [r1, #0]
 80073e6:	bf08      	it	eq
 80073e8:	694b      	ldreq	r3, [r1, #20]
 80073ea:	1bf6      	subs	r6, r6, r7
 80073ec:	600f      	str	r7, [r1, #0]
 80073ee:	608b      	str	r3, [r1, #8]
 80073f0:	2e00      	cmp	r6, #0
 80073f2:	dd9f      	ble.n	8007334 <__sflush_r+0x18>
 80073f4:	4633      	mov	r3, r6
 80073f6:	463a      	mov	r2, r7
 80073f8:	4628      	mov	r0, r5
 80073fa:	6a21      	ldr	r1, [r4, #32]
 80073fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007400:	47e0      	blx	ip
 8007402:	2800      	cmp	r0, #0
 8007404:	dc06      	bgt.n	8007414 <__sflush_r+0xf8>
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	f04f 30ff 	mov.w	r0, #4294967295
 800740c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007410:	81a3      	strh	r3, [r4, #12]
 8007412:	e790      	b.n	8007336 <__sflush_r+0x1a>
 8007414:	4407      	add	r7, r0
 8007416:	1a36      	subs	r6, r6, r0
 8007418:	e7ea      	b.n	80073f0 <__sflush_r+0xd4>
 800741a:	bf00      	nop
 800741c:	20400001 	.word	0x20400001

08007420 <_fflush_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	690b      	ldr	r3, [r1, #16]
 8007424:	4605      	mov	r5, r0
 8007426:	460c      	mov	r4, r1
 8007428:	b913      	cbnz	r3, 8007430 <_fflush_r+0x10>
 800742a:	2500      	movs	r5, #0
 800742c:	4628      	mov	r0, r5
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	b118      	cbz	r0, 800743a <_fflush_r+0x1a>
 8007432:	6983      	ldr	r3, [r0, #24]
 8007434:	b90b      	cbnz	r3, 800743a <_fflush_r+0x1a>
 8007436:	f000 f887 	bl	8007548 <__sinit>
 800743a:	4b14      	ldr	r3, [pc, #80]	; (800748c <_fflush_r+0x6c>)
 800743c:	429c      	cmp	r4, r3
 800743e:	d11b      	bne.n	8007478 <_fflush_r+0x58>
 8007440:	686c      	ldr	r4, [r5, #4]
 8007442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0ef      	beq.n	800742a <_fflush_r+0xa>
 800744a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800744c:	07d0      	lsls	r0, r2, #31
 800744e:	d404      	bmi.n	800745a <_fflush_r+0x3a>
 8007450:	0599      	lsls	r1, r3, #22
 8007452:	d402      	bmi.n	800745a <_fflush_r+0x3a>
 8007454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007456:	f000 f915 	bl	8007684 <__retarget_lock_acquire_recursive>
 800745a:	4628      	mov	r0, r5
 800745c:	4621      	mov	r1, r4
 800745e:	f7ff ff5d 	bl	800731c <__sflush_r>
 8007462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007464:	4605      	mov	r5, r0
 8007466:	07da      	lsls	r2, r3, #31
 8007468:	d4e0      	bmi.n	800742c <_fflush_r+0xc>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	059b      	lsls	r3, r3, #22
 800746e:	d4dd      	bmi.n	800742c <_fflush_r+0xc>
 8007470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007472:	f000 f908 	bl	8007686 <__retarget_lock_release_recursive>
 8007476:	e7d9      	b.n	800742c <_fflush_r+0xc>
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <_fflush_r+0x70>)
 800747a:	429c      	cmp	r4, r3
 800747c:	d101      	bne.n	8007482 <_fflush_r+0x62>
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	e7df      	b.n	8007442 <_fflush_r+0x22>
 8007482:	4b04      	ldr	r3, [pc, #16]	; (8007494 <_fflush_r+0x74>)
 8007484:	429c      	cmp	r4, r3
 8007486:	bf08      	it	eq
 8007488:	68ec      	ldreq	r4, [r5, #12]
 800748a:	e7da      	b.n	8007442 <_fflush_r+0x22>
 800748c:	08007de4 	.word	0x08007de4
 8007490:	08007e04 	.word	0x08007e04
 8007494:	08007dc4 	.word	0x08007dc4

08007498 <std>:
 8007498:	2300      	movs	r3, #0
 800749a:	b510      	push	{r4, lr}
 800749c:	4604      	mov	r4, r0
 800749e:	e9c0 3300 	strd	r3, r3, [r0]
 80074a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074a6:	6083      	str	r3, [r0, #8]
 80074a8:	8181      	strh	r1, [r0, #12]
 80074aa:	6643      	str	r3, [r0, #100]	; 0x64
 80074ac:	81c2      	strh	r2, [r0, #14]
 80074ae:	6183      	str	r3, [r0, #24]
 80074b0:	4619      	mov	r1, r3
 80074b2:	2208      	movs	r2, #8
 80074b4:	305c      	adds	r0, #92	; 0x5c
 80074b6:	f7fb fe0d 	bl	80030d4 <memset>
 80074ba:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <std+0x38>)
 80074bc:	6224      	str	r4, [r4, #32]
 80074be:	6263      	str	r3, [r4, #36]	; 0x24
 80074c0:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <std+0x3c>)
 80074c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80074c4:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <std+0x40>)
 80074c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074c8:	4b04      	ldr	r3, [pc, #16]	; (80074dc <std+0x44>)
 80074ca:	6323      	str	r3, [r4, #48]	; 0x30
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	bf00      	nop
 80074d0:	080077ed 	.word	0x080077ed
 80074d4:	0800780f 	.word	0x0800780f
 80074d8:	08007847 	.word	0x08007847
 80074dc:	0800786b 	.word	0x0800786b

080074e0 <_cleanup_r>:
 80074e0:	4901      	ldr	r1, [pc, #4]	; (80074e8 <_cleanup_r+0x8>)
 80074e2:	f000 b8af 	b.w	8007644 <_fwalk_reent>
 80074e6:	bf00      	nop
 80074e8:	08007421 	.word	0x08007421

080074ec <__sfmoreglue>:
 80074ec:	2268      	movs	r2, #104	; 0x68
 80074ee:	b570      	push	{r4, r5, r6, lr}
 80074f0:	1e4d      	subs	r5, r1, #1
 80074f2:	4355      	muls	r5, r2
 80074f4:	460e      	mov	r6, r1
 80074f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074fa:	f7ff fa63 	bl	80069c4 <_malloc_r>
 80074fe:	4604      	mov	r4, r0
 8007500:	b140      	cbz	r0, 8007514 <__sfmoreglue+0x28>
 8007502:	2100      	movs	r1, #0
 8007504:	e9c0 1600 	strd	r1, r6, [r0]
 8007508:	300c      	adds	r0, #12
 800750a:	60a0      	str	r0, [r4, #8]
 800750c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007510:	f7fb fde0 	bl	80030d4 <memset>
 8007514:	4620      	mov	r0, r4
 8007516:	bd70      	pop	{r4, r5, r6, pc}

08007518 <__sfp_lock_acquire>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__sfp_lock_acquire+0x8>)
 800751a:	f000 b8b3 	b.w	8007684 <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	200002b5 	.word	0x200002b5

08007524 <__sfp_lock_release>:
 8007524:	4801      	ldr	r0, [pc, #4]	; (800752c <__sfp_lock_release+0x8>)
 8007526:	f000 b8ae 	b.w	8007686 <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	200002b5 	.word	0x200002b5

08007530 <__sinit_lock_acquire>:
 8007530:	4801      	ldr	r0, [pc, #4]	; (8007538 <__sinit_lock_acquire+0x8>)
 8007532:	f000 b8a7 	b.w	8007684 <__retarget_lock_acquire_recursive>
 8007536:	bf00      	nop
 8007538:	200002b6 	.word	0x200002b6

0800753c <__sinit_lock_release>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__sinit_lock_release+0x8>)
 800753e:	f000 b8a2 	b.w	8007686 <__retarget_lock_release_recursive>
 8007542:	bf00      	nop
 8007544:	200002b6 	.word	0x200002b6

08007548 <__sinit>:
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
 800754c:	f7ff fff0 	bl	8007530 <__sinit_lock_acquire>
 8007550:	69a3      	ldr	r3, [r4, #24]
 8007552:	b11b      	cbz	r3, 800755c <__sinit+0x14>
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f7ff bff0 	b.w	800753c <__sinit_lock_release>
 800755c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007560:	6523      	str	r3, [r4, #80]	; 0x50
 8007562:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <__sinit+0x68>)
 8007564:	4a13      	ldr	r2, [pc, #76]	; (80075b4 <__sinit+0x6c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	62a2      	str	r2, [r4, #40]	; 0x28
 800756a:	42a3      	cmp	r3, r4
 800756c:	bf08      	it	eq
 800756e:	2301      	moveq	r3, #1
 8007570:	4620      	mov	r0, r4
 8007572:	bf08      	it	eq
 8007574:	61a3      	streq	r3, [r4, #24]
 8007576:	f000 f81f 	bl	80075b8 <__sfp>
 800757a:	6060      	str	r0, [r4, #4]
 800757c:	4620      	mov	r0, r4
 800757e:	f000 f81b 	bl	80075b8 <__sfp>
 8007582:	60a0      	str	r0, [r4, #8]
 8007584:	4620      	mov	r0, r4
 8007586:	f000 f817 	bl	80075b8 <__sfp>
 800758a:	2200      	movs	r2, #0
 800758c:	2104      	movs	r1, #4
 800758e:	60e0      	str	r0, [r4, #12]
 8007590:	6860      	ldr	r0, [r4, #4]
 8007592:	f7ff ff81 	bl	8007498 <std>
 8007596:	2201      	movs	r2, #1
 8007598:	2109      	movs	r1, #9
 800759a:	68a0      	ldr	r0, [r4, #8]
 800759c:	f7ff ff7c 	bl	8007498 <std>
 80075a0:	2202      	movs	r2, #2
 80075a2:	2112      	movs	r1, #18
 80075a4:	68e0      	ldr	r0, [r4, #12]
 80075a6:	f7ff ff77 	bl	8007498 <std>
 80075aa:	2301      	movs	r3, #1
 80075ac:	61a3      	str	r3, [r4, #24]
 80075ae:	e7d1      	b.n	8007554 <__sinit+0xc>
 80075b0:	08007980 	.word	0x08007980
 80075b4:	080074e1 	.word	0x080074e1

080075b8 <__sfp>:
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ba:	4607      	mov	r7, r0
 80075bc:	f7ff ffac 	bl	8007518 <__sfp_lock_acquire>
 80075c0:	4b1e      	ldr	r3, [pc, #120]	; (800763c <__sfp+0x84>)
 80075c2:	681e      	ldr	r6, [r3, #0]
 80075c4:	69b3      	ldr	r3, [r6, #24]
 80075c6:	b913      	cbnz	r3, 80075ce <__sfp+0x16>
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff ffbd 	bl	8007548 <__sinit>
 80075ce:	3648      	adds	r6, #72	; 0x48
 80075d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	d503      	bpl.n	80075e0 <__sfp+0x28>
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	b30b      	cbz	r3, 8007620 <__sfp+0x68>
 80075dc:	6836      	ldr	r6, [r6, #0]
 80075de:	e7f7      	b.n	80075d0 <__sfp+0x18>
 80075e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075e4:	b9d5      	cbnz	r5, 800761c <__sfp+0x64>
 80075e6:	4b16      	ldr	r3, [pc, #88]	; (8007640 <__sfp+0x88>)
 80075e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ec:	60e3      	str	r3, [r4, #12]
 80075ee:	6665      	str	r5, [r4, #100]	; 0x64
 80075f0:	f000 f847 	bl	8007682 <__retarget_lock_init_recursive>
 80075f4:	f7ff ff96 	bl	8007524 <__sfp_lock_release>
 80075f8:	2208      	movs	r2, #8
 80075fa:	4629      	mov	r1, r5
 80075fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007604:	6025      	str	r5, [r4, #0]
 8007606:	61a5      	str	r5, [r4, #24]
 8007608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800760c:	f7fb fd62 	bl	80030d4 <memset>
 8007610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007618:	4620      	mov	r0, r4
 800761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761c:	3468      	adds	r4, #104	; 0x68
 800761e:	e7d9      	b.n	80075d4 <__sfp+0x1c>
 8007620:	2104      	movs	r1, #4
 8007622:	4638      	mov	r0, r7
 8007624:	f7ff ff62 	bl	80074ec <__sfmoreglue>
 8007628:	4604      	mov	r4, r0
 800762a:	6030      	str	r0, [r6, #0]
 800762c:	2800      	cmp	r0, #0
 800762e:	d1d5      	bne.n	80075dc <__sfp+0x24>
 8007630:	f7ff ff78 	bl	8007524 <__sfp_lock_release>
 8007634:	230c      	movs	r3, #12
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	e7ee      	b.n	8007618 <__sfp+0x60>
 800763a:	bf00      	nop
 800763c:	08007980 	.word	0x08007980
 8007640:	ffff0001 	.word	0xffff0001

08007644 <_fwalk_reent>:
 8007644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007648:	4606      	mov	r6, r0
 800764a:	4688      	mov	r8, r1
 800764c:	2700      	movs	r7, #0
 800764e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007656:	f1b9 0901 	subs.w	r9, r9, #1
 800765a:	d505      	bpl.n	8007668 <_fwalk_reent+0x24>
 800765c:	6824      	ldr	r4, [r4, #0]
 800765e:	2c00      	cmp	r4, #0
 8007660:	d1f7      	bne.n	8007652 <_fwalk_reent+0xe>
 8007662:	4638      	mov	r0, r7
 8007664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007668:	89ab      	ldrh	r3, [r5, #12]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d907      	bls.n	800767e <_fwalk_reent+0x3a>
 800766e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007672:	3301      	adds	r3, #1
 8007674:	d003      	beq.n	800767e <_fwalk_reent+0x3a>
 8007676:	4629      	mov	r1, r5
 8007678:	4630      	mov	r0, r6
 800767a:	47c0      	blx	r8
 800767c:	4307      	orrs	r7, r0
 800767e:	3568      	adds	r5, #104	; 0x68
 8007680:	e7e9      	b.n	8007656 <_fwalk_reent+0x12>

08007682 <__retarget_lock_init_recursive>:
 8007682:	4770      	bx	lr

08007684 <__retarget_lock_acquire_recursive>:
 8007684:	4770      	bx	lr

08007686 <__retarget_lock_release_recursive>:
 8007686:	4770      	bx	lr

08007688 <__swhatbuf_r>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	460e      	mov	r6, r1
 800768c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007690:	4614      	mov	r4, r2
 8007692:	2900      	cmp	r1, #0
 8007694:	461d      	mov	r5, r3
 8007696:	b096      	sub	sp, #88	; 0x58
 8007698:	da08      	bge.n	80076ac <__swhatbuf_r+0x24>
 800769a:	2200      	movs	r2, #0
 800769c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80076a0:	602a      	str	r2, [r5, #0]
 80076a2:	061a      	lsls	r2, r3, #24
 80076a4:	d410      	bmi.n	80076c8 <__swhatbuf_r+0x40>
 80076a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076aa:	e00e      	b.n	80076ca <__swhatbuf_r+0x42>
 80076ac:	466a      	mov	r2, sp
 80076ae:	f000 f903 	bl	80078b8 <_fstat_r>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	dbf1      	blt.n	800769a <__swhatbuf_r+0x12>
 80076b6:	9a01      	ldr	r2, [sp, #4]
 80076b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076c0:	425a      	negs	r2, r3
 80076c2:	415a      	adcs	r2, r3
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	e7ee      	b.n	80076a6 <__swhatbuf_r+0x1e>
 80076c8:	2340      	movs	r3, #64	; 0x40
 80076ca:	2000      	movs	r0, #0
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	b016      	add	sp, #88	; 0x58
 80076d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080076d4 <__smakebuf_r>:
 80076d4:	898b      	ldrh	r3, [r1, #12]
 80076d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076d8:	079d      	lsls	r5, r3, #30
 80076da:	4606      	mov	r6, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	d507      	bpl.n	80076f0 <__smakebuf_r+0x1c>
 80076e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	2301      	movs	r3, #1
 80076ea:	6163      	str	r3, [r4, #20]
 80076ec:	b002      	add	sp, #8
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	466a      	mov	r2, sp
 80076f2:	ab01      	add	r3, sp, #4
 80076f4:	f7ff ffc8 	bl	8007688 <__swhatbuf_r>
 80076f8:	9900      	ldr	r1, [sp, #0]
 80076fa:	4605      	mov	r5, r0
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7ff f961 	bl	80069c4 <_malloc_r>
 8007702:	b948      	cbnz	r0, 8007718 <__smakebuf_r+0x44>
 8007704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007708:	059a      	lsls	r2, r3, #22
 800770a:	d4ef      	bmi.n	80076ec <__smakebuf_r+0x18>
 800770c:	f023 0303 	bic.w	r3, r3, #3
 8007710:	f043 0302 	orr.w	r3, r3, #2
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	e7e3      	b.n	80076e0 <__smakebuf_r+0xc>
 8007718:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <__smakebuf_r+0x7c>)
 800771a:	62b3      	str	r3, [r6, #40]	; 0x28
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	6020      	str	r0, [r4, #0]
 8007720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	6120      	str	r0, [r4, #16]
 800772a:	6163      	str	r3, [r4, #20]
 800772c:	9b01      	ldr	r3, [sp, #4]
 800772e:	b15b      	cbz	r3, 8007748 <__smakebuf_r+0x74>
 8007730:	4630      	mov	r0, r6
 8007732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007736:	f000 f8d1 	bl	80078dc <_isatty_r>
 800773a:	b128      	cbz	r0, 8007748 <__smakebuf_r+0x74>
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	f043 0301 	orr.w	r3, r3, #1
 8007746:	81a3      	strh	r3, [r4, #12]
 8007748:	89a0      	ldrh	r0, [r4, #12]
 800774a:	4305      	orrs	r5, r0
 800774c:	81a5      	strh	r5, [r4, #12]
 800774e:	e7cd      	b.n	80076ec <__smakebuf_r+0x18>
 8007750:	080074e1 	.word	0x080074e1

08007754 <_malloc_usable_size_r>:
 8007754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007758:	1f18      	subs	r0, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfbc      	itt	lt
 800775e:	580b      	ldrlt	r3, [r1, r0]
 8007760:	18c0      	addlt	r0, r0, r3
 8007762:	4770      	bx	lr

08007764 <_raise_r>:
 8007764:	291f      	cmp	r1, #31
 8007766:	b538      	push	{r3, r4, r5, lr}
 8007768:	4604      	mov	r4, r0
 800776a:	460d      	mov	r5, r1
 800776c:	d904      	bls.n	8007778 <_raise_r+0x14>
 800776e:	2316      	movs	r3, #22
 8007770:	6003      	str	r3, [r0, #0]
 8007772:	f04f 30ff 	mov.w	r0, #4294967295
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800777a:	b112      	cbz	r2, 8007782 <_raise_r+0x1e>
 800777c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007780:	b94b      	cbnz	r3, 8007796 <_raise_r+0x32>
 8007782:	4620      	mov	r0, r4
 8007784:	f000 f830 	bl	80077e8 <_getpid_r>
 8007788:	462a      	mov	r2, r5
 800778a:	4601      	mov	r1, r0
 800778c:	4620      	mov	r0, r4
 800778e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007792:	f000 b817 	b.w	80077c4 <_kill_r>
 8007796:	2b01      	cmp	r3, #1
 8007798:	d00a      	beq.n	80077b0 <_raise_r+0x4c>
 800779a:	1c59      	adds	r1, r3, #1
 800779c:	d103      	bne.n	80077a6 <_raise_r+0x42>
 800779e:	2316      	movs	r3, #22
 80077a0:	6003      	str	r3, [r0, #0]
 80077a2:	2001      	movs	r0, #1
 80077a4:	e7e7      	b.n	8007776 <_raise_r+0x12>
 80077a6:	2400      	movs	r4, #0
 80077a8:	4628      	mov	r0, r5
 80077aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077ae:	4798      	blx	r3
 80077b0:	2000      	movs	r0, #0
 80077b2:	e7e0      	b.n	8007776 <_raise_r+0x12>

080077b4 <raise>:
 80077b4:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <raise+0xc>)
 80077b6:	4601      	mov	r1, r0
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	f7ff bfd3 	b.w	8007764 <_raise_r>
 80077be:	bf00      	nop
 80077c0:	2000000c 	.word	0x2000000c

080077c4 <_kill_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	2300      	movs	r3, #0
 80077c8:	4d06      	ldr	r5, [pc, #24]	; (80077e4 <_kill_r+0x20>)
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	f7f9 fd22 	bl	800121a <_kill>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	d102      	bne.n	80077e0 <_kill_r+0x1c>
 80077da:	682b      	ldr	r3, [r5, #0]
 80077dc:	b103      	cbz	r3, 80077e0 <_kill_r+0x1c>
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	bf00      	nop
 80077e4:	200002b0 	.word	0x200002b0

080077e8 <_getpid_r>:
 80077e8:	f7f9 bd10 	b.w	800120c <_getpid>

080077ec <__sread>:
 80077ec:	b510      	push	{r4, lr}
 80077ee:	460c      	mov	r4, r1
 80077f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f4:	f000 f894 	bl	8007920 <_read_r>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	bfab      	itete	ge
 80077fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007800:	181b      	addge	r3, r3, r0
 8007802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007806:	bfac      	ite	ge
 8007808:	6563      	strge	r3, [r4, #84]	; 0x54
 800780a:	81a3      	strhlt	r3, [r4, #12]
 800780c:	bd10      	pop	{r4, pc}

0800780e <__swrite>:
 800780e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007812:	461f      	mov	r7, r3
 8007814:	898b      	ldrh	r3, [r1, #12]
 8007816:	4605      	mov	r5, r0
 8007818:	05db      	lsls	r3, r3, #23
 800781a:	460c      	mov	r4, r1
 800781c:	4616      	mov	r6, r2
 800781e:	d505      	bpl.n	800782c <__swrite+0x1e>
 8007820:	2302      	movs	r3, #2
 8007822:	2200      	movs	r2, #0
 8007824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007828:	f000 f868 	bl	80078fc <_lseek_r>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	4632      	mov	r2, r6
 8007830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007834:	81a3      	strh	r3, [r4, #12]
 8007836:	4628      	mov	r0, r5
 8007838:	463b      	mov	r3, r7
 800783a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800783e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007842:	f000 b817 	b.w	8007874 <_write_r>

08007846 <__sseek>:
 8007846:	b510      	push	{r4, lr}
 8007848:	460c      	mov	r4, r1
 800784a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800784e:	f000 f855 	bl	80078fc <_lseek_r>
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	bf15      	itete	ne
 8007858:	6560      	strne	r0, [r4, #84]	; 0x54
 800785a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800785e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007862:	81a3      	strheq	r3, [r4, #12]
 8007864:	bf18      	it	ne
 8007866:	81a3      	strhne	r3, [r4, #12]
 8007868:	bd10      	pop	{r4, pc}

0800786a <__sclose>:
 800786a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786e:	f000 b813 	b.w	8007898 <_close_r>
	...

08007874 <_write_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4604      	mov	r4, r0
 8007878:	4608      	mov	r0, r1
 800787a:	4611      	mov	r1, r2
 800787c:	2200      	movs	r2, #0
 800787e:	4d05      	ldr	r5, [pc, #20]	; (8007894 <_write_r+0x20>)
 8007880:	602a      	str	r2, [r5, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	f7f9 fd00 	bl	8001288 <_write>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d102      	bne.n	8007892 <_write_r+0x1e>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	b103      	cbz	r3, 8007892 <_write_r+0x1e>
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	200002b0 	.word	0x200002b0

08007898 <_close_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	2300      	movs	r3, #0
 800789c:	4d05      	ldr	r5, [pc, #20]	; (80078b4 <_close_r+0x1c>)
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	602b      	str	r3, [r5, #0]
 80078a4:	f7f9 fd0c 	bl	80012c0 <_close>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d102      	bne.n	80078b2 <_close_r+0x1a>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b103      	cbz	r3, 80078b2 <_close_r+0x1a>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	200002b0 	.word	0x200002b0

080078b8 <_fstat_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	2300      	movs	r3, #0
 80078bc:	4d06      	ldr	r5, [pc, #24]	; (80078d8 <_fstat_r+0x20>)
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	4611      	mov	r1, r2
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	f7f9 fd06 	bl	80012d6 <_fstat>
 80078ca:	1c43      	adds	r3, r0, #1
 80078cc:	d102      	bne.n	80078d4 <_fstat_r+0x1c>
 80078ce:	682b      	ldr	r3, [r5, #0]
 80078d0:	b103      	cbz	r3, 80078d4 <_fstat_r+0x1c>
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	bd38      	pop	{r3, r4, r5, pc}
 80078d6:	bf00      	nop
 80078d8:	200002b0 	.word	0x200002b0

080078dc <_isatty_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	2300      	movs	r3, #0
 80078e0:	4d05      	ldr	r5, [pc, #20]	; (80078f8 <_isatty_r+0x1c>)
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	f7f9 fd04 	bl	80012f4 <_isatty>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_isatty_r+0x1a>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_isatty_r+0x1a>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	200002b0 	.word	0x200002b0

080078fc <_lseek_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	4611      	mov	r1, r2
 8007904:	2200      	movs	r2, #0
 8007906:	4d05      	ldr	r5, [pc, #20]	; (800791c <_lseek_r+0x20>)
 8007908:	602a      	str	r2, [r5, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	f7f9 fcfc 	bl	8001308 <_lseek>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_lseek_r+0x1e>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_lseek_r+0x1e>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	200002b0 	.word	0x200002b0

08007920 <_read_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	4611      	mov	r1, r2
 8007928:	2200      	movs	r2, #0
 800792a:	4d05      	ldr	r5, [pc, #20]	; (8007940 <_read_r+0x20>)
 800792c:	602a      	str	r2, [r5, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f7f9 fc8d 	bl	800124e <_read>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_read_r+0x1e>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_read_r+0x1e>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	200002b0 	.word	0x200002b0

08007944 <_init>:
 8007944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007946:	bf00      	nop
 8007948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794a:	bc08      	pop	{r3}
 800794c:	469e      	mov	lr, r3
 800794e:	4770      	bx	lr

08007950 <_fini>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	bf00      	nop
 8007954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007956:	bc08      	pop	{r3}
 8007958:	469e      	mov	lr, r3
 800795a:	4770      	bx	lr
